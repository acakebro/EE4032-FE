{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var CloudflareProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(CloudflareProvider, _UrlJsonRpcProvider);\n  var _super2 = _createSuper(CloudflareProvider);\n  function CloudflareProvider() {\n    _classCallCheck(this, CloudflareProvider);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(CloudflareProvider, [{\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this = this;\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(CloudflareProvider.prototype), \"perform\", _this);\n          }\n        }\n      });\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var block;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(method === \"getBlockNumber\")) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 3;\n                return _super.perform.call(this, \"getBlock\", {\n                  blockTag: \"latest\"\n                });\n              case 3:\n                block = _context.sent;\n                return _context.abrupt(\"return\", block.number);\n              case 5:\n                return _context.abrupt(\"return\", _super.perform.call(this, method, params));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey != null) {\n        logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n      }\n      return null;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network.name) {\n        case \"homestead\":\n          host = \"https://cloudflare-eth.com/\";\n          break;\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n      return host;\n    }\n  }]);\n  return CloudflareProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGb,SAASA,kBAAkB,QAAQ,yBAAyB;AAE5D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,WAAaE,kBAAmB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAsBtB,iBAAQC,MAAc,EAAEC,MAAW;MAAA;;;;;;;;;;;;;;sBAGjCD,MAAM,KAAK,gBAAgB;kBAAA;kBAAA;gBAAA;gBAAA;gBACb,OAAME,OAAMC,OAAO,YAAC,UAAU,EAAE;kBAAEC,QAAQ,EAAE;gBAAQ,CAAE,CAAC;cAAA;gBAA/DC,KAAK;gBAAA,iCACJA,KAAK,CAACC,MAAM;cAAA;gBAAA,iCAGhBJ,OAAMC,OAAO,YAACH,MAAM,EAAEC,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtC;;EAAA;IAAA;IAAA,OA7BD,mBAAiBM,MAAW;MACxB,IAAIA,MAAM,IAAI,IAAI,EAAE;QAChBT,MAAM,CAACU,kBAAkB,CAAC,qCAAqC,EAAE,QAAQ,EAAED,MAAM,CAAC;;MAEtF,OAAO,IAAI;IACf;EAAC;IAAA;IAAA,OAED,gBAAcE,OAAgB,EAAEF,MAAY;MACxC,IAAIG,IAAI,GAAG,IAAI;MACf,QAAQD,OAAO,CAACE,IAAI;QAChB,KAAK,WAAW;UACZD,IAAI,GAAG,6BAA6B;UACpC;QACJ;UACGZ,MAAM,CAACU,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAEI,SAAS,CAAC,CAAC,CAAC,CAAC;MAAC;MAGjF,OAAOF,IAAI;IACf;EAAC;EAAA;AAAA,EApBmCf,kBAAkB","names":["UrlJsonRpcProvider","Logger","version","logger","CloudflareProvider","method","params","_super","perform","blockTag","block","number","apiKey","throwArgumentError","network","host","name","arguments"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}