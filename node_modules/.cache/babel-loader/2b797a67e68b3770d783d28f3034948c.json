{"ast":null,"code":"import { mix } from './mix.mjs';\nimport { hsla, rgba, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  var toExpo = to * to;\n  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nvar colorTypes = [hex, rgba, hsla];\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\nvar notAnimatable = function notAnimatable(color) {\n  return \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\");\n};\nvar mixColor = function mixColor(from, to) {\n  var fromColorType = getColorType(from);\n  var toColorType = getColorType(to);\n  invariant(!!fromColorType, notAnimatable(from));\n  invariant(!!toColorType, notAnimatable(to));\n  var fromColor = fromColorType.parse(from);\n  var toColor = toColorType.parse(to);\n  if (fromColorType === hsla) {\n    fromColor = hslaToRgba(fromColor);\n    fromColorType = rgba;\n  }\n  if (toColorType === hsla) {\n    toColor = hslaToRgba(toColor);\n    toColorType = rgba;\n  }\n  var blended = Object.assign({}, fromColor);\n  return function (v) {\n    for (var key in blended) {\n      if (key !== \"alpha\") {\n        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n      }\n    }\n    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n    return fromColorType.transform(blended);\n  };\n};\nexport { mixColor, mixLinearColor };","map":{"version":3,"names":["mix","hsla","rgba","hex","invariant","hslaToRgba","mixLinearColor","from","to","v","fromExpo","toExpo","Math","sqrt","max","colorTypes","getColorType","find","type","test","notAnimatable","color","mixColor","fromColorType","toColorType","fromColor","parse","toColor","blended","Object","assign","key","alpha","transform"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/popmotion/dist/es/utils/mix-color.mjs"],"sourcesContent":["import { mix } from './mix.mjs';\nimport { hsla, rgba, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nconst notAnimatable = (color) => `'${color}' is not an animatable color. Use the equivalent color code instead.`;\nconst mixColor = (from, to) => {\n    let fromColorType = getColorType(from);\n    let toColorType = getColorType(to);\n    invariant(!!fromColorType, notAnimatable(from));\n    invariant(!!toColorType, notAnimatable(to));\n    let fromColor = fromColorType.parse(from);\n    let toColor = toColorType.parse(to);\n    if (fromColorType === hsla) {\n        fromColor = hslaToRgba(fromColor);\n        fromColorType = rgba;\n    }\n    if (toColorType === hsla) {\n        toColor = hslaToRgba(toColor);\n        toColorType = rgba;\n    }\n    const blended = Object.assign({}, fromColor);\n    return (v) => {\n        for (const key in blended) {\n            if (key !== \"alpha\") {\n                blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,SAASC,IAAI,EAAEC,IAAI,EAAEC,GAAG,QAAQ,mBAAmB;AACnD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,IAAI,EAAEC,EAAE,EAAEC,CAAC,EAAK;EACpC,IAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI;EAC5B,IAAMI,MAAM,GAAGH,EAAE,GAAGA,EAAE;EACtB,OAAOI,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEL,CAAC,IAAIE,MAAM,GAAGD,QAAQ,CAAC,GAAGA,QAAQ,CAAC,CAAC;AACrE,CAAC;AACD,IAAMK,UAAU,GAAG,CAACZ,GAAG,EAAED,IAAI,EAAED,IAAI,CAAC;AACpC,IAAMe,YAAY,GAAG,SAAfA,YAAY,CAAIP,CAAC;EAAA,OAAKM,UAAU,CAACE,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,IAAI,CAACV,CAAC,CAAC;EAAA,EAAC;AAAA;AACnE,IAAMW,aAAa,GAAG,SAAhBA,aAAa,CAAIC,KAAK;EAAA,kBAASA,KAAK;AAAA,CAAsE;AAChH,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAIf,IAAI,EAAEC,EAAE,EAAK;EAC3B,IAAIe,aAAa,GAAGP,YAAY,CAACT,IAAI,CAAC;EACtC,IAAIiB,WAAW,GAAGR,YAAY,CAACR,EAAE,CAAC;EAClCJ,SAAS,CAAC,CAAC,CAACmB,aAAa,EAAEH,aAAa,CAACb,IAAI,CAAC,CAAC;EAC/CH,SAAS,CAAC,CAAC,CAACoB,WAAW,EAAEJ,aAAa,CAACZ,EAAE,CAAC,CAAC;EAC3C,IAAIiB,SAAS,GAAGF,aAAa,CAACG,KAAK,CAACnB,IAAI,CAAC;EACzC,IAAIoB,OAAO,GAAGH,WAAW,CAACE,KAAK,CAAClB,EAAE,CAAC;EACnC,IAAIe,aAAa,KAAKtB,IAAI,EAAE;IACxBwB,SAAS,GAAGpB,UAAU,CAACoB,SAAS,CAAC;IACjCF,aAAa,GAAGrB,IAAI;EACxB;EACA,IAAIsB,WAAW,KAAKvB,IAAI,EAAE;IACtB0B,OAAO,GAAGtB,UAAU,CAACsB,OAAO,CAAC;IAC7BH,WAAW,GAAGtB,IAAI;EACtB;EACA,IAAM0B,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEL,SAAS,CAAC;EAC5C,OAAO,UAAChB,CAAC,EAAK;IACV,KAAK,IAAMsB,GAAG,IAAIH,OAAO,EAAE;MACvB,IAAIG,GAAG,KAAK,OAAO,EAAE;QACjBH,OAAO,CAACG,GAAG,CAAC,GAAGzB,cAAc,CAACmB,SAAS,CAACM,GAAG,CAAC,EAAEJ,OAAO,CAACI,GAAG,CAAC,EAAEtB,CAAC,CAAC;MAClE;IACJ;IACAmB,OAAO,CAACI,KAAK,GAAGhC,GAAG,CAACyB,SAAS,CAACO,KAAK,EAAEL,OAAO,CAACK,KAAK,EAAEvB,CAAC,CAAC;IACtD,OAAOc,aAAa,CAACU,SAAS,CAACL,OAAO,CAAC;EAC3C,CAAC;AACL,CAAC;AAED,SAASN,QAAQ,EAAEhB,cAAc"},"metadata":{},"sourceType":"module"}