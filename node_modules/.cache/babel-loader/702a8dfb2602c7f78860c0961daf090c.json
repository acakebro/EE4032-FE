{"ast":null,"code":"import { linear } from './index.mjs';\nvar a = function a(a1, a2) {\n  return 1.0 - 3.0 * a2 + 3.0 * a1;\n};\nvar b = function b(a1, a2) {\n  return 3.0 * a2 - 6.0 * a1;\n};\nvar c = function c(a1) {\n  return 3.0 * a1;\n};\nvar calcBezier = function calcBezier(t, a1, a2) {\n  return ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n};\nvar getSlope = function getSlope(t, a1, a2) {\n  return 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\n};\nvar subdivisionPrecision = 0.0000001;\nvar subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX;\n  var currentT;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n  return currentT;\n}\nvar newtonIterations = 8;\nvar newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < newtonIterations; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n  if (mX1 === mY1 && mX2 === mY2) return linear;\n  var sampleValues = new Float32Array(kSplineTableSize);\n  for (var i = 0; i < kSplineTableSize; ++i) {\n    sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= newtonMinSlope) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function (t) {\n    return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n  };\n}\nexport { cubicBezier };","map":{"version":3,"names":["linear","a","a1","a2","b","c","calcBezier","t","getSlope","subdivisionPrecision","subdivisionMaxIterations","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonIterations","newtonMinSlope","newtonRaphsonIterate","aGuessT","currentSlope","kSplineTableSize","kSampleStepSize","cubicBezier","mY1","mY2","sampleValues","Float32Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/popmotion/dist/es/easing/cubic-bezier.mjs"],"sourcesContent":["import { linear } from './index.mjs';\n\nconst a = (a1, a2) => 1.0 - 3.0 * a2 + 3.0 * a1;\nconst b = (a1, a2) => 3.0 * a2 - 6.0 * a1;\nconst c = (a1) => 3.0 * a1;\nconst calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\nconst getSlope = (t, a1, a2) => 3.0 * a(a1, a2) * t * t + 2.0 * b(a1, a2) * t + c(a1);\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 10;\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = aA + (aB - aA) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - aX;\n        if (currentX > 0.0) {\n            aB = currentT;\n        }\n        else {\n            aA = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nconst newtonIterations = 8;\nconst newtonMinSlope = 0.001;\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n    for (let i = 0; i < newtonIterations; ++i) {\n        const currentSlope = getSlope(aGuessT, mX1, mX2);\n        if (currentSlope === 0.0) {\n            return aGuessT;\n        }\n        const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n        aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n}\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    if (mX1 === mY1 && mX2 === mY2)\n        return linear;\n    const sampleValues = new Float32Array(kSplineTableSize);\n    for (let i = 0; i < kSplineTableSize; ++i) {\n        sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n    function getTForX(aX) {\n        let intervalStart = 0.0;\n        let currentSample = 1;\n        const lastSample = kSplineTableSize - 1;\n        for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n            intervalStart += kSampleStepSize;\n        }\n        --currentSample;\n        const dist = (aX - sampleValues[currentSample]) /\n            (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n        const guessForT = intervalStart + dist * kSampleStepSize;\n        const initialSlope = getSlope(guessForT, mX1, mX2);\n        if (initialSlope >= newtonMinSlope) {\n            return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n        }\n        else if (initialSlope === 0.0) {\n            return guessForT;\n        }\n        else {\n            return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n        }\n    }\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}