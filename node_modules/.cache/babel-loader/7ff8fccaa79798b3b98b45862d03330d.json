{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler\n};\nmodule.exports = PooledClass;","map":{"version":3,"names":["_prodInvariant","require","invariant","oneArgumentPooler","copyFieldsFrom","Klass","instancePool","length","instance","pop","call","twoArgumentPooler","a1","a2","threeArgumentPooler","a3","fourArgumentPooler","a4","standardReleaser","process","env","NODE_ENV","destructor","poolSize","push","DEFAULT_POOL_SIZE","DEFAULT_POOLER","addPoolingTo","CopyConstructor","pooler","NewKlass","getPooled","release","PooledClass","module","exports"],"sources":["/Users/hamsterpapa/Documents/GitHub/EE4032-FE/node_modules/react-bouncing-text/node_modules/react/lib/PooledClass.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Static poolers. Several custom versions for each potential number of\n * arguments. A completely generic pooler is easy to implement, but would\n * require accessing the `arguments` object. In each of these, `this` refers to\n * the Class itself, not an instance. If any others are needed, simply add them\n * here, or in their own files.\n */\nvar oneArgumentPooler = function (copyFieldsFrom) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, copyFieldsFrom);\n    return instance;\n  } else {\n    return new Klass(copyFieldsFrom);\n  }\n};\n\nvar twoArgumentPooler = function (a1, a2) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2);\n    return instance;\n  } else {\n    return new Klass(a1, a2);\n  }\n};\n\nvar threeArgumentPooler = function (a1, a2, a3) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3);\n  }\n};\n\nvar fourArgumentPooler = function (a1, a2, a3, a4) {\n  var Klass = this;\n  if (Klass.instancePool.length) {\n    var instance = Klass.instancePool.pop();\n    Klass.call(instance, a1, a2, a3, a4);\n    return instance;\n  } else {\n    return new Klass(a1, a2, a3, a4);\n  }\n};\n\nvar standardReleaser = function (instance) {\n  var Klass = this;\n  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;\n  instance.destructor();\n  if (Klass.instancePool.length < Klass.poolSize) {\n    Klass.instancePool.push(instance);\n  }\n};\n\nvar DEFAULT_POOL_SIZE = 10;\nvar DEFAULT_POOLER = oneArgumentPooler;\n\n/**\n * Augments `CopyConstructor` to be a poolable class, augmenting only the class\n * itself (statically) not adding any prototypical fields. Any CopyConstructor\n * you give this may have a `poolSize` property, and will look for a\n * prototypical `destructor` on instances.\n *\n * @param {Function} CopyConstructor Constructor that can be used to reset.\n * @param {Function} pooler Customizable pooler.\n */\nvar addPoolingTo = function (CopyConstructor, pooler) {\n  // Casting as any so that flow ignores the actual implementation and trusts\n  // it to match the type we declared\n  var NewKlass = CopyConstructor;\n  NewKlass.instancePool = [];\n  NewKlass.getPooled = pooler || DEFAULT_POOLER;\n  if (!NewKlass.poolSize) {\n    NewKlass.poolSize = DEFAULT_POOL_SIZE;\n  }\n  NewKlass.release = standardReleaser;\n  return NewKlass;\n};\n\nvar PooledClass = {\n  addPoolingTo: addPoolingTo,\n  oneArgumentPooler: oneArgumentPooler,\n  twoArgumentPooler: twoArgumentPooler,\n  threeArgumentPooler: threeArgumentPooler,\n  fourArgumentPooler: fourArgumentPooler\n};\n\nmodule.exports = PooledClass;"],"mappings":"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"},"metadata":{},"sourceType":"script"}