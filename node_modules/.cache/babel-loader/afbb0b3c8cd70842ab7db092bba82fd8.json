{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexDataLength, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _curve = null;\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n  return _curve;\n}\nexport var SigningKey = /*#__PURE__*/function () {\n  function SigningKey(privateKey) {\n    _classCallCheck(this, SigningKey);\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    if (hexDataLength(this.privateKey) !== 32) {\n      logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n    }\n    var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n  _createClass(SigningKey, [{\n    key: \"_addPoint\",\n    value: function _addPoint(other) {\n      var p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n      var p1 = getCurve().keyFromPublic(arrayify(other));\n      return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n  }, {\n    key: \"signDigest\",\n    value: function signDigest(digest) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var digestBytes = arrayify(digest);\n      if (digestBytes.length !== 32) {\n        logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n      }\n      var signature = keyPair.sign(digestBytes, {\n        canonical: true\n      });\n      return splitSignature({\n        recoveryParam: signature.recoveryParam,\n        r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n        s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n      });\n    }\n  }, {\n    key: \"computeSharedSecret\",\n    value: function computeSharedSecret(otherKey) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n      return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n  }], [{\n    key: \"isSigningKey\",\n    value: function isSigningKey(value) {\n      return !!(value && value._isSigningKey);\n    }\n  }]);\n  return SigningKey;\n}();\nexport function recoverPublicKey(digest, signature) {\n  var sig = splitSignature(signature);\n  var rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  var bytes = arrayify(key);\n  if (bytes.length === 32) {\n    var signingKey = new SigningKey(bytes);\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAAC;AAAA;AAEb,SAASA,EAAE,QAAQ,YAAY;AAE/B,SAASC,QAAQ,EAAaC,aAAa,EAAEC,OAAO,EAAEC,UAAU,EAA4BC,cAAc,QAAQ,sBAAsB;AACxI,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,IAAIE,MAAM,GAAO,IAAI;AACrB,SAASC,QAAQ;EACb,IAAI,CAACD,MAAM,EAAE;IACTA,MAAM,GAAG,IAAIV,EAAE,CAAC,WAAW,CAAC;;EAEhC,OAAOU,MAAM;AACjB;AAEA,WAAaE,UAAU;EAYnB,oBAAYC,UAAqB;IAAA;IAC7BP,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,WAAW,CAAC;IAE1CA,cAAc,CAAC,IAAI,EAAE,YAAY,EAAEH,OAAO,CAACU,UAAU,CAAC,CAAC;IACvD,IAAIX,aAAa,CAAC,IAAI,CAACW,UAAU,CAAC,KAAK,EAAE,EAAE;MACvCJ,MAAM,CAACK,kBAAkB,CAAC,qBAAqB,EAAE,YAAY,EAAE,gBAAgB,CAAC;;IAGpF,IAAMC,OAAO,GAAGJ,QAAQ,EAAE,CAACK,cAAc,CAACf,QAAQ,CAAC,IAAI,CAACY,UAAU,CAAC,CAAC;IAEpEP,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,GAAGS,OAAO,CAACE,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACzEX,cAAc,CAAC,IAAI,EAAE,qBAAqB,EAAE,IAAI,GAAGS,OAAO,CAACE,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAElFX,cAAc,CAAC,IAAI,EAAE,eAAe,EAAE,IAAI,CAAC;EAC/C;EAAC;IAAA;IAAA,OAED,mBAAUY,KAAgB;MACtB,IAAMC,EAAE,GAAIR,QAAQ,EAAE,CAACS,aAAa,CAACnB,QAAQ,CAAC,IAAI,CAACoB,SAAS,CAAC,CAAC;MAC9D,IAAMC,EAAE,GAAIX,QAAQ,EAAE,CAACS,aAAa,CAACnB,QAAQ,CAACiB,KAAK,CAAC,CAAC;MACrD,OAAO,IAAI,GAAGC,EAAE,CAACI,GAAG,CAACC,GAAG,CAACF,EAAE,CAACC,GAAG,CAAC,CAACE,gBAAgB,CAAC,KAAK,CAAC;IAC5D;EAAC;IAAA;IAAA,OAED,oBAAWC,MAAiB;MACxB,IAAMX,OAAO,GAAGJ,QAAQ,EAAE,CAACK,cAAc,CAACf,QAAQ,CAAC,IAAI,CAACY,UAAU,CAAC,CAAC;MACpE,IAAMc,WAAW,GAAG1B,QAAQ,CAACyB,MAAM,CAAC;MACpC,IAAIC,WAAW,CAACC,MAAM,KAAK,EAAE,EAAE;QAC3BnB,MAAM,CAACK,kBAAkB,CAAC,mBAAmB,EAAE,QAAQ,EAAEY,MAAM,CAAC;;MAEpE,IAAMG,SAAS,GAAGd,OAAO,CAACe,IAAI,CAACH,WAAW,EAAE;QAAEI,SAAS,EAAE;MAAI,CAAE,CAAC;MAChE,OAAO1B,cAAc,CAAC;QAClB2B,aAAa,EAAEH,SAAS,CAACG,aAAa;QACtCC,CAAC,EAAE7B,UAAU,CAAC,IAAI,GAAGyB,SAAS,CAACI,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAClDC,CAAC,EAAE/B,UAAU,CAAC,IAAI,GAAGyB,SAAS,CAACM,CAAC,CAACD,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE;OACpD,CAAC;IACN;EAAC;IAAA;IAAA,OAED,6BAAoBE,QAAmB;MACnC,IAAMrB,OAAO,GAAGJ,QAAQ,EAAE,CAACK,cAAc,CAACf,QAAQ,CAAC,IAAI,CAACY,UAAU,CAAC,CAAC;MACpE,IAAMwB,YAAY,GAAG1B,QAAQ,EAAE,CAACS,aAAa,CAACnB,QAAQ,CAACqC,gBAAgB,CAACF,QAAQ,CAAC,CAAC,CAAC;MACnF,OAAOhC,UAAU,CAAC,IAAI,GAAGW,OAAO,CAACwB,MAAM,CAACF,YAAY,CAACpB,SAAS,EAAE,CAAC,CAACiB,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IACvF;EAAC;IAAA;IAAA,OAED,sBAAoBM,KAAU;MAC1B,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,aAAa,CAAC;IAC3C;EAAC;EAAA;AAAA;AAGL,OAAM,SAAUC,gBAAgB,CAAChB,MAAiB,EAAEG,SAAwB;EACxE,IAAMc,GAAG,GAAGtC,cAAc,CAACwB,SAAS,CAAC;EACrC,IAAMe,EAAE,GAAG;IAAEX,CAAC,EAAEhC,QAAQ,CAAC0C,GAAG,CAACV,CAAC,CAAC;IAAEE,CAAC,EAAElC,QAAQ,CAAC0C,GAAG,CAACR,CAAC;EAAC,CAAE;EACrD,OAAO,IAAI,GAAGxB,QAAQ,EAAE,CAACkC,aAAa,CAAC5C,QAAQ,CAACyB,MAAM,CAAC,EAAEkB,EAAE,EAAED,GAAG,CAACX,aAAa,CAAC,CAACc,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC;AACxG;AAEA,OAAM,SAAUR,gBAAgB,CAACS,GAAc,EAAEC,UAAoB;EACjE,IAAMC,KAAK,GAAGhD,QAAQ,CAAC8C,GAAG,CAAC;EAE3B,IAAIE,KAAK,CAACrB,MAAM,KAAK,EAAE,EAAE;IACrB,IAAMsB,UAAU,GAAG,IAAItC,UAAU,CAACqC,KAAK,CAAC;IACxC,IAAID,UAAU,EAAE;MACZ,OAAO,IAAI,GAAGrC,QAAQ,EAAE,CAACK,cAAc,CAACiC,KAAK,CAAC,CAAChC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;;IAEzE,OAAOiC,UAAU,CAAC7B,SAAS;GAE9B,MAAM,IAAI4B,KAAK,CAACrB,MAAM,KAAK,EAAE,EAAE;IAC5B,IAAIoB,UAAU,EAAE;MAAE,OAAO7C,OAAO,CAAC8C,KAAK,CAAC;;IACvC,OAAO,IAAI,GAAGtC,QAAQ,EAAE,CAACS,aAAa,CAAC6B,KAAK,CAAC,CAAChC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC;GAExE,MAAM,IAAIgC,KAAK,CAACrB,MAAM,KAAK,EAAE,EAAE;IAC5B,IAAI,CAACoB,UAAU,EAAE;MAAE,OAAO7C,OAAO,CAAC8C,KAAK,CAAC;;IACxC,OAAO,IAAI,GAAGtC,QAAQ,EAAE,CAACS,aAAa,CAAC6B,KAAK,CAAC,CAAChC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;;EAGxE,OAAOR,MAAM,CAACK,kBAAkB,CAAC,+BAA+B,EAAE,KAAK,EAAE,YAAY,CAAC;AAC1F","names":["EC","arrayify","hexDataLength","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","privateKey","throwArgumentError","keyPair","keyFromPrivate","getPublic","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","digest","digestBytes","length","signature","sign","canonical","recoveryParam","r","toString","s","otherKey","otherKeyPair","computePublicKey","derive","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","signingKey"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/signing-key/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nimport { EC } from \"./elliptic\";\n\nimport { arrayify, BytesLike, hexDataLength, hexlify, hexZeroPad, Signature, SignatureLike, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nlet _curve: EC = null\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\n\nexport class SigningKey {\n\n    readonly curve: string;\n\n    readonly privateKey: string;\n    readonly publicKey: string;\n    readonly compressedPublicKey: string;\n\n    //readonly address: string;\n\n    readonly _isSigningKey: boolean;\n\n    constructor(privateKey: BytesLike) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n\n    _addPoint(other: BytesLike): string {\n        const p0 =  getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 =  getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n\n    signDigest(digest: BytesLike): Signature {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        })\n    }\n\n    computeSharedSecret(otherKey: BytesLike): string {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n\n    static isSigningKey(value: any): value is SigningKey {\n        return !!(value && value._isSigningKey);\n    }\n}\n\nexport function recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\n\nexport function computePublicKey(key: BytesLike, compressed?: boolean): string {\n    const bytes = arrayify(key);\n\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n\n    } else if (bytes.length === 33) {\n        if (compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n\n    } else if (bytes.length === 65) {\n        if (!compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n\n"]},"metadata":{},"sourceType":"module"}