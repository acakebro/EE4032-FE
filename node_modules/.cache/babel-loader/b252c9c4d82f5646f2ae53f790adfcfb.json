{"ast":null,"code":"\"use strict\";\n\nimport _get from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nvar errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    var data = isHexString(value.data) ? value.data : null;\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data: data\n      };\n    }\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (var key in value) {\n      var result = spelunk(value[key], requireData);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n  return null;\n}\nfunction checkError(method, error, params) {\n  var transaction = params.transaction || params.signedTransaction;\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    var result = spelunk(error, true);\n    if (result) {\n      return result.data;\n    }\n    // Nothing descriptive..\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction: transaction,\n      error: error\n    });\n  }\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    var _result = spelunk(error.body, false);\n    if (_result == null) {\n      _result = spelunk(error, false);\n    }\n    // Found \"reverted\", this is a CALL_EXCEPTION\n    if (_result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: _result.message,\n        method: method,\n        transaction: transaction,\n        error: error\n      });\n    }\n  }\n  // @TODO: Should we spelunk for message too?\n  var message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"nonce too low\"\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  throw error;\n}\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    var error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nvar _constructorGuard = {};\nexport var JsonRpcSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(JsonRpcSigner, _Signer);\n  var _super = _createSuper(JsonRpcSigner);\n  function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n    var _this;\n    _classCallCheck(this, JsonRpcSigner);\n    _this = _super.call(this);\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider);\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", _this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", addressOrIndex);\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n    return _this;\n  }\n  _createClass(JsonRpcSigner, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"connect\"\n      });\n    }\n  }, {\n    key: \"connectUnchecked\",\n    value: function connectUnchecked() {\n      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      var _this2 = this;\n      if (this._address) {\n        return Promise.resolve(this._address);\n      }\n      return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n        if (accounts.length <= _this2._index) {\n          logger.throwError(\"unknown account #\" + _this2._index, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getAddress\"\n          });\n        }\n        return _this2.provider.formatter.address(accounts[_this2._index]);\n      });\n    }\n  }, {\n    key: \"sendUncheckedTransaction\",\n    value: function sendUncheckedTransaction(transaction) {\n      var _this3 = this;\n      transaction = shallowCopy(transaction);\n      var fromAddress = this.getAddress().then(function (address) {\n        if (address) {\n          address = address.toLowerCase();\n        }\n        return address;\n      });\n      // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n      // wishes to use this, it is easy to specify explicitly, otherwise\n      // we look it up for them.\n      if (transaction.gasLimit == null) {\n        var estimate = shallowCopy(transaction);\n        estimate.from = fromAddress;\n        transaction.gasLimit = this.provider.estimateGas(estimate);\n      }\n      if (transaction.to != null) {\n        transaction.to = Promise.resolve(transaction.to).then(function (to) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var address;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(to == null)) {\n                      _context.next = 2;\n                      break;\n                    }\n                    return _context.abrupt(\"return\", null);\n                  case 2:\n                    _context.next = 4;\n                    return this.provider.resolveName(to);\n                  case 4:\n                    address = _context.sent;\n                    if (address == null) {\n                      logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n                    return _context.abrupt(\"return\", address);\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n      return resolveProperties({\n        tx: resolveProperties(transaction),\n        sender: fromAddress\n      }).then(function (_ref) {\n        var tx = _ref.tx,\n          sender = _ref.sender;\n        if (tx.from != null) {\n          if (tx.from.toLowerCase() !== sender) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n        } else {\n          tx.from = sender;\n        }\n        var hexTx = _this3.provider.constructor.hexlifyTransaction(tx, {\n          from: true\n        });\n        return _this3.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n          return hash;\n        }, function (error) {\n          if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n            logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n              action: \"sendTransaction\",\n              transaction: tx\n            });\n          }\n          return checkError(\"sendTransaction\", error, hexTx);\n        });\n      });\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"signTransaction\"\n      });\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this4 = this;\n        var blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n              case 2:\n                blockNumber = _context3.sent;\n                _context3.next = 5;\n                return this.sendUncheckedTransaction(transaction);\n              case 5:\n                hash = _context3.sent;\n                _context3.prev = 6;\n                _context3.next = 9;\n                return poll(function () {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                    var tx;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.provider.getTransaction(hash);\n                          case 2:\n                            tx = _context2.sent;\n                            if (!(tx === null)) {\n                              _context2.next = 5;\n                              break;\n                            }\n                            return _context2.abrupt(\"return\", undefined);\n                          case 5:\n                            return _context2.abrupt(\"return\", this.provider._wrapTransaction(tx, hash, blockNumber));\n                          case 6:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, {\n                  oncePoll: this.provider\n                });\n              case 9:\n                return _context3.abrupt(\"return\", _context3.sent);\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                _context3.t0.transactionHash = hash;\n                throw _context3.t0;\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data, address;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context4.next = 3;\n                return this.getAddress();\n              case 3:\n                address = _context4.sent;\n                _context4.prev = 4;\n                _context4.next = 7;\n                return this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n              case 7:\n                return _context4.abrupt(\"return\", _context4.sent);\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n                if (typeof _context4.t0.message === \"string\" && _context4.t0.message.match(/user denied/i)) {\n                  logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                  });\n                }\n                throw _context4.t0;\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 10]]);\n      }));\n    }\n  }, {\n    key: \"_legacySignMessage\",\n    value: function _legacySignMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data, address;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context5.next = 3;\n                return this.getAddress();\n              case 3:\n                address = _context5.sent;\n                _context5.prev = 4;\n                _context5.next = 7;\n                return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n              case 7:\n                return _context5.abrupt(\"return\", _context5.sent);\n              case 10:\n                _context5.prev = 10;\n                _context5.t0 = _context5[\"catch\"](4);\n                if (typeof _context5.t0.message === \"string\" && _context5.t0.message.match(/user denied/i)) {\n                  logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                  });\n                }\n                throw _context5.t0;\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[4, 10]]);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this5 = this;\n        var populated, address;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  return _this5.provider.resolveName(name);\n                });\n              case 2:\n                populated = _context6.sent;\n                _context6.next = 5;\n                return this.getAddress();\n              case 5:\n                address = _context6.sent;\n                _context6.prev = 6;\n                _context6.next = 9;\n                return this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n              case 9:\n                return _context6.abrupt(\"return\", _context6.sent);\n              case 12:\n                _context6.prev = 12;\n                _context6.t0 = _context6[\"catch\"](6);\n                if (typeof _context6.t0.message === \"string\" && _context6.t0.message.match(/user denied/i)) {\n                  logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: {\n                      domain: populated.domain,\n                      types: types,\n                      value: populated.value\n                    }\n                  });\n                }\n                throw _context6.t0;\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[6, 12]]);\n      }));\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock(password) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var provider, address;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                provider = this.provider;\n                _context7.next = 3;\n                return this.getAddress();\n              case 3:\n                address = _context7.sent;\n                return _context7.abrupt(\"return\", provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n  return JsonRpcSigner;\n}(Signer);\nvar UncheckedJsonRpcSigner = /*#__PURE__*/function (_JsonRpcSigner) {\n  _inherits(UncheckedJsonRpcSigner, _JsonRpcSigner);\n  var _super2 = _createSuper(UncheckedJsonRpcSigner);\n  function UncheckedJsonRpcSigner() {\n    _classCallCheck(this, UncheckedJsonRpcSigner);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(UncheckedJsonRpcSigner, [{\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      var _this6 = this;\n      return this.sendUncheckedTransaction(transaction).then(function (hash) {\n        return {\n          hash: hash,\n          nonce: null,\n          gasLimit: null,\n          gasPrice: null,\n          data: null,\n          value: null,\n          chainId: null,\n          confirmations: 0,\n          from: null,\n          wait: function wait(confirmations) {\n            return _this6.provider.waitForTransaction(hash, confirmations);\n          }\n        };\n      });\n    }\n  }]);\n  return UncheckedJsonRpcSigner;\n}(JsonRpcSigner);\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport var JsonRpcProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(JsonRpcProvider, _BaseProvider);\n  var _super3 = _createSuper(JsonRpcProvider);\n  function JsonRpcProvider(url, network) {\n    var _this7;\n    _classCallCheck(this, JsonRpcProvider);\n    var networkOrReady = network;\n    // The network is unknown, query the JSON-RPC for it\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this7.detectNetwork().then(function (network) {\n            resolve(network);\n          }, function (error) {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n    _this7 = _super3.call(this, networkOrReady);\n    // Default URL\n    if (!url) {\n      url = getStatic(_this7.constructor, \"defaultUrl\")();\n    }\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze(shallowCopy(url)));\n    }\n    _this7._nextId = 42;\n    return _this7;\n  }\n  _createClass(JsonRpcProvider, [{\n    key: \"_cache\",\n    get: function get() {\n      if (this._eventLoopCache == null) {\n        this._eventLoopCache = {};\n      }\n      return this._eventLoopCache;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this8 = this;\n      if (!this._cache[\"detectNetwork\"]) {\n        this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n        // Clear this cache at the beginning of the next event loop\n        setTimeout(function () {\n          _this8._cache[\"detectNetwork\"] = null;\n        }, 0);\n      }\n      return this._cache[\"detectNetwork\"];\n    }\n  }, {\n    key: \"_uncachedDetectNetwork\",\n    value: function _uncachedDetectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var chainId, getNetwork;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return timer(0);\n              case 2:\n                chainId = null;\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this.send(\"eth_chainId\", []);\n              case 6:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](3);\n                _context8.prev = 11;\n                _context8.next = 14;\n                return this.send(\"net_version\", []);\n              case 14:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n              case 17:\n                _context8.prev = 17;\n                _context8.t1 = _context8[\"catch\"](11);\n              case 19:\n                if (!(chainId != null)) {\n                  _context8.next = 28;\n                  break;\n                }\n                getNetwork = getStatic(this.constructor, \"getNetwork\");\n                _context8.prev = 21;\n                return _context8.abrupt(\"return\", getNetwork(BigNumber.from(chainId).toNumber()));\n              case 25:\n                _context8.prev = 25;\n                _context8.t2 = _context8[\"catch\"](21);\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  chainId: chainId,\n                  event: \"invalidNetwork\",\n                  serverError: _context8.t2\n                }));\n              case 28:\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  event: \"noNetwork\"\n                }));\n              case 29:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 9], [11, 17], [21, 25]]);\n      }));\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(addressOrIndex) {\n      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n  }, {\n    key: \"getUncheckedSigner\",\n    value: function getUncheckedSigner(addressOrIndex) {\n      return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      var _this9 = this;\n      return this.send(\"eth_accounts\", []).then(function (accounts) {\n        return accounts.map(function (a) {\n          return _this9.formatter.address(a);\n        });\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this10 = this;\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: deepCopy(request),\n        provider: this\n      });\n      // We can expand this in the future to any call, but for now these\n      // are the biggest wins and do not require any serializing parameters.\n      var cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n      if (cache && this._cache[method]) {\n        return this._cache[method];\n      }\n      var result = fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          request: request,\n          response: result,\n          provider: _this10\n        });\n        return result;\n      }, function (error) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          error: error,\n          request: request,\n          provider: _this10\n        });\n        throw error;\n      });\n      // Cache the fetch, but clear it on the next event loop\n      if (cache) {\n        this._cache[method] = result;\n        setTimeout(function () {\n          _this10._cache[method] = null;\n        }, 0);\n      }\n      return result;\n    }\n  }, {\n    key: \"prepareRequest\",\n    value: function prepareRequest(method, params) {\n      switch (method) {\n        case \"getBlockNumber\":\n          return [\"eth_blockNumber\", []];\n        case \"getGasPrice\":\n          return [\"eth_gasPrice\", []];\n        case \"getBalance\":\n          return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n        case \"getTransactionCount\":\n          return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n        case \"getCode\":\n          return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n        case \"getStorageAt\":\n          return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n        case \"sendTransaction\":\n          return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n        case \"getBlock\":\n          if (params.blockTag) {\n            return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n          } else if (params.blockHash) {\n            return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n          }\n          return null;\n        case \"getTransaction\":\n          return [\"eth_getTransactionByHash\", [params.transactionHash]];\n        case \"getTransactionReceipt\":\n          return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n        case \"call\":\n          {\n            var hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n            return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n              from: true\n            }), params.blockTag]];\n          }\n        case \"estimateGas\":\n          {\n            var _hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n            return [\"eth_estimateGas\", [_hexlifyTransaction(params.transaction, {\n              from: true\n            })]];\n          }\n        case \"getLogs\":\n          if (params.filter && params.filter.address != null) {\n            params.filter.address = getLowerCase(params.filter.address);\n          }\n          return [\"eth_getLogs\", [params.filter]];\n        default:\n          break;\n      }\n      return null;\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var tx, feeData, args;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(method === \"call\" || method === \"estimateGas\")) {\n                  _context9.next = 8;\n                  break;\n                }\n                tx = params.transaction;\n                if (!(tx && tx.type != null && BigNumber.from(tx.type).isZero())) {\n                  _context9.next = 8;\n                  break;\n                }\n                if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {\n                  _context9.next = 8;\n                  break;\n                }\n                _context9.next = 6;\n                return this.getFeeData();\n              case 6:\n                feeData = _context9.sent;\n                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                  // Network doesn't know about EIP-1559 (and hence type)\n                  params = shallowCopy(params);\n                  params.transaction = shallowCopy(tx);\n                  delete params.transaction.type;\n                }\n              case 8:\n                args = this.prepareRequest(method, params);\n                if (args == null) {\n                  logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                  });\n                }\n                _context9.prev = 10;\n                _context9.next = 13;\n                return this.send(args[0], args[1]);\n              case 13:\n                return _context9.abrupt(\"return\", _context9.sent);\n              case 16:\n                _context9.prev = 16;\n                _context9.t0 = _context9[\"catch\"](10);\n                return _context9.abrupt(\"return\", checkError(method, _context9.t0, params));\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[10, 16]]);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      if (event.tag === \"pending\") {\n        this._startPending();\n      }\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_startEvent\", this).call(this, event);\n    }\n  }, {\n    key: \"_startPending\",\n    value: function _startPending() {\n      if (this._pendingFilter != null) {\n        return;\n      }\n      var self = this;\n      var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n      this._pendingFilter = pendingFilter;\n      pendingFilter.then(function (filterId) {\n        function poll() {\n          self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n            if (self._pendingFilter != pendingFilter) {\n              return null;\n            }\n            var seq = Promise.resolve();\n            hashes.forEach(function (hash) {\n              // @TODO: This should be garbage collected at some point... How? When?\n              self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n              seq = seq.then(function () {\n                return self.getTransaction(hash).then(function (tx) {\n                  self.emit(\"pending\", tx);\n                  return null;\n                });\n              });\n            });\n            return seq.then(function () {\n              return timer(1000);\n            });\n          }).then(function () {\n            if (self._pendingFilter != pendingFilter) {\n              self.send(\"eth_uninstallFilter\", [filterId]);\n              return;\n            }\n            setTimeout(function () {\n              poll();\n            }, 0);\n            return null;\n          }).catch(function (error) {});\n        }\n        poll();\n        return filterId;\n      }).catch(function (error) {});\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n        this._pendingFilter = null;\n      }\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_stopEvent\", this).call(this, event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"http:/\\/localhost:8545\";\n    }\n  }, {\n    key: \"hexlifyTransaction\",\n    value: function hexlifyTransaction(transaction, allowExtra) {\n      // Check only allowed properties are given\n      var allowed = shallowCopy(allowedTransactionKeys);\n      if (allowExtra) {\n        for (var key in allowExtra) {\n          if (allowExtra[key]) {\n            allowed[key] = true;\n          }\n        }\n      }\n      checkProperties(transaction, allowed);\n      var result = {};\n      // JSON-RPC now requires numeric values to be \"quantity\" values\n      [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n        var value = hexValue(BigNumber.from(transaction[key]));\n        if (key === \"gasLimit\") {\n          key = \"gas\";\n        }\n        result[key] = value;\n      });\n      [\"from\", \"to\", \"data\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n        result[key] = hexlify(transaction[key]);\n      });\n      if (transaction.accessList) {\n        result[\"accessList\"] = accessListify(transaction.accessList);\n      }\n      return result;\n    }\n  }]);\n  return JsonRpcProvider;\n}(BaseProvider);","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","requireData","message","match","data","key","result","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","operation","UncheckedJsonRpcSigner","_address","_index","send","then","accounts","length","fromAddress","getAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","constructor","hexlifyTransaction","hash","ACTION_REJECTED","action","_getInternalBlockNumber","pollingInterval","blockNumber","sendUncheckedTransaction","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","messageData","domain","types","resolveNames","name","populated","stringify","getPayload","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","connectUnchecked","map","a","request","id","jsonrpc","emit","cache","connection","response","blockTag","position","includeTransactions","blockHash","filter","isZero","getFeeData","feeData","args","prepareRequest","NOT_IMPLEMENTED","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","listenerCount","allowExtra","allowed"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}