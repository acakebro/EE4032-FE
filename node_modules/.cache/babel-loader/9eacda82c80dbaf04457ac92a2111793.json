{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\nvar MAX_CCIP_REDIRECTS = 10;\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n    this._lastBlockNumber = -2;\n    this._inflight = false;\n  }\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n        case \"filter\":\n          return this.filter;\n      }\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n  return Event;\n}();\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nvar matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nvar matchers = [new RegExp(\"^(https):/\\/(.*)$\", \"i\"), new RegExp(\"^(data):(.*)$\", \"i\"), matcherIpfs, new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\")];\nfunction _parseString(result, start) {\n  try {\n    return toUtf8String(_parseBytes(result, start));\n  } catch (error) {}\n  return null;\n}\nfunction _parseBytes(result, start) {\n  if (result === \"0x\") {\n    return null;\n  }\n  var offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n  var length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n  return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link) {\n  if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n    link = link.substring(12);\n  } else if (link.match(/^ipfs:\\/\\//i)) {\n    link = link.substring(7);\n  } else {\n    logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n  }\n  return \"https://gateway.ipfs.io/ipfs/\".concat(link);\n}\nfunction numPad(value) {\n  var result = arrayify(value);\n  if (result.length > 32) {\n    throw new Error(\"internal; should not happen\");\n  }\n  var padded = new Uint8Array(32);\n  padded.set(result, 32 - result.length);\n  return padded;\n}\nfunction bytesPad(value) {\n  if (value.length % 32 === 0) {\n    return value;\n  }\n  var result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n  result.set(value);\n  return result;\n}\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas) {\n  var result = [];\n  var byteCount = 0;\n  // Add place-holders for pointers as we add items\n  for (var i = 0; i < datas.length; i++) {\n    result.push(null);\n    byteCount += 32;\n  }\n  for (var _i = 0; _i < datas.length; _i++) {\n    var data = arrayify(datas[_i]);\n    // Update the bytes offset\n    result[_i] = numPad(byteCount);\n    // The length and padded value of data\n    result.push(numPad(data.length));\n    result.push(bytesPad(data));\n    byteCount += 32 + Math.ceil(data.length / 32) * 32;\n  }\n  return hexConcat(result);\n}\nexport var Resolver = /*#__PURE__*/function () {\n  // The resolvedAddress is only for creating a ReverseLookup resolver\n  function Resolver(provider, address, name, resolvedAddress) {\n    _classCallCheck(this, Resolver);\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n    defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n  }\n  _createClass(Resolver, [{\n    key: \"supportsWildcard\",\n    value: function supportsWildcard() {\n      var _this = this;\n      if (!this._supportsEip2544) {\n        // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n        this._supportsEip2544 = this.provider.call({\n          to: this.address,\n          data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n        }).then(function (result) {\n          return BigNumber.from(result).eq(1);\n        }).catch(function (error) {\n          if (error.code === Logger.errors.CALL_EXCEPTION) {\n            return false;\n          }\n          // Rethrow the error: link is down, etc. Let future attempts retry.\n          _this._supportsEip2544 = null;\n          throw error;\n        });\n      }\n      return this._supportsEip2544;\n    }\n  }, {\n    key: \"_fetch\",\n    value: function _fetch(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var tx, parseBytes, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // e.g. keccak256(\"addr(bytes32,uint256)\")\n                tx = {\n                  to: this.address,\n                  ccipReadEnabled: true,\n                  data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n                }; // Wildcard support; use EIP-2544 to resolve the request\n                parseBytes = false;\n                _context.next = 4;\n                return this.supportsWildcard();\n              case 4:\n                if (!_context.sent) {\n                  _context.next = 7;\n                  break;\n                }\n                parseBytes = true;\n                // selector(\"resolve(bytes,bytes)\")\n                tx.data = hexConcat([\"0x9061b923\", encodeBytes([dnsEncode(this.name), tx.data])]);\n              case 7:\n                _context.prev = 7;\n                _context.next = 10;\n                return this.provider.call(tx);\n              case 10:\n                result = _context.sent;\n                if (arrayify(result).length % 32 === 4) {\n                  logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx,\n                    data: result\n                  });\n                }\n                if (parseBytes) {\n                  result = _parseBytes(result, 0);\n                }\n                return _context.abrupt(\"return\", result);\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context[\"catch\"](7);\n                if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context.next = 20;\n                  break;\n                }\n                return _context.abrupt(\"return\", null);\n              case 20:\n                throw _context.t0;\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[7, 16]]);\n      }));\n    }\n  }, {\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._fetch(selector, parameters);\n              case 2:\n                result = _context2.sent;\n                if (!(result != null)) {\n                  _context2.next = 5;\n                  break;\n                }\n                return _context2.abrupt(\"return\", _parseBytes(result, 0));\n              case 5:\n                return _context2.abrupt(\"return\", null);\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n      var bytes = arrayify(hexBytes);\n      // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      }\n      // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      }\n      // Bech32\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1];\n        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n        var _version = bytes[0];\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (coinType == null) {\n                  coinType = 60;\n                }\n                // If Ethereum, use the standard `addr(bytes32)`\n                if (!(coinType === 60)) {\n                  _context3.next = 16;\n                  break;\n                }\n                _context3.prev = 2;\n                _context3.next = 5;\n                return this._fetch(\"0x3b3b57de\");\n              case 5:\n                result = _context3.sent;\n                if (!(result === \"0x\" || result === HashZero)) {\n                  _context3.next = 8;\n                  break;\n                }\n                return _context3.abrupt(\"return\", null);\n              case 8:\n                return _context3.abrupt(\"return\", this.provider.formatter.callAddress(result));\n              case 11:\n                _context3.prev = 11;\n                _context3.t0 = _context3[\"catch\"](2);\n                if (!(_context3.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                  _context3.next = 15;\n                  break;\n                }\n                return _context3.abrupt(\"return\", null);\n              case 15:\n                throw _context3.t0;\n              case 16:\n                _context3.next = 18;\n                return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n              case 18:\n                hexBytes = _context3.sent;\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context3.next = 21;\n                  break;\n                }\n                return _context3.abrupt(\"return\", null);\n              case 21:\n                // Compute the address\n                address = this._getAddress(coinType, hexBytes);\n                if (address == null) {\n                  logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress(\".concat(coinType, \")\"),\n                    coinType: coinType,\n                    data: hexBytes\n                  });\n                }\n                return _context3.abrupt(\"return\", address);\n              case 24:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[2, 11]]);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var linkage, avatar, i, match, scheme, selector, owner, comps, addr, tokenId, tokenOwner, balance, tx, metadataUrl, metadata, imageUrl, ipfs;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                linkage = [{\n                  type: \"name\",\n                  content: this.name\n                }];\n                _context4.prev = 1;\n                _context4.next = 4;\n                return this.getText(\"avatar\");\n              case 4:\n                avatar = _context4.sent;\n                if (!(avatar == null)) {\n                  _context4.next = 7;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 7:\n                i = 0;\n              case 8:\n                if (!(i < matchers.length)) {\n                  _context4.next = 91;\n                  break;\n                }\n                match = avatar.match(matchers[i]);\n                if (!(match == null)) {\n                  _context4.next = 12;\n                  break;\n                }\n                return _context4.abrupt(\"continue\", 88);\n              case 12:\n                scheme = match[1].toLowerCase();\n                _context4.t0 = scheme;\n                _context4.next = _context4.t0 === \"https\" ? 16 : _context4.t0 === \"data\" ? 18 : _context4.t0 === \"ipfs\" ? 20 : _context4.t0 === \"erc721\" ? 22 : _context4.t0 === \"erc1155\" ? 22 : 88;\n                break;\n              case 16:\n                linkage.push({\n                  type: \"url\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n              case 18:\n                linkage.push({\n                  type: \"data\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: avatar\n                });\n              case 20:\n                linkage.push({\n                  type: \"ipfs\",\n                  content: avatar\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: getIpfsLink(avatar)\n                });\n              case 22:\n                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                selector = scheme === \"erc721\" ? \"0xc87b56dd\" : \"0x0e89341c\";\n                linkage.push({\n                  type: scheme,\n                  content: avatar\n                });\n                // The owner of this name\n                _context4.t1 = this._resolvedAddress;\n                if (_context4.t1) {\n                  _context4.next = 29;\n                  break;\n                }\n                _context4.next = 28;\n                return this.getAddress();\n              case 28:\n                _context4.t1 = _context4.sent;\n              case 29:\n                owner = _context4.t1;\n                comps = (match[2] || \"\").split(\"/\");\n                if (!(comps.length !== 2)) {\n                  _context4.next = 33;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 33:\n                _context4.next = 35;\n                return this.provider.formatter.address(comps[0]);\n              case 35:\n                addr = _context4.sent;\n                tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token\n                if (!(scheme === \"erc721\")) {\n                  _context4.next = 48;\n                  break;\n                }\n                _context4.t2 = this.provider.formatter;\n                _context4.next = 41;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x6352211e\", tokenId])\n                });\n              case 41:\n                _context4.t3 = _context4.sent;\n                tokenOwner = _context4.t2.callAddress.call(_context4.t2, _context4.t3);\n                if (!(owner !== tokenOwner)) {\n                  _context4.next = 45;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 45:\n                linkage.push({\n                  type: \"owner\",\n                  content: tokenOwner\n                });\n                _context4.next = 57;\n                break;\n              case 48:\n                if (!(scheme === \"erc1155\")) {\n                  _context4.next = 57;\n                  break;\n                }\n                _context4.t4 = BigNumber;\n                _context4.next = 52;\n                return this.provider.call({\n                  to: addr,\n                  data: hexConcat([\"0x00fdd58e\", hexZeroPad(owner, 32), tokenId])\n                });\n              case 52:\n                _context4.t5 = _context4.sent;\n                balance = _context4.t4.from.call(_context4.t4, _context4.t5);\n                if (!balance.isZero()) {\n                  _context4.next = 56;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 56:\n                linkage.push({\n                  type: \"balance\",\n                  content: balance.toString()\n                });\n              case 57:\n                // Call the token contract for the metadata URL\n                tx = {\n                  to: this.provider.formatter.address(comps[0]),\n                  data: hexConcat([selector, tokenId])\n                };\n                _context4.t6 = _parseString;\n                _context4.next = 61;\n                return this.provider.call(tx);\n              case 61:\n                _context4.t7 = _context4.sent;\n                metadataUrl = (0, _context4.t6)(_context4.t7, 0);\n                if (!(metadataUrl == null)) {\n                  _context4.next = 65;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 65:\n                linkage.push({\n                  type: \"metadata-url-base\",\n                  content: metadataUrl\n                });\n                // ERC-1155 allows a generic {id} in the URL\n                if (scheme === \"erc1155\") {\n                  metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                  linkage.push({\n                    type: \"metadata-url-expanded\",\n                    content: metadataUrl\n                  });\n                }\n                // Transform IPFS metadata links\n                if (metadataUrl.match(/^ipfs:/i)) {\n                  metadataUrl = getIpfsLink(metadataUrl);\n                }\n                linkage.push({\n                  type: \"metadata-url\",\n                  content: metadataUrl\n                });\n                // Get the token metadata\n                _context4.next = 71;\n                return fetchJson(metadataUrl);\n              case 71:\n                metadata = _context4.sent;\n                if (metadata) {\n                  _context4.next = 74;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 74:\n                linkage.push({\n                  type: \"metadata\",\n                  content: JSON.stringify(metadata)\n                });\n                // Pull the image URL out\n                imageUrl = metadata.image;\n                if (!(typeof imageUrl !== \"string\")) {\n                  _context4.next = 78;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 78:\n                if (!imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                  _context4.next = 81;\n                  break;\n                }\n                _context4.next = 86;\n                break;\n              case 81:\n                // Transform IPFS link to gateway\n                ipfs = imageUrl.match(matcherIpfs);\n                if (!(ipfs == null)) {\n                  _context4.next = 84;\n                  break;\n                }\n                return _context4.abrupt(\"return\", null);\n              case 84:\n                linkage.push({\n                  type: \"url-ipfs\",\n                  content: imageUrl\n                });\n                imageUrl = getIpfsLink(imageUrl);\n              case 86:\n                linkage.push({\n                  type: \"url\",\n                  content: imageUrl\n                });\n                return _context4.abrupt(\"return\", {\n                  linkage: linkage,\n                  url: imageUrl\n                });\n              case 88:\n                i++;\n                _context4.next = 8;\n                break;\n              case 91:\n                _context4.next = 95;\n                break;\n              case 93:\n                _context4.prev = 93;\n                _context4.t8 = _context4[\"catch\"](1);\n              case 95:\n                return _context4.abrupt(\"return\", null);\n              case 96:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 93]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var hexBytes, ipfs, length, ipns, _length3, swarm, skynet, urlSafe, hash;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._fetchBytes(\"0xbc1c58d1\");\n              case 2:\n                hexBytes = _context5.sent;\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context5.next = 5;\n                  break;\n                }\n                return _context5.abrupt(\"return\", null);\n              case 5:\n                // IPFS (CID: 1, Type: DAG-PB)\n                ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n                if (!ipfs) {\n                  _context5.next = 10;\n                  break;\n                }\n                length = parseInt(ipfs[3], 16);\n                if (!(ipfs[4].length === length * 2)) {\n                  _context5.next = 10;\n                  break;\n                }\n                return _context5.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n              case 10:\n                // IPNS (CID: 1, Type: libp2p-key)\n                ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n                if (!ipns) {\n                  _context5.next = 15;\n                  break;\n                }\n                _length3 = parseInt(ipns[3], 16);\n                if (!(ipns[4].length === _length3 * 2)) {\n                  _context5.next = 15;\n                  break;\n                }\n                return _context5.abrupt(\"return\", \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]));\n              case 15:\n                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n                swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n                if (!swarm) {\n                  _context5.next = 19;\n                  break;\n                }\n                if (!(swarm[1].length === 32 * 2)) {\n                  _context5.next = 19;\n                  break;\n                }\n                return _context5.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n              case 19:\n                skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n                if (!skynet) {\n                  _context5.next = 25;\n                  break;\n                }\n                if (!(skynet[1].length === 34 * 2)) {\n                  _context5.next = 25;\n                  break;\n                }\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                urlSafe = {\n                  \"=\": \"\",\n                  \"+\": \"-\",\n                  \"/\": \"_\"\n                };\n                hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, function (a) {\n                  return urlSafe[a];\n                });\n                return _context5.abrupt(\"return\", \"sia:/\\/\" + hash);\n              case 25:\n                return _context5.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getContentHash()\",\n                  data: hexBytes\n                }));\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // The key encoded as parameter to fetchBytes\n                keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n                // offset 64, with the length at offset 64 and data starting at offset 96\n                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n                // Pad to word-size (32 bytes)\n                if (keyBytes.length % 32 !== 0) {\n                  keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n                }\n                _context6.next = 5;\n                return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n              case 5:\n                hexBytes = _context6.sent;\n                if (!(hexBytes == null || hexBytes === \"0x\")) {\n                  _context6.next = 8;\n                  break;\n                }\n                return _context6.abrupt(\"return\", null);\n              case 8:\n                return _context6.abrupt(\"return\", toUtf8String(hexBytes));\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n  var _super = _createSuper(BaseProvider);\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this2;\n    _classCallCheck(this, BaseProvider);\n    _this2 = _super.call(this);\n    // Events being listened to\n    _this2._events = [];\n    _this2._emitted = {\n      block: -2\n    };\n    _this2.disableCcipRead = false;\n    _this2.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(_assertThisInitialized(_this2), \"anyNetwork\", network === \"any\");\n    if (_this2.anyNetwork) {\n      network = _this2.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      _this2._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(function (error) {});\n      // Trigger initial network setting (async)\n      _this2._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this2), \"_network\", knownNetwork);\n        _this2.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    _this2._maxInternalBlockNumber = -1024;\n    _this2._lastBlockNumber = -2;\n    _this2._maxFilterBlockRange = 10;\n    _this2._pollingInterval = 4000;\n    _this2._fastQueryDate = 0;\n    return _this2;\n  }\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this._network == null)) {\n                  _context7.next = 17;\n                  break;\n                }\n                network = null;\n                if (!this._networkPromise) {\n                  _context7.next = 11;\n                  break;\n                }\n                _context7.prev = 3;\n                _context7.next = 6;\n                return this._networkPromise;\n              case 6:\n                network = _context7.sent;\n                _context7.next = 11;\n                break;\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](3);\n              case 11:\n                if (!(network == null)) {\n                  _context7.next = 15;\n                  break;\n                }\n                _context7.next = 14;\n                return this.detectNetwork();\n              case 14:\n                network = _context7.sent;\n              case 15:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    defineReadOnly(this, \"_network\", network);\n                  }\n                  this.emit(\"network\", network, null);\n                }\n              case 17:\n                return _context7.abrupt(\"return\", this._network);\n              case 18:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this3 = this;\n      return poll(function () {\n        return _this3._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n          throw error;\n        });\n      });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n  }, {\n    key: \"ccipReadFetch\",\n    value: function ccipReadFetch(tx, calldata, urls) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var sender, data, errorMessages, i, url, href, json, result, errorMessage;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(this.disableCcipRead || urls.length === 0)) {\n                  _context8.next = 2;\n                  break;\n                }\n                return _context8.abrupt(\"return\", null);\n              case 2:\n                sender = tx.to.toLowerCase();\n                data = calldata.toLowerCase();\n                errorMessages = [];\n                i = 0;\n              case 6:\n                if (!(i < urls.length)) {\n                  _context8.next = 22;\n                  break;\n                }\n                url = urls[i]; // URL expansion\n                href = url.replace(\"{sender}\", sender).replace(\"{data}\", data); // If no {data} is present, use POST; otherwise GET\n                json = url.indexOf(\"{data}\") >= 0 ? null : JSON.stringify({\n                  data: data,\n                  sender: sender\n                });\n                _context8.next = 12;\n                return fetchJson({\n                  url: href,\n                  errorPassThrough: true\n                }, json, function (value, response) {\n                  value.status = response.statusCode;\n                  return value;\n                });\n              case 12:\n                result = _context8.sent;\n                if (!result.data) {\n                  _context8.next = 15;\n                  break;\n                }\n                return _context8.abrupt(\"return\", result.data);\n              case 15:\n                errorMessage = result.message || \"unknown error\"; // 4xx indicates the result is not present; stop\n                if (!(result.status >= 400 && result.status < 500)) {\n                  _context8.next = 18;\n                  break;\n                }\n                return _context8.abrupt(\"return\", logger.throwError(\"response not found during CCIP fetch: \".concat(errorMessage), Logger.errors.SERVER_ERROR, {\n                  url: url,\n                  errorMessage: errorMessage\n                }));\n              case 18:\n                // 5xx indicates server issue; try the next url\n                errorMessages.push(errorMessage);\n              case 19:\n                i++;\n                _context8.next = 6;\n                break;\n              case 22:\n                return _context8.abrupt(\"return\", logger.throwError(\"error encountered during CCIP fetch: \".concat(errorMessages.map(function (m) {\n                  return JSON.stringify(m);\n                }).join(\", \")), Logger.errors.SERVER_ERROR, {\n                  urls: urls,\n                  errorMessages: errorMessages\n                }));\n              case 23:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value: function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this4 = this;\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this._ready();\n              case 2:\n                if (!(maxAge > 0)) {\n                  _context9.next = 20;\n                  break;\n                }\n              case 3:\n                if (!this._internalBlockNumber) {\n                  _context9.next = 20;\n                  break;\n                }\n                // ...\"remember\" which fetch we started with\n                internalBlockNumber = this._internalBlockNumber;\n                _context9.prev = 5;\n                _context9.next = 8;\n                return internalBlockNumber;\n              case 8:\n                result = _context9.sent;\n                if (!(getTime() - result.respTime <= maxAge)) {\n                  _context9.next = 11;\n                  break;\n                }\n                return _context9.abrupt(\"return\", result.blockNumber);\n              case 11:\n                return _context9.abrupt(\"break\", 20);\n              case 14:\n                _context9.prev = 14;\n                _context9.t0 = _context9[\"catch\"](5);\n                if (!(this._internalBlockNumber === internalBlockNumber)) {\n                  _context9.next = 18;\n                  break;\n                }\n                return _context9.abrupt(\"break\", 20);\n              case 18:\n                _context9.next = 3;\n                break;\n              case 20:\n                reqTime = getTime();\n                checkInternalBlockNumber = resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_ref) {\n                  var blockNumber = _ref.blockNumber,\n                    networkError = _ref.networkError;\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                      _this4._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                  }\n                  var respTime = getTime();\n                  blockNumber = BigNumber.from(blockNumber).toNumber();\n                  if (blockNumber < _this4._maxInternalBlockNumber) {\n                    blockNumber = _this4._maxInternalBlockNumber;\n                  }\n                  _this4._maxInternalBlockNumber = blockNumber;\n                  _this4._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber;\n                // Swallow unhandled exceptions; if needed they are handled else where\n                checkInternalBlockNumber.catch(function (error) {\n                  // Don't null the dead (rejected) fetch, if it has already been updated\n                  if (_this4._internalBlockNumber === checkInternalBlockNumber) {\n                    _this4._internalBlockNumber = null;\n                  }\n                });\n                _context9.next = 26;\n                return checkInternalBlockNumber;\n              case 26:\n                return _context9.abrupt(\"return\", _context9.sent.blockNumber);\n              case 27:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _this5 = this;\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n                runners = [];\n                blockNumber = null;\n                _context10.prev = 3;\n                _context10.next = 6;\n                return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n              case 6:\n                blockNumber = _context10.sent;\n                _context10.next = 13;\n                break;\n              case 9:\n                _context10.prev = 9;\n                _context10.t0 = _context10[\"catch\"](3);\n                this.emit(\"error\", _context10.t0);\n                return _context10.abrupt(\"return\");\n              case 13:\n                this._setFastBlockNumber(blockNumber);\n                // Emit a poll event after we have the latest (fast) block number\n                this.emit(\"poll\", pollId, blockNumber);\n                // If the block has not changed, meh.\n                if (!(blockNumber === this._lastBlockNumber)) {\n                  _context10.next = 18;\n                  break;\n                }\n                this.emit(\"didPoll\", pollId);\n                return _context10.abrupt(\"return\");\n              case 18:\n                // First polling cycle, trigger a \"block\" events\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                }\n                // The emitted block was updated, check for obsolete events\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    }\n                    // The block we were at when we emitted this event\n                    var eventBlockNumber = _this5._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this5._emitted[key];\n                    }\n                  });\n                }\n                // First polling cycle\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                }\n                // Find all transaction hashes we are waiting on\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash = event.hash;\n                        var runner = _this5.getTransactionReceipt(hash).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n                          _this5._emitted[\"t:\" + hash] = receipt.blockNumber;\n                          _this5.emit(hash, receipt);\n                          return null;\n                        }).catch(function (error) {\n                          _this5.emit(\"error\", error);\n                        });\n                        runners.push(runner);\n                        break;\n                      }\n                    case \"filter\":\n                      {\n                        // We only allow a single getLogs to be in-flight at a time\n                        if (!event._inflight) {\n                          event._inflight = true;\n                          // This is the first filter for this event, so we want to\n                          // restrict events to events that happened no earlier than now\n                          if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                          }\n                          // Filter from the last *known* event; due to load-balancing\n                          // and some nodes returning updated block numbers before\n                          // indexing events, a logs result with 0 entries cannot be\n                          // trusted and we must retry a range which includes it again\n                          var filter = event.filter;\n                          filter.fromBlock = event._lastBlockNumber + 1;\n                          filter.toBlock = blockNumber;\n                          // Prevent fitler ranges from growing too wild, since it is quite\n                          // likely there just haven't been any events to move the lastBlockNumber.\n                          var minFromBlock = filter.toBlock - _this5._maxFilterBlockRange;\n                          if (minFromBlock > filter.fromBlock) {\n                            filter.fromBlock = minFromBlock;\n                          }\n                          if (filter.fromBlock < 0) {\n                            filter.fromBlock = 0;\n                          }\n                          var _runner = _this5.getLogs(filter).then(function (logs) {\n                            // Allow the next getLogs\n                            event._inflight = false;\n                            if (logs.length === 0) {\n                              return;\n                            }\n                            logs.forEach(function (log) {\n                              // Only when we get an event for a given block number\n                              // can we trust the events are indexed\n                              if (log.blockNumber > event._lastBlockNumber) {\n                                event._lastBlockNumber = log.blockNumber;\n                              }\n                              // Make sure we stall requests to fetch blocks and txs\n                              _this5._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                              _this5._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                              _this5.emit(filter, log);\n                            });\n                          }).catch(function (error) {\n                            _this5.emit(\"error\", error);\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                          });\n                          runners.push(_runner);\n                        }\n                        break;\n                      }\n                  }\n                });\n                this._lastBlockNumber = blockNumber;\n                // Once all events for this loop have been processed, emit \"didPoll\"\n                Promise.all(runners).then(function () {\n                  _this5.emit(\"didPoll\", pollId);\n                }).catch(function (error) {\n                  _this5.emit(\"error\", error);\n                });\n                return _context10.abrupt(\"return\");\n              case 26:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[3, 9]]);\n      }));\n    }\n    // Deprecated; do not use this\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"provider.detectNetwork\"\n                }));\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._ready();\n              case 2:\n                network = _context12.sent;\n                _context12.next = 5;\n                return this.detectNetwork();\n              case 5:\n                currentNetwork = _context12.sent;\n                if (!(network.chainId !== currentNetwork.chainId)) {\n                  _context12.next = 23;\n                  break;\n                }\n                if (!this.anyNetwork) {\n                  _context12.next = 20;\n                  break;\n                }\n                this._network = currentNetwork;\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                _context12.next = 19;\n                return stall(0);\n              case 19:\n                return _context12.abrupt(\"return\", this._network);\n              case 20:\n                error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n              case 23:\n                return _context12.abrupt(\"return\", network);\n              case 24:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this6 = this;\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this6._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this7 = this;\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this.pollingInterval);\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this7.poll();\n            // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n            _this7._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this7._poller) {\n                _this7.poll();\n              }\n              // Clear out the bootstrap so we can do another\n              _this7._bootstrapPoll = null;\n            }, _this7.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this8 = this;\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n      this._pollingInterval = value;\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this8.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this9 = this;\n      var now = getTime();\n      // Stale block number, request a newer value\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this9._fastBlockNumber == null || blockNumber > _this9._fastBlockNumber) {\n            _this9._fastBlockNumber = blockNumber;\n          }\n          return _this9._fastBlockNumber;\n        });\n      }\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      }\n      // Update the time we updated the blocknumber\n      this._fastQueryDate = getTime();\n      // Newer block number, use  it\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                return _context13.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n              case 1:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var _this10 = this;\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getTransactionReceipt(transactionHash);\n              case 2:\n                receipt = _context16.sent;\n                if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                  _context16.next = 5;\n                  break;\n                }\n                return _context16.abrupt(\"return\", receipt);\n              case 5:\n                return _context16.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var cancelFuncs = [];\n                  var done = false;\n                  var alreadyDone = function alreadyDone() {\n                    if (done) {\n                      return true;\n                    }\n                    done = true;\n                    cancelFuncs.forEach(function (func) {\n                      func();\n                    });\n                    return false;\n                  };\n                  var minedHandler = function minedHandler(receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n                    if (alreadyDone()) {\n                      return;\n                    }\n                    resolve(receipt);\n                  };\n                  _this10.on(transactionHash, minedHandler);\n                  cancelFuncs.push(function () {\n                    _this10.removeListener(transactionHash, minedHandler);\n                  });\n                  if (replaceable) {\n                    var lastBlockNumber = replaceable.startBlock;\n                    var scannedBlock = null;\n                    var replaceHandler = function replaceHandler(blockNumber) {\n                      return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n                        var _this11 = this;\n                        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                          while (1) {\n                            switch (_context15.prev = _context15.next) {\n                              case 0:\n                                if (!done) {\n                                  _context15.next = 2;\n                                  break;\n                                }\n                                return _context15.abrupt(\"return\");\n                              case 2:\n                                _context15.next = 4;\n                                return stall(1000);\n                              case 4:\n                                this.getTransactionCount(replaceable.from).then(function (nonce) {\n                                  return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n                                    var mined, block, ti, tx, _receipt, reason;\n                                    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                                      while (1) {\n                                        switch (_context14.prev = _context14.next) {\n                                          case 0:\n                                            if (!done) {\n                                              _context14.next = 2;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 2:\n                                            if (!(nonce <= replaceable.nonce)) {\n                                              _context14.next = 6;\n                                              break;\n                                            }\n                                            lastBlockNumber = blockNumber;\n                                            _context14.next = 41;\n                                            break;\n                                          case 6:\n                                            _context14.next = 8;\n                                            return this.getTransaction(transactionHash);\n                                          case 8:\n                                            mined = _context14.sent;\n                                            if (!(mined && mined.blockNumber != null)) {\n                                              _context14.next = 11;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 11:\n                                            // First time scanning. We start a little earlier for some\n                                            // wiggle room here to handle the eventually consistent nature\n                                            // of blockchain (e.g. the getTransactionCount was for a\n                                            // different block)\n                                            if (scannedBlock == null) {\n                                              scannedBlock = lastBlockNumber - 3;\n                                              if (scannedBlock < replaceable.startBlock) {\n                                                scannedBlock = replaceable.startBlock;\n                                              }\n                                            }\n                                          case 12:\n                                            if (!(scannedBlock <= blockNumber)) {\n                                              _context14.next = 41;\n                                              break;\n                                            }\n                                            if (!done) {\n                                              _context14.next = 15;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 15:\n                                            _context14.next = 17;\n                                            return this.getBlockWithTransactions(scannedBlock);\n                                          case 17:\n                                            block = _context14.sent;\n                                            ti = 0;\n                                          case 19:\n                                            if (!(ti < block.transactions.length)) {\n                                              _context14.next = 38;\n                                              break;\n                                            }\n                                            tx = block.transactions[ti]; // Successfully mined!\n                                            if (!(tx.hash === transactionHash)) {\n                                              _context14.next = 23;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 23:\n                                            if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                              _context14.next = 35;\n                                              break;\n                                            }\n                                            if (!done) {\n                                              _context14.next = 26;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 26:\n                                            _context14.next = 28;\n                                            return this.waitForTransaction(tx.hash, confirmations);\n                                          case 28:\n                                            _receipt = _context14.sent;\n                                            if (!alreadyDone()) {\n                                              _context14.next = 31;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 31:\n                                            // The reason we were replaced\n                                            reason = \"replaced\";\n                                            if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                              reason = \"repriced\";\n                                            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                              reason = \"cancelled\";\n                                            }\n                                            // Explain why we were replaced\n                                            reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                              reason: reason,\n                                              replacement: this._wrapTransaction(tx),\n                                              hash: transactionHash,\n                                              receipt: _receipt\n                                            }));\n                                            return _context14.abrupt(\"return\");\n                                          case 35:\n                                            ti++;\n                                            _context14.next = 19;\n                                            break;\n                                          case 38:\n                                            scannedBlock++;\n                                            _context14.next = 12;\n                                            break;\n                                          case 41:\n                                            if (!done) {\n                                              _context14.next = 43;\n                                              break;\n                                            }\n                                            return _context14.abrupt(\"return\");\n                                          case 43:\n                                            this.once(\"block\", replaceHandler);\n                                          case 44:\n                                          case \"end\":\n                                            return _context14.stop();\n                                        }\n                                      }\n                                    }, _callee14, this);\n                                  }));\n                                }, function (error) {\n                                  if (done) {\n                                    return;\n                                  }\n                                  _this11.once(\"block\", replaceHandler);\n                                });\n                              case 5:\n                              case \"end\":\n                                return _context15.stop();\n                            }\n                          }\n                        }, _callee15, this);\n                      }));\n                    };\n                    if (done) {\n                      return;\n                    }\n                    _this10.once(\"block\", replaceHandler);\n                    cancelFuncs.push(function () {\n                      _this10.removeListener(\"block\", replaceHandler);\n                    });\n                  }\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    var timer = setTimeout(function () {\n                      if (alreadyDone()) {\n                        return;\n                      }\n                      reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n                    cancelFuncs.push(function () {\n                      clearTimeout(timer);\n                    });\n                  }\n                }));\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", this._getInternalBlockNumber(0));\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context18.next = 4;\n                return this.perform(\"getGasPrice\", {});\n              case 4:\n                result = _context18.sent;\n                _context18.prev = 5;\n                return _context18.abrupt(\"return\", BigNumber.from(result));\n              case 9:\n                _context18.prev = 9;\n                _context18.t0 = _context18[\"catch\"](5);\n                return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getGasPrice\",\n                  result: result,\n                  error: _context18.t0\n                }));\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context19.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n              case 4:\n                params = _context19.sent;\n                _context19.next = 7;\n                return this.perform(\"getBalance\", params);\n              case 7:\n                result = _context19.sent;\n                _context19.prev = 8;\n                return _context19.abrupt(\"return\", BigNumber.from(result));\n              case 12:\n                _context19.prev = 12;\n                _context19.t0 = _context19[\"catch\"](8);\n                return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getBalance\",\n                  params: params,\n                  result: result,\n                  error: _context19.t0\n                }));\n              case 15:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context20.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n              case 4:\n                params = _context20.sent;\n                _context20.next = 7;\n                return this.perform(\"getTransactionCount\", params);\n              case 7:\n                result = _context20.sent;\n                _context20.prev = 8;\n                return _context20.abrupt(\"return\", BigNumber.from(result).toNumber());\n              case 12:\n                _context20.prev = 12;\n                _context20.t0 = _context20[\"catch\"](8);\n                return _context20.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getTransactionCount\",\n                  params: params,\n                  result: result,\n                  error: _context20.t0\n                }));\n              case 15:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context21.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                });\n              case 4:\n                params = _context21.sent;\n                _context21.next = 7;\n                return this.perform(\"getCode\", params);\n              case 7:\n                result = _context21.sent;\n                _context21.prev = 8;\n                return _context21.abrupt(\"return\", hexlify(result));\n              case 12:\n                _context21.prev = 12;\n                _context21.t0 = _context21[\"catch\"](8);\n                return _context21.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getCode\",\n                  params: params,\n                  result: result,\n                  error: _context21.t0\n                }));\n              case 15:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context22.next = 4;\n                return resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return hexValue(p);\n                  })\n                });\n              case 4:\n                params = _context22.sent;\n                _context22.next = 7;\n                return this.perform(\"getStorageAt\", params);\n              case 7:\n                result = _context22.sent;\n                _context22.prev = 8;\n                return _context22.abrupt(\"return\", hexlify(result));\n              case 12:\n                _context22.prev = 12;\n                _context22.t0 = _context22[\"catch\"](8);\n                return _context22.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"getStorageAt\",\n                  params: params,\n                  result: result,\n                  error: _context22.t0\n                }));\n              case 15:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[8, 12]]);\n      }));\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this12 = this;\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n      var result = tx;\n      // Check the hash we expect is the same as the hash the server reported\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n            while (1) {\n              switch (_context23.prev = _context23.next) {\n                case 0:\n                  if (confirms == null) {\n                    confirms = 1;\n                  }\n                  if (timeout == null) {\n                    timeout = 0;\n                  }\n                  // Get the details to detect replacement\n                  replacement = undefined;\n                  if (confirms !== 0 && startBlock != null) {\n                    replacement = {\n                      data: tx.data,\n                      from: tx.from,\n                      nonce: tx.nonce,\n                      to: tx.to,\n                      value: tx.value,\n                      startBlock: startBlock\n                    };\n                  }\n                  _context23.next = 6;\n                  return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n                case 6:\n                  receipt = _context23.sent;\n                  if (!(receipt == null && confirms === 0)) {\n                    _context23.next = 9;\n                    break;\n                  }\n                  return _context23.abrupt(\"return\", null);\n                case 9:\n                  // No longer pending, allow the polling loop to garbage collect this\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n                  return _context23.abrupt(\"return\", receipt);\n                case 12:\n                case \"end\":\n                  return _context23.stop();\n              }\n            }\n          }, _callee23, this);\n        }));\n      };\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context24.next = 4;\n                return Promise.resolve(signedTransaction).then(function (t) {\n                  return hexlify(t);\n                });\n              case 4:\n                hexTx = _context24.sent;\n                tx = this.formatter.transaction(signedTransaction);\n                if (tx.confirmations == null) {\n                  tx.confirmations = 0;\n                }\n                _context24.next = 9;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              case 9:\n                blockNumber = _context24.sent;\n                _context24.prev = 10;\n                _context24.next = 13;\n                return this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                });\n              case 13:\n                hash = _context24.sent;\n                return _context24.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n              case 17:\n                _context24.prev = 17;\n                _context24.t0 = _context24[\"catch\"](10);\n                _context24.t0.transaction = tx;\n                _context24.t0.transactionHash = tx.hash;\n                throw _context24.t0;\n              case 22:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this, [[10, 17]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var _this13 = this;\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return transaction;\n              case 2:\n                values = _context25.sent;\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this13._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? BigNumber.from(v) : null;\n                  });\n                });\n                [\"type\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v != null ? v : null;\n                  });\n                });\n                if (values.accessList) {\n                  tx.accessList = this.formatter.accessList(values.accessList);\n                }\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? hexlify(v) : null;\n                  });\n                });\n                _context25.t0 = this.formatter;\n                _context25.next = 12;\n                return resolveProperties(tx);\n              case 12:\n                _context25.t1 = _context25.sent;\n                return _context25.abrupt(\"return\", _context25.t0.transactionRequest.call(_context25.t0, _context25.t1));\n              case 14:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var _this14 = this;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return filter;\n              case 2:\n                filter = _context26.sent;\n                result = {};\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n                  result[key] = _this14._getBlockTag(filter[key]);\n                });\n                _context26.t0 = this.formatter;\n                _context26.next = 10;\n                return resolveProperties(result);\n              case 10:\n                _context26.t1 = _context26.sent;\n                return _context26.abrupt(\"return\", _context26.t0.filter.call(_context26.t0, _context26.t1));\n              case 12:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_call\",\n    value: function _call(transaction, blockTag, attempt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var txSender, result, data, sender, urls, urlsOffset, urlsLength, urlsData, u, url, calldata, callbackSelector, extraData, ccipResult, tx;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                if (attempt >= MAX_CCIP_REDIRECTS) {\n                  logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                    redirects: attempt,\n                    transaction: transaction\n                  });\n                }\n                txSender = transaction.to;\n                _context27.next = 4;\n                return this.perform(\"call\", {\n                  transaction: transaction,\n                  blockTag: blockTag\n                });\n              case 4:\n                result = _context27.sent;\n                if (!(attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && hexDataLength(result) % 32 === 4)) {\n                  _context27.next = 31;\n                  break;\n                }\n                _context27.prev = 6;\n                data = hexDataSlice(result, 4); // Check the sender of the OffchainLookup matches the transaction\n                sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                  logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n                // Read the URLs from the response\n                urls = [];\n                urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (u = 0; u < urlsLength; u++) {\n                  url = _parseString(urlsData, u * 32);\n                  if (url == null) {\n                    logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                      name: \"OffchainLookup\",\n                      signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                      transaction: transaction,\n                      data: result\n                    });\n                  }\n                  urls.push(url);\n                }\n                // Get the CCIP calldata to forward\n                calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                  logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n                callbackSelector = hexDataSlice(data, 96, 100); // Get the extra data to send back to the contract as context\n                extraData = _parseBytes(data, 128);\n                _context27.next = 21;\n                return this.ccipReadFetch(transaction, calldata, urls);\n              case 21:\n                ccipResult = _context27.sent;\n                if (ccipResult == null) {\n                  logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                    name: \"OffchainLookup\",\n                    signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                    transaction: transaction,\n                    data: result\n                  });\n                }\n                tx = {\n                  to: txSender,\n                  data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])\n                };\n                return _context27.abrupt(\"return\", this._call(tx, blockTag, attempt + 1));\n              case 27:\n                _context27.prev = 27;\n                _context27.t0 = _context27[\"catch\"](6);\n                if (!(_context27.t0.code === Logger.errors.SERVER_ERROR)) {\n                  _context27.next = 31;\n                  break;\n                }\n                throw _context27.t0;\n              case 31:\n                _context27.prev = 31;\n                return _context27.abrupt(\"return\", hexlify(result));\n              case 35:\n                _context27.prev = 35;\n                _context27.t1 = _context27[\"catch\"](31);\n                return _context27.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"call\",\n                  params: {\n                    transaction: transaction,\n                    blockTag: blockTag\n                  },\n                  result: result,\n                  error: _context27.t1\n                }));\n              case 38:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this, [[6, 27], [31, 35]]);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var resolved;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context28.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag),\n                  ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n                });\n              case 4:\n                resolved = _context28.sent;\n                return _context28.abrupt(\"return\", this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1));\n              case 6:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context29.next = 4;\n                return resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                });\n              case 4:\n                params = _context29.sent;\n                _context29.next = 7;\n                return this.perform(\"estimateGas\", params);\n              case 7:\n                result = _context29.sent;\n                _context29.prev = 8;\n                return _context29.abrupt(\"return\", BigNumber.from(result));\n              case 12:\n                _context29.prev = 12;\n                _context29.t0 = _context29[\"catch\"](8);\n                return _context29.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                  method: \"estimateGas\",\n                  params: params,\n                  result: result,\n                  error: _context29.t0\n                }));\n              case 15:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return addressOrName;\n              case 2:\n                addressOrName = _context30.sent;\n                if (typeof addressOrName !== \"string\") {\n                  logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n                }\n                _context30.next = 6;\n                return this.resolveName(addressOrName);\n              case 6:\n                address = _context30.sent;\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                  });\n                }\n                return _context30.abrupt(\"return\", address);\n              case 9:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this15 = this;\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                _context32.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context32.next = 4;\n                return blockHashOrBlockTag;\n              case 4:\n                blockHashOrBlockTag = _context32.sent;\n                // If blockTag is a number (not \"latest\", etc), this is the block number\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n                if (!isHexString(blockHashOrBlockTag, 32)) {\n                  _context32.next = 11;\n                  break;\n                }\n                params.blockHash = blockHashOrBlockTag;\n                _context32.next = 21;\n                break;\n              case 11:\n                _context32.prev = 11;\n                _context32.next = 14;\n                return this._getBlockTag(blockHashOrBlockTag);\n              case 14:\n                params.blockTag = _context32.sent;\n                if (isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n                _context32.next = 21;\n                break;\n              case 18:\n                _context32.prev = 18;\n                _context32.t0 = _context32[\"catch\"](11);\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n              case 21:\n                return _context32.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                    var _this16 = this;\n                    var block, _blockNumber, i, tx, confirmations, blockWithTxs;\n                    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                      while (1) {\n                        switch (_context31.prev = _context31.next) {\n                          case 0:\n                            _context31.next = 2;\n                            return this.perform(\"getBlock\", params);\n                          case 2:\n                            block = _context31.sent;\n                            if (!(block == null)) {\n                              _context31.next = 11;\n                              break;\n                            }\n                            if (!(params.blockHash != null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n                            if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                              _context31.next = 7;\n                              break;\n                            }\n                            return _context31.abrupt(\"return\", null);\n                          case 7:\n                            if (!(params.blockTag != null)) {\n                              _context31.next = 10;\n                              break;\n                            }\n                            if (!(blockNumber > this._emitted.block)) {\n                              _context31.next = 10;\n                              break;\n                            }\n                            return _context31.abrupt(\"return\", null);\n                          case 10:\n                            return _context31.abrupt(\"return\", undefined);\n                          case 11:\n                            if (!includeTransactions) {\n                              _context31.next = 34;\n                              break;\n                            }\n                            _blockNumber = null;\n                            i = 0;\n                          case 14:\n                            if (!(i < block.transactions.length)) {\n                              _context31.next = 31;\n                              break;\n                            }\n                            tx = block.transactions[i];\n                            if (!(tx.blockNumber == null)) {\n                              _context31.next = 20;\n                              break;\n                            }\n                            tx.confirmations = 0;\n                            _context31.next = 28;\n                            break;\n                          case 20:\n                            if (!(tx.confirmations == null)) {\n                              _context31.next = 28;\n                              break;\n                            }\n                            if (!(_blockNumber == null)) {\n                              _context31.next = 25;\n                              break;\n                            }\n                            _context31.next = 24;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                          case 24:\n                            _blockNumber = _context31.sent;\n                          case 25:\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = _blockNumber - tx.blockNumber + 1;\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                          case 28:\n                            i++;\n                            _context31.next = 14;\n                            break;\n                          case 31:\n                            blockWithTxs = this.formatter.blockWithTransactions(block);\n                            blockWithTxs.transactions = blockWithTxs.transactions.map(function (tx) {\n                              return _this16._wrapTransaction(tx);\n                            });\n                            return _context31.abrupt(\"return\", blockWithTxs);\n                          case 34:\n                            return _context31.abrupt(\"return\", this.formatter.block(block));\n                          case 35:\n                          case \"end\":\n                            return _context31.stop();\n                        }\n                      }\n                    }, _callee31, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n              case 22:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this, [[11, 18]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _this17 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                _context34.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context34.next = 4;\n                return transactionHash;\n              case 4:\n                transactionHash = _context34.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context34.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this17, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n                    var result, tx, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                      while (1) {\n                        switch (_context33.prev = _context33.next) {\n                          case 0:\n                            _context33.next = 2;\n                            return this.perform(\"getTransaction\", params);\n                          case 2:\n                            result = _context33.sent;\n                            if (!(result == null)) {\n                              _context33.next = 7;\n                              break;\n                            }\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context33.next = 6;\n                              break;\n                            }\n                            return _context33.abrupt(\"return\", null);\n                          case 6:\n                            return _context33.abrupt(\"return\", undefined);\n                          case 7:\n                            tx = this.formatter.transactionResponse(result);\n                            if (!(tx.blockNumber == null)) {\n                              _context33.next = 12;\n                              break;\n                            }\n                            tx.confirmations = 0;\n                            _context33.next = 19;\n                            break;\n                          case 12:\n                            if (!(tx.confirmations == null)) {\n                              _context33.next = 19;\n                              break;\n                            }\n                            _context33.next = 15;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                          case 15:\n                            blockNumber = _context33.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - tx.blockNumber + 1;\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                          case 19:\n                            return _context33.abrupt(\"return\", this._wrapTransaction(tx));\n                          case 20:\n                          case \"end\":\n                            return _context33.stop();\n                        }\n                      }\n                    }, _callee33, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n              case 7:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _this18 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) {\n            switch (_context36.prev = _context36.next) {\n              case 0:\n                _context36.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context36.next = 4;\n                return transactionHash;\n              case 4:\n                transactionHash = _context36.sent;\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return _context36.abrupt(\"return\", poll(function () {\n                  return __awaiter(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n                    var result, receipt, blockNumber, confirmations;\n                    return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                      while (1) {\n                        switch (_context35.prev = _context35.next) {\n                          case 0:\n                            _context35.next = 2;\n                            return this.perform(\"getTransactionReceipt\", params);\n                          case 2:\n                            result = _context35.sent;\n                            if (!(result == null)) {\n                              _context35.next = 7;\n                              break;\n                            }\n                            if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                              _context35.next = 6;\n                              break;\n                            }\n                            return _context35.abrupt(\"return\", null);\n                          case 6:\n                            return _context35.abrupt(\"return\", undefined);\n                          case 7:\n                            if (!(result.blockHash == null)) {\n                              _context35.next = 9;\n                              break;\n                            }\n                            return _context35.abrupt(\"return\", undefined);\n                          case 9:\n                            receipt = this.formatter.receipt(result);\n                            if (!(receipt.blockNumber == null)) {\n                              _context35.next = 14;\n                              break;\n                            }\n                            receipt.confirmations = 0;\n                            _context35.next = 21;\n                            break;\n                          case 14:\n                            if (!(receipt.confirmations == null)) {\n                              _context35.next = 21;\n                              break;\n                            }\n                            _context35.next = 17;\n                            return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                          case 17:\n                            blockNumber = _context35.sent;\n                            // Add the confirmations using the fast block number (pessimistic)\n                            confirmations = blockNumber - receipt.blockNumber + 1;\n                            if (confirmations <= 0) {\n                              confirmations = 1;\n                            }\n                            receipt.confirmations = confirmations;\n                          case 21:\n                            return _context35.abrupt(\"return\", receipt);\n                          case 22:\n                          case \"end\":\n                            return _context35.stop();\n                        }\n                      }\n                    }, _callee35, this);\n                  }));\n                }, {\n                  oncePoll: this\n                }));\n              case 7:\n              case \"end\":\n                return _context36.stop();\n            }\n          }\n        }, _callee36, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) {\n            switch (_context37.prev = _context37.next) {\n              case 0:\n                _context37.next = 2;\n                return this.getNetwork();\n              case 2:\n                _context37.next = 4;\n                return resolveProperties({\n                  filter: this._getFilter(filter)\n                });\n              case 4:\n                params = _context37.sent;\n                _context37.next = 7;\n                return this.perform(\"getLogs\", params);\n              case 7:\n                logs = _context37.sent;\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return _context37.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n              case 10:\n              case \"end\":\n                return _context37.stop();\n            }\n          }\n        }, _callee37, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) {\n            switch (_context38.prev = _context38.next) {\n              case 0:\n                _context38.next = 2;\n                return this.getNetwork();\n              case 2:\n                return _context38.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n              case 3:\n              case \"end\":\n                return _context38.stop();\n            }\n          }\n        }, _callee38, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) {\n            switch (_context39.prev = _context39.next) {\n              case 0:\n                _context39.next = 2;\n                return blockTag;\n              case 2:\n                blockTag = _context39.sent;\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                  _context39.next = 11;\n                  break;\n                }\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                _context39.next = 7;\n                return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              case 7:\n                blockNumber = _context39.sent;\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n              case 11:\n                return _context39.abrupt(\"return\", this.formatter.blockTag(blockTag));\n              case 12:\n              case \"end\":\n                return _context39.stop();\n            }\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var currentName, addr, resolver;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) {\n            switch (_context40.prev = _context40.next) {\n              case 0:\n                currentName = name;\n              case 1:\n                if (!true) {\n                  _context40.next = 22;\n                  break;\n                }\n                if (!(currentName === \"\" || currentName === \".\")) {\n                  _context40.next = 4;\n                  break;\n                }\n                return _context40.abrupt(\"return\", null);\n              case 4:\n                if (!(name !== \"eth\" && currentName === \"eth\")) {\n                  _context40.next = 6;\n                  break;\n                }\n                return _context40.abrupt(\"return\", null);\n              case 6:\n                _context40.next = 8;\n                return this._getResolver(currentName, \"getResolver\");\n              case 8:\n                addr = _context40.sent;\n                if (!(addr != null)) {\n                  _context40.next = 19;\n                  break;\n                }\n                resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                _context40.t0 = currentName !== name;\n                if (!_context40.t0) {\n                  _context40.next = 16;\n                  break;\n                }\n                _context40.next = 15;\n                return resolver.supportsWildcard();\n              case 15:\n                _context40.t0 = !_context40.sent;\n              case 16:\n                if (!_context40.t0) {\n                  _context40.next = 18;\n                  break;\n                }\n                return _context40.abrupt(\"return\", null);\n              case 18:\n                return _context40.abrupt(\"return\", resolver);\n              case 19:\n                // Get the parent node\n                currentName = currentName.split(\".\").slice(1).join(\".\");\n                _context40.next = 1;\n                break;\n              case 22:\n              case \"end\":\n                return _context40.stop();\n            }\n          }\n        }, _callee40, this);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name, operation) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var network, addrData;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) {\n            switch (_context41.prev = _context41.next) {\n              case 0:\n                if (operation == null) {\n                  operation = \"ENS\";\n                }\n                _context41.next = 3;\n                return this.getNetwork();\n              case 3:\n                network = _context41.sent;\n                // No ENS...\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: operation,\n                    network: network.name\n                  });\n                }\n                _context41.prev = 5;\n                _context41.next = 8;\n                return this.call({\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + namehash(name).substring(2)\n                });\n              case 8:\n                addrData = _context41.sent;\n                return _context41.abrupt(\"return\", this.formatter.callAddress(addrData));\n              case 12:\n                _context41.prev = 12;\n                _context41.t0 = _context41[\"catch\"](5);\n              case 14:\n                return _context41.abrupt(\"return\", null);\n              case 15:\n              case \"end\":\n                return _context41.stop();\n            }\n          }\n        }, _callee41, this, [[5, 12]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) {\n            switch (_context42.prev = _context42.next) {\n              case 0:\n                _context42.next = 2;\n                return name;\n              case 2:\n                name = _context42.sent;\n                _context42.prev = 3;\n                return _context42.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n              case 7:\n                _context42.prev = 7;\n                _context42.t0 = _context42[\"catch\"](3);\n                if (!isHexString(name)) {\n                  _context42.next = 11;\n                  break;\n                }\n                throw _context42.t0;\n              case 11:\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                }\n                // Get the addr from the resolver\n                _context42.next = 14;\n                return this.getResolver(name);\n              case 14:\n                resolver = _context42.sent;\n                if (resolver) {\n                  _context42.next = 17;\n                  break;\n                }\n                return _context42.abrupt(\"return\", null);\n              case 17:\n                _context42.next = 19;\n                return resolver.getAddress();\n              case 19:\n                return _context42.abrupt(\"return\", _context42.sent);\n              case 20:\n              case \"end\":\n                return _context42.stop();\n            }\n          }\n        }, _callee42, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var node, resolverAddr, name, addr;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) {\n            switch (_context43.prev = _context43.next) {\n              case 0:\n                _context43.next = 2;\n                return address;\n              case 2:\n                address = _context43.sent;\n                address = this.formatter.address(address);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context43.next = 7;\n                return this._getResolver(node, \"lookupAddress\");\n              case 7:\n                resolverAddr = _context43.sent;\n                if (!(resolverAddr == null)) {\n                  _context43.next = 10;\n                  break;\n                }\n                return _context43.abrupt(\"return\", null);\n              case 10:\n                _context43.t0 = _parseString;\n                _context43.next = 13;\n                return this.call({\n                  to: resolverAddr,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n              case 13:\n                _context43.t1 = _context43.sent;\n                name = (0, _context43.t0)(_context43.t1, 0);\n                _context43.next = 17;\n                return this.resolveName(name);\n              case 17:\n                addr = _context43.sent;\n                if (!(addr != address)) {\n                  _context43.next = 20;\n                  break;\n                }\n                return _context43.abrupt(\"return\", null);\n              case 20:\n                return _context43.abrupt(\"return\", name);\n              case 21:\n              case \"end\":\n                return _context43.stop();\n            }\n          }\n        }, _callee43, this);\n      }));\n    }\n  }, {\n    key: \"getAvatar\",\n    value: function getAvatar(nameOrAddress) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var resolver, address, node, resolverAddress, _avatar, name, avatar;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) {\n            switch (_context44.prev = _context44.next) {\n              case 0:\n                resolver = null;\n                if (!isHexString(nameOrAddress)) {\n                  _context44.next = 40;\n                  break;\n                }\n                // Address; reverse lookup\n                address = this.formatter.address(nameOrAddress);\n                node = address.substring(2).toLowerCase() + \".addr.reverse\";\n                _context44.next = 6;\n                return this._getResolver(node, \"getAvatar\");\n              case 6:\n                resolverAddress = _context44.sent;\n                if (resolverAddress) {\n                  _context44.next = 9;\n                  break;\n                }\n                return _context44.abrupt(\"return\", null);\n              case 9:\n                // Try resolving the avatar against the addr.reverse resolver\n                resolver = new Resolver(this, resolverAddress, node);\n                _context44.prev = 10;\n                _context44.next = 13;\n                return resolver.getAvatar();\n              case 13:\n                _avatar = _context44.sent;\n                if (!_avatar) {\n                  _context44.next = 16;\n                  break;\n                }\n                return _context44.abrupt(\"return\", _avatar.url);\n              case 16:\n                _context44.next = 22;\n                break;\n              case 18:\n                _context44.prev = 18;\n                _context44.t0 = _context44[\"catch\"](10);\n                if (!(_context44.t0.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 22;\n                  break;\n                }\n                throw _context44.t0;\n              case 22:\n                _context44.prev = 22;\n                _context44.t1 = _parseString;\n                _context44.next = 26;\n                return this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + namehash(node).substring(2)\n                });\n              case 26:\n                _context44.t2 = _context44.sent;\n                name = (0, _context44.t1)(_context44.t2, 0);\n                _context44.next = 30;\n                return this.getResolver(name);\n              case 30:\n                resolver = _context44.sent;\n                _context44.next = 38;\n                break;\n              case 33:\n                _context44.prev = 33;\n                _context44.t3 = _context44[\"catch\"](22);\n                if (!(_context44.t3.code !== Logger.errors.CALL_EXCEPTION)) {\n                  _context44.next = 37;\n                  break;\n                }\n                throw _context44.t3;\n              case 37:\n                return _context44.abrupt(\"return\", null);\n              case 38:\n                _context44.next = 45;\n                break;\n              case 40:\n                _context44.next = 42;\n                return this.getResolver(nameOrAddress);\n              case 42:\n                resolver = _context44.sent;\n                if (resolver) {\n                  _context44.next = 45;\n                  break;\n                }\n                return _context44.abrupt(\"return\", null);\n              case 45:\n                _context44.next = 47;\n                return resolver.getAvatar();\n              case 47:\n                avatar = _context44.sent;\n                if (!(avatar == null)) {\n                  _context44.next = 50;\n                  break;\n                }\n                return _context44.abrupt(\"return\", null);\n              case 50:\n                return _context44.abrupt(\"return\", avatar.url);\n              case 51:\n              case \"end\":\n                return _context44.stop();\n            }\n          }\n        }, _callee44, this, [[10, 18], [22, 33]]);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this19 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        setTimeout(function () {\n          event.listener.apply(_this19, args);\n        }, 0);\n        result = true;\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this20 = this;\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n        if (found) {\n          return true;\n        }\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this20._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this21 = this;\n      var stopped = [];\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n          stopped.push(event);\n          return false;\n        });\n      }\n      stopped.forEach(function (event) {\n        _this21._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n      return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n  return BaseProvider;\n}(Provider);","map":{"version":3,"mappings":"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","names":["ForkEvent","Provider","encode","base64Encode","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","dnsEncode","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","fetchJson","poll","bech32","Logger","version","logger","Formatter","MAX_CCIP_REDIRECTS","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","_lastBlockNumber","_inflight","type","hash","filter","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","value","from","toHexString","base58Encode","matcherIpfs","RegExp","matchers","_parseString","result","start","_parseBytes","error","offset","toNumber","getIpfsLink","link","match","substring","numPad","padded","Uint8Array","set","bytesPad","Math","ceil","encodeBytes","datas","byteCount","i","push","Resolver","provider","name","resolvedAddress","formatter","_supportsEip2544","call","to","then","eq","catch","code","errors","CALL_EXCEPTION","selector","parameters","tx","ccipReadEnabled","parseBytes","supportsWildcard","throwError","transaction","_fetch","coinType","hexBytes","coinInfo","String","UNSUPPORTED_OPERATION","operation","bytes","parseInt","words","toWords","unshift","callAddress","_fetchBytes","_getAddress","linkage","content","getText","avatar","scheme","url","_resolvedAddress","getAddress","owner","addr","tokenId","tokenOwner","balance","isZero","toString","metadataUrl","replace","metadata","JSON","stringify","imageUrl","image","ipfs","ipns","swarm","skynet","urlSafe","a","key","keyBytes","defaultFormatter","nextPollId","BaseProvider","network","_events","_emitted","block","disableCcipRead","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","emit","_maxInternalBlockNumber","_maxFilterBlockRange","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","NETWORK_ERROR","event","undefined","calldata","urls","sender","errorMessages","href","json","errorPassThrough","response","status","statusCode","errorMessage","message","SERVER_ERROR","m","maxAge","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","receipt","fromBlock","toBlock","minFromBlock","getLogs","logs","log","blockHash","transactionHash","all","polling","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","confirmations","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","nonce","getTransaction","mined","getBlockWithTransactions","ti","transactions","waitForTransaction","reason","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","method","addressOrName","blockTag","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","v","accessList","transactionRequest","attempt","redirects","txSender","signature","urlsOffset","urlsLength","urlsData","u","callbackSelector","extraData","ccipReadFetch","ccipResult","_call","_getTransactionRequest","resolved","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","blockWithTransactions","oncePoll","_getBlock","transactionResponse","_getFilter","removed","arrayOf","filterLog","bind","currentName","_getResolver","resolver","ensAddress","addrData","getResolver","node","resolverAddr","nameOrAddress","resolverAddress","getAvatar","NOT_IMPLEMENTED","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { encode as base64Encode } from \"@ethersproject/base64\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { dnsEncode, namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\nconst MAX_CCIP_REDIRECTS = 10;\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    _lastBlockNumber: number\n    _inflight: boolean;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n\n        this._lastBlockNumber = -2;\n        this._inflight = false;\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matcherIpfs = new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\");\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    matcherIpfs,\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string, start: number): null | string {\n    try {\n        return toUtf8String(_parseBytes(result, start));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string, start: number): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n// Trim off the ipfs:// prefix and return the default gateway URL\nfunction getIpfsLink(link: string): string {\n    if (link.match(/^ipfs:\\/\\/ipfs\\//i)) {\n        link = link.substring(12);\n    } else if (link.match(/^ipfs:\\/\\//i)) {\n        link = link.substring(7);\n    } else {\n        logger.throwArgumentError(\"unsupported IPFS format\", \"link\", link);\n    }\n\n    return `https:/\\/gateway.ipfs.io/ipfs/${ link }`;\n}\n\nfunction numPad(value: number): Uint8Array {\n    const result = arrayify(value);\n    if (result.length > 32) { throw new Error(\"internal; should not happen\"); }\n\n    const padded = new Uint8Array(32);\n    padded.set(result, 32 - result.length);\n    return padded;\n}\n\nfunction bytesPad(value: Uint8Array): Uint8Array {\n    if ((value.length % 32) === 0) { return value; }\n\n    const result = new Uint8Array(Math.ceil(value.length / 32) * 32);\n    result.set(value);\n    return result;\n}\n\n// ABI Encodes a series of (bytes, bytes, ...)\nfunction encodeBytes(datas: Array<BytesLike>) {\n    const result: Array<Uint8Array> = [ ];\n\n    let byteCount = 0;\n\n    // Add place-holders for pointers as we add items\n    for (let i = 0; i < datas.length; i++) {\n        result.push(null);\n        byteCount += 32;\n    }\n\n    for (let i = 0; i < datas.length; i++) {\n        const data = arrayify(datas[i]);\n\n        // Update the bytes offset\n        result[i] = numPad(byteCount);\n\n        // The length and padded value of data\n        result.push(numPad(data.length));\n        result.push(bytesPad(data));\n        byteCount += 32 + Math.ceil(data.length / 32) * 32;\n    }\n\n    return hexConcat(result);\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // For EIP-2544 names, the ancestor that provided the resolver\n    _supportsEip2544: null | Promise<boolean>;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    supportsWildcard(): Promise<boolean> {\n        if (!this._supportsEip2544) {\n            // supportsInterface(bytes4 = selector(\"resolve(bytes,bytes)\"))\n            this._supportsEip2544 = this.provider.call({\n                to: this.address,\n                data: \"0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000\"\n            }).then((result) => {\n                return BigNumber.from(result).eq(1);\n            }).catch((error) => {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return false; }\n                // Rethrow the error: link is down, etc. Let future attempts retry.\n                this._supportsEip2544 = null;\n                throw error;\n            });\n        }\n\n        return this._supportsEip2544;\n    }\n\n    async _fetch(selector: string, parameters?: string): Promise<null | string> {\n\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            ccipReadEnabled: true,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        // Wildcard support; use EIP-2544 to resolve the request\n        let parseBytes = false;\n        if (await this.supportsWildcard()) {\n            parseBytes = true;\n\n            // selector(\"resolve(bytes,bytes)\")\n            tx.data = hexConcat([ \"0x9061b923\", encodeBytes([ dnsEncode(this.name), tx.data ]) ]);\n        }\n\n        try {\n            let result = await this.provider.call(tx);\n            if ((arrayify(result).length % 32) === 4) {\n                logger.throwError(\"resolver threw error\", Logger.errors.CALL_EXCEPTION, {\n                    transaction: tx, data: result\n                });\n            }\n            if (parseBytes) { result = _parseBytes(result, 0); }\n            return result;\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        const result = await this._fetch(selector, parameters);\n        if (result != null) { return _parseBytes(result, 0); }\n        return null;\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const result = await this._fetch(\"0x3b3b57de\");\n\n                // No address\n                if (result === \"0x\" || result === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(result);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ { type: \"name\", content: this.name } ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n                if (match == null) { continue; }\n\n                const scheme = match[1].toLowerCase();\n\n                switch (scheme) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: getIpfsLink(avatar) };\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (scheme === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: scheme, content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (scheme === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (scheme === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n\n                        let metadataUrl = _parseString(await this.provider.call(tx), 0);\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url-base\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (scheme === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                            linkage.push({ type: \"metadata-url-expanded\", content: metadataUrl });\n                        }\n\n                        // Transform IPFS metadata links\n                        if (metadataUrl.match(/^ipfs:/i)) {\n                            metadataUrl = getIpfsLink(metadataUrl);\n                        }\n\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n                        if (!metadata) { return null; }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n\n                        // Pull the image URL out\n                        let imageUrl = metadata.image;\n                        if (typeof(imageUrl) !== \"string\") { return null; }\n\n                        if (imageUrl.match(/^(https:\\/\\/|data:)/i)) {\n                            // Allow\n                        } else {\n                            // Transform IPFS link to gateway\n                            const ipfs = imageUrl.match(matcherIpfs);\n                            if (ipfs == null) { return null; }\n\n                            linkage.push({ type: \"url-ipfs\", content: imageUrl });\n                            imageUrl = getIpfsLink(imageUrl);\n                        }\n\n                        linkage.push({ type: \"url\", content: imageUrl });\n\n                        return { linkage, url: imageUrl };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // IPNS (CID: 1, Type: libp2p-key)\n        const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipns) {\n            const length = parseInt(ipns[3], 16);\n            if (ipns[4].length === length * 2) {\n                return \"ipns:/\\/\" + Base58.encode(\"0x\" + ipns[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);\n        if (skynet) {\n            if (skynet[1].length === (34 * 2)) {\n                // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5\n                const urlSafe: Record<string, string> = { \"=\": \"\", \"+\": \"-\", \"/\": \"_\" };\n                const hash = base64Encode(\"0x\" + skynet[1]).replace(/[=+\\/]/g, (a) => (urlSafe[a]));\n                return \"sia:/\\/\" + hash;\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n    _maxFilterBlockRange: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n    disableCcipRead: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.disableCcipRead = false;\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n        this._maxFilterBlockRange = 10;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    async ccipReadFetch(tx: Transaction, calldata: string, urls: Array<string>): Promise<null | string> {\n        if (this.disableCcipRead || urls.length === 0) { return null; }\n\n        const sender = tx.to.toLowerCase();\n        const data = calldata.toLowerCase();\n\n        const errorMessages: Array<string> = [ ];\n\n        for (let i = 0; i < urls.length; i++) {\n            const url = urls[i];\n\n            // URL expansion\n            const href = url.replace(\"{sender}\", sender).replace(\"{data}\", data);\n\n            // If no {data} is present, use POST; otherwise GET\n            const json: string | null = (url.indexOf(\"{data}\") >= 0) ? null: JSON.stringify({ data, sender });\n\n            const result = await fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {\n                value.status = response.statusCode;\n                return value;\n            });\n\n            if (result.data) { return result.data; }\n\n            const errorMessage = (result.message || \"unknown error\");\n\n            // 4xx indicates the result is not present; stop\n            if (result.status >= 400 && result.status < 500) {\n                return logger.throwError(`response not found during CCIP fetch: ${ errorMessage }`, Logger.errors.SERVER_ERROR, { url, errorMessage });\n            }\n\n            // 5xx indicates server issue; try the next url\n            errorMessages.push(errorMessage);\n        }\n\n        return logger.throwError(`error encountered during CCIP fetch: ${ errorMessages.map((m) => JSON.stringify(m)).join(\", \") }`, Logger.errors.SERVER_ERROR, {\n            urls, errorMessages\n        });\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    // We only allow a single getLogs to be in-flight at a time\n                    if (!event._inflight) {\n                        event._inflight = true;\n\n                        // This is the first filter for this event, so we want to\n                        // restrict events to events that happened no earlier than now\n                        if (event._lastBlockNumber === -2) {\n                            event._lastBlockNumber = blockNumber - 1;\n                        }\n\n                        // Filter from the last *known* event; due to load-balancing\n                        // and some nodes returning updated block numbers before\n                        // indexing events, a logs result with 0 entries cannot be\n                        // trusted and we must retry a range which includes it again\n                        const filter = event.filter;\n                        filter.fromBlock = event._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n\n                        // Prevent fitler ranges from growing too wild, since it is quite\n                        // likely there just haven't been any events to move the lastBlockNumber.\n                        const minFromBlock = filter.toBlock - this._maxFilterBlockRange;\n                        if (minFromBlock > filter.fromBlock) { filter.fromBlock = minFromBlock; }\n\n                        if (filter.fromBlock < 0) { filter.fromBlock = 0; }\n\n                        const runner = this.getLogs(filter).then((logs) => {\n                            // Allow the next getLogs\n                            event._inflight = false;\n\n                            if (logs.length === 0) { return; }\n\n                            logs.forEach((log: Log) => {\n                                // Only when we get an event for a given block number\n                                // can we trust the events are indexed\n                                if (log.blockNumber > event._lastBlockNumber) {\n                                    event._lastBlockNumber = log.blockNumber;\n                                }\n\n                                // Make sure we stall requests to fetch blocks and txs\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                                this.emit(filter, log);\n                            });\n                        }).catch((error: Error) => {\n                            this.emit(\"error\", error);\n\n                            // Allow another getLogs (the range was not updated)\n                            event._inflight = false;\n                        });\n                        runners.push(runner);\n                    }\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async _call(transaction: TransactionRequest, blockTag: BlockTag, attempt: number): Promise<string> {\n        if (attempt >= MAX_CCIP_REDIRECTS) {\n            logger.throwError(\"CCIP read exceeded maximum redirections\", Logger.errors.SERVER_ERROR, {\n                redirects: attempt, transaction\n            });\n        }\n\n        const txSender = transaction.to;\n\n        const result = await this.perform(\"call\", { transaction, blockTag });\n\n        // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)\n        if (attempt >= 0 && blockTag === \"latest\" && txSender != null && result.substring(0, 10) === \"0x556f1830\" && (hexDataLength(result) % 32 === 4)) {\n            try {\n                const data = hexDataSlice(result, 4);\n\n                // Check the sender of the OffchainLookup matches the transaction\n                const sender = hexDataSlice(data, 0, 32);\n                if (!BigNumber.from(sender).eq(txSender)) {\n                    logger.throwError(\"CCIP Read sender did not match\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                // Read the URLs from the response\n                const urls: Array<string> = [];\n                const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();\n                const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();\n                const urlsData = hexDataSlice(data, urlsOffset + 32);\n                for (let u = 0; u < urlsLength; u++) {\n                    const url = _parseString(urlsData, u * 32);\n                    if (url == null) {\n                        logger.throwError(\"CCIP Read contained corrupt URL string\", Logger.errors.CALL_EXCEPTION, {\n                            name: \"OffchainLookup\",\n                            signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                            transaction, data: result\n                        });\n                    }\n                    urls.push(url);\n                }\n\n                // Get the CCIP calldata to forward\n                const calldata = _parseBytes(data, 64);\n\n                // Get the callbackSelector (bytes4)\n                if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {\n                    logger.throwError(\"CCIP Read callback selector included junk\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n                const callbackSelector = hexDataSlice(data, 96, 100);\n\n                // Get the extra data to send back to the contract as context\n                const extraData = _parseBytes(data, 128);\n\n                const ccipResult = await this.ccipReadFetch(<Transaction>transaction, calldata, urls);\n                if (ccipResult == null) {\n                    logger.throwError(\"CCIP Read disabled or provided no URLs\", Logger.errors.CALL_EXCEPTION, {\n                        name: \"OffchainLookup\",\n                        signature: \"OffchainLookup(address,string[],bytes,bytes4,bytes)\",\n                        transaction, data: result\n                    });\n                }\n\n                const tx = {\n                    to: txSender,\n                    data: hexConcat([ callbackSelector, encodeBytes([ ccipResult, extraData ]) ])\n                };\n\n                return this._call(tx, blockTag, attempt + 1);\n\n            } catch (error) {\n                if (error.code === Logger.errors.SERVER_ERROR) { throw error; }\n            }\n        }\n\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: { transaction, blockTag }, result, error\n            });\n        }\n\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const resolved = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag),\n            ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)\n        });\n        return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0: -1);\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        let currentName = name;\n        while (true) {\n            if (currentName === \"\" || currentName === \".\") { return null; }\n\n            // Optimization since the eth node cannot change and does\n            // not have a wildcard resolver\n            if (name !== \"eth\" && currentName === \"eth\") { return null; }\n\n            // Check the current node for a resolver\n            const addr = await this._getResolver(currentName, \"getResolver\");\n\n            // Found a resolver!\n            if (addr != null) {\n                const resolver = new Resolver(this, addr, name);\n\n                // Legacy resolver found, using EIP-2544 so it isn't safe to use\n                if (currentName !== name && !(await resolver.supportsWildcard())) { return null; }\n\n                return resolver;\n            }\n\n            // Get the parent node\n            currentName = currentName.split(\".\").slice(1).join(\".\");\n        }\n\n    }\n\n    async _getResolver(name: string, operation?: string): Promise<string> {\n        if (operation == null) { operation = \"ENS\"; }\n\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation, network: network.name }\n            );\n        }\n\n        try {\n            // keccak256(\"resolver(bytes32)\")\n            const addrData = await this.call({\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            });\n            return this.formatter.callAddress(addrData);\n        } catch (error) {\n            // ENS registry cannot throw errors on resolver(bytes32)\n        }\n\n        return null;\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resolver\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddr = await this._getResolver(node, \"lookupAddress\");\n        if (resolverAddr == null) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        const name = _parseString(await this.call({\n            to: resolverAddr,\n            data: (\"0x691f3431\" + namehash(node).substring(2))\n        }), 0);\n\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const node = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(node, \"getAvatar\");\n            if (!resolverAddress) { return null; }\n\n            // Try resolving the avatar against the addr.reverse resolver\n            resolver = new Resolver(this, resolverAddress, node);\n            try {\n                const avatar = await resolver.getAvatar();\n                if (avatar) { return avatar.url; }\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n            }\n\n            // Try getting the name and performing forward lookup; allowing wildcards\n            try {\n                // keccak(\"name(bytes32)\")\n                const name = _parseString(await this.call({\n                    to: resolverAddress,\n                    data: (\"0x691f3431\" + namehash(node).substring(2))\n                }), 0);\n                resolver = await this.getResolver(name);\n            } catch (error) {\n                if (error.code !== Logger.errors.CALL_EXCEPTION) { throw error; }\n                return null;\n            }\n\n        } else {\n            // ENS name; forward lookup with wildcard\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}