{"ast":null,"code":"import _objectWithoutProperties from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"attrX\", \"attrY\", \"originX\", \"originY\", \"pathLength\", \"pathSpacing\", \"pathOffset\"];\nimport { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, _ref, options, transformTemplate) {\n  var attrX = _ref.attrX,\n    attrY = _ref.attrY,\n    originX = _ref.originX,\n    originY = _ref.originY,\n    pathLength = _ref.pathLength,\n    _ref$pathSpacing = _ref.pathSpacing,\n    pathSpacing = _ref$pathSpacing === void 0 ? 1 : _ref$pathSpacing,\n    _ref$pathOffset = _ref.pathOffset,\n    pathOffset = _ref$pathOffset === void 0 ? 0 : _ref$pathOffset,\n    latest = _objectWithoutProperties(_ref, _excluded);\n  buildHTMLStyles(state, latest, options, transformTemplate);\n  state.attrs = state.style;\n  state.style = {};\n  var attrs = state.attrs,\n    style = state.style,\n    dimensions = state.dimensions;\n  /**\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n   * and copy it into style.\n   */\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  }\n  // Parse transformOrigin\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  }\n  // Treat x/y not as shortcuts but as actual attributes\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY;\n  // Build SVG path if one has been defined\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\nexport { buildSVGAttrs };","map":{"version":3,"names":["buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","options","transformTemplate","attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset","latest","attrs","style","dimensions","transform","undefined","transformOrigin","x","y"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,mCAAmC;AACnE,SAASC,sBAAsB,QAAQ,wBAAwB;AAC/D,SAASC,YAAY,QAAQ,YAAY;;AAEzC;AACA;AACA;AACA,SAASC,aAAa,CAACC,KAAK,QAEfC,OAAO,EAAEC,iBAAiB,EAAE;EAAA,IAFTC,KAAK,QAALA,KAAK;IAAEC,KAAK,QAALA,KAAK;IAAEC,OAAO,QAAPA,OAAO;IAAEC,OAAO,QAAPA,OAAO;IAAEC,UAAU,QAAVA,UAAU;IAAA,wBAAEC,WAAW;IAAXA,WAAW,iCAAG,CAAC;IAAA,uBAAEC,UAAU;IAAVA,UAAU,gCAAG,CAAC;IAExGC,MAAM;EACLd,eAAe,CAACI,KAAK,EAAEU,MAAM,EAAET,OAAO,EAAEC,iBAAiB,CAAC;EAC1DF,KAAK,CAACW,KAAK,GAAGX,KAAK,CAACY,KAAK;EACzBZ,KAAK,CAACY,KAAK,GAAG,CAAC,CAAC;EAChB,IAAQD,KAAK,GAAwBX,KAAK,CAAlCW,KAAK;IAAEC,KAAK,GAAiBZ,KAAK,CAA3BY,KAAK;IAAEC,UAAU,GAAKb,KAAK,CAApBa,UAAU;EAChC;AACJ;AACA;AACA;EACI,IAAIF,KAAK,CAACG,SAAS,EAAE;IACjB,IAAID,UAAU,EACVD,KAAK,CAACE,SAAS,GAAGH,KAAK,CAACG,SAAS;IACrC,OAAOH,KAAK,CAACG,SAAS;EAC1B;EACA;EACA,IAAID,UAAU,KACTR,OAAO,KAAKU,SAAS,IAAIT,OAAO,KAAKS,SAAS,IAAIH,KAAK,CAACE,SAAS,CAAC,EAAE;IACrEF,KAAK,CAACI,eAAe,GAAGnB,sBAAsB,CAACgB,UAAU,EAAER,OAAO,KAAKU,SAAS,GAAGV,OAAO,GAAG,GAAG,EAAEC,OAAO,KAAKS,SAAS,GAAGT,OAAO,GAAG,GAAG,CAAC;EAC5I;EACA;EACA,IAAIH,KAAK,KAAKY,SAAS,EACnBJ,KAAK,CAACM,CAAC,GAAGd,KAAK;EACnB,IAAIC,KAAK,KAAKW,SAAS,EACnBJ,KAAK,CAACO,CAAC,GAAGd,KAAK;EACnB;EACA,IAAIG,UAAU,KAAKQ,SAAS,EAAE;IAC1BjB,YAAY,CAACa,KAAK,EAAEJ,UAAU,EAAEC,WAAW,EAAEC,UAAU,EAAE,KAAK,CAAC;EACnE;AACJ;AAEA,SAASV,aAAa"},"metadata":{},"sourceType":"module"}