{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\nvar spring = function spring() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$stiffness = _ref.stiffness,\n    stiffness = _ref$stiffness === void 0 ? defaults.stiffness : _ref$stiffness,\n    _ref$damping = _ref.damping,\n    damping = _ref$damping === void 0 ? defaults.damping : _ref$damping,\n    _ref$mass = _ref.mass,\n    mass = _ref$mass === void 0 ? defaults.mass : _ref$mass,\n    _ref$from = _ref.from,\n    from = _ref$from === void 0 ? 0 : _ref$from,\n    _ref$to = _ref.to,\n    to = _ref$to === void 0 ? 1 : _ref$to,\n    _ref$velocity = _ref.velocity,\n    velocity = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n    _ref$restSpeed = _ref.restSpeed,\n    restSpeed = _ref$restSpeed === void 0 ? 2 : _ref$restSpeed,\n    _ref$restDistance = _ref.restDistance,\n    restDistance = _ref$restDistance === void 0 ? 0.5 : _ref$restDistance;\n  velocity = velocity ? time.s(velocity) : 0.0;\n  var state = {\n    done: false,\n    hasReachedTarget: false,\n    current: from,\n    target: to\n  };\n  var initialDelta = to - from;\n  var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n  var dampingRatio = calcDampingRatio(stiffness, damping, mass);\n  var resolveSpring;\n  if (dampingRatio < 1) {\n    var angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n    // Underdamped spring (bouncy)\n    resolveSpring = function resolveSpring(t) {\n      return to - Math.exp(-dampingRatio * undampedAngularFreq * t) * ((-velocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n    };\n  } else {\n    // Critically damped spring\n    resolveSpring = function resolveSpring(t) {\n      return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t);\n    };\n  }\n  return function (t) {\n    state.current = resolveSpring(t);\n    var currentVelocity = t === 0 ? velocity : calcGeneratorVelocity(resolveSpring, t, state.current);\n    var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n    var isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n    state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n    state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n    return state;\n  };\n};\nexport { spring };","map":{"version":3,"names":["time","defaults","calcDampingRatio","hasReachedTarget","calcGeneratorVelocity","spring","stiffness","damping","mass","from","to","velocity","restSpeed","restDistance","s","state","done","current","target","initialDelta","undampedAngularFreq","Math","sqrt","dampingRatio","resolveSpring","angularFreq","t","exp","sin","cos","currentVelocity","isBelowVelocityThreshold","abs","isBelowDisplacementThreshold"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@motionone/generators/dist/spring/index.es.js"],"sourcesContent":["import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = ({ stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass, from = 0, to = 1, velocity = 0.0, restSpeed = 2, restDistance = 0.5, } = {}) => {\n    velocity = velocity ? time.s(velocity) : 0.0;\n    const state = {\n        done: false,\n        hasReachedTarget: false,\n        current: from,\n        target: to,\n    };\n    const initialDelta = to - from;\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n        // Underdamped spring (bouncy)\n        resolveSpring = (t) => to -\n            Math.exp(-dampingRatio * undampedAngularFreq * t) *\n                (((-velocity + dampingRatio * undampedAngularFreq * initialDelta) /\n                    angularFreq) *\n                    Math.sin(angularFreq * t) +\n                    initialDelta * Math.cos(angularFreq * t));\n    }\n    else {\n        // Critically damped spring\n        resolveSpring = (t) => {\n            return (to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t));\n        };\n    }\n    return (t) => {\n        state.current = resolveSpring(t);\n        const currentVelocity = t === 0\n            ? velocity\n            : calcGeneratorVelocity(resolveSpring, t, state.current);\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n        state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n        return state;\n    };\n};\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}