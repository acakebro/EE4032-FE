{"ast":null,"code":"import _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nvar isFloat = function isFloat(value) {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nvar MotionValue = /*#__PURE__*/function () {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  function MotionValue(init) {\n    var _this = this;\n    _classCallCheck(this, MotionValue);\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"7.5.3\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n    this.lastUpdated = 0;\n    /**\n     * Functions to notify when the `MotionValue` updates.\n     *\n     * @internal\n     */\n    this.updateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the velocity updates.\n     *\n     * @internal\n     */\n    this.velocityUpdateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n     *\n     * @internal\n     */\n    this.renderSubscribers = new SubscriptionManager();\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n    this.canTrackVelocity = false;\n    this.updateAndNotify = function (v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v;\n      // Update timestamp\n      var _getFrameData = getFrameData(),\n        delta = _getFrameData.delta,\n        timestamp = _getFrameData.timestamp;\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      }\n      // Update update subscribers\n      if (_this.prev !== _this.current) {\n        _this.updateSubscribers.notify(_this.current);\n      }\n      // Update velocity subscribers\n      if (_this.velocityUpdateSubscribers.getSize()) {\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      }\n      // Update render subscribers\n      if (render) {\n        _this.renderSubscribers.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.scheduleVelocityCheck = function () {\n      return sync.postRender(_this.velocityCheck);\n    };\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n    this.velocityCheck = function (_ref) {\n      var timestamp = _ref.timestamp;\n      if (timestamp !== _this.lastUpdated) {\n        _this.prev = _this.current;\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      }\n    };\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.onChange(updateOpacity)\n   *     const unsubscribeY = y.onChange(updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @privateRemarks\n   *\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n   *\n   * ```jsx\n   * useOnChange(x, () => {})\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @public\n   */\n  _createClass(MotionValue, [{\n    key: \"onChange\",\n    value: function onChange(subscription) {\n      return this.updateSubscribers.add(subscription);\n    }\n  }, {\n    key: \"clearListeners\",\n    value: function clearListeners() {\n      this.updateSubscribers.clear();\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n  }, {\n    key: \"onRenderRequest\",\n    value: function onRenderRequest(subscription) {\n      // Render immediately\n      subscription(this.get());\n      return this.renderSubscribers.add(subscription);\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n  }, {\n    key: \"attach\",\n    value: function attach(passiveEffect) {\n      this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n  }, {\n    key: \"set\",\n    value: function set(v) {\n      var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!render || !this.passiveEffect) {\n        this.updateAndNotify(v, render);\n      } else {\n        this.passiveEffect(v, this.updateAndNotify);\n      }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this.current;\n    }\n    /**\n     * @public\n     */\n  }, {\n    key: \"getPrevious\",\n    value: function getPrevious() {\n      return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity() {\n      // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n      return this.canTrackVelocity ?\n      // These casts could be avoided if parseFloat would be typed better\n      velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n  }, {\n    key: \"start\",\n    value: function start(animation) {\n      var _this2 = this;\n      this.stop();\n      return new Promise(function (resolve) {\n        _this2.hasAnimated = true;\n        _this2.stopAnimation = animation(resolve);\n      }).then(function () {\n        return _this2.clearAnimation();\n      });\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.stopAnimation) this.stopAnimation();\n      this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n  }, {\n    key: \"isAnimating\",\n    value: function isAnimating() {\n      return !!this.stopAnimation;\n    }\n  }, {\n    key: \"clearAnimation\",\n    value: function clearAnimation() {\n      this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.updateSubscribers.clear();\n      this.renderSubscribers.clear();\n      this.stop();\n    }\n  }]);\n  return MotionValue;\n}();\nfunction motionValue(init) {\n  return new MotionValue(init);\n}\nexport { MotionValue, motionValue };","map":{"version":3,"names":["sync","getFrameData","velocityPerSecond","SubscriptionManager","isFloat","value","isNaN","parseFloat","MotionValue","init","version","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","subscription","add","clear","get","passiveEffect","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","motionValue"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"7.5.3\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */\n        this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */\n        this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */\n        this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = getFrameData();\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current) {\n                this.updateSubscribers.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.velocityUpdateSubscribers.getSize()) {\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                this.renderSubscribers.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */\n    onChange(subscription) {\n        return this.updateSubscribers.add(subscription);\n    }\n    clearListeners() {\n        this.updateSubscribers.clear();\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n    onRenderRequest(subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(animation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.stopAnimation = animation(resolve);\n        }).then(() => this.clearAnimation());\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.stopAnimation)\n            this.stopAnimation();\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.stopAnimation;\n    }\n    clearAnimation() {\n        this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    }\n}\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}