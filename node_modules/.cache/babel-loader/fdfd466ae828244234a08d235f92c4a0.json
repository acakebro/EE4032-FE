{"ast":null,"code":"import _slicedToArray from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js';\n\n// Create a linear easing point for every x second\nvar resolution = 0.015;\nvar generateLinearEasingPoints = function generateLinearEasingPoints(easing, duration) {\n  var points = \"\";\n  var numPoints = Math.round(duration / resolution);\n  for (var i = 0; i < numPoints; i++) {\n    points += easing(progress(0, numPoints - 1, i)) + \", \";\n  }\n  return points.substring(0, points.length - 2);\n};\nvar convertEasing = function convertEasing(easing, duration) {\n  if (isFunction(easing)) {\n    return supports.linearEasing() ? \"linear(\".concat(generateLinearEasingPoints(easing, duration), \")\") : defaults.easing;\n  } else {\n    return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n  }\n};\nvar cubicBezierAsString = function cubicBezierAsString(_ref) {\n  var _ref2 = _slicedToArray(_ref, 4),\n    a = _ref2[0],\n    b = _ref2[1],\n    c = _ref2[2],\n    d = _ref2[3];\n  return \"cubic-bezier(\".concat(a, \", \").concat(b, \", \").concat(c, \", \").concat(d, \")\");\n};\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };","map":{"version":3,"names":["isFunction","defaults","isCubicBezier","progress","supports","resolution","generateLinearEasingPoints","easing","duration","points","numPoints","Math","round","i","substring","length","convertEasing","linearEasing","cubicBezierAsString","a","b","c","d"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@motionone/dom/dist/animate/utils/easing.es.js"],"sourcesContent":["import { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js';\n\n// Create a linear easing point for every x second\nconst resolution = 0.015;\nconst generateLinearEasingPoints = (easing, duration) => {\n    let points = \"\";\n    const numPoints = Math.round(duration / resolution);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return points.substring(0, points.length - 2);\n};\nconst convertEasing = (easing, duration) => {\n    if (isFunction(easing)) {\n        return supports.linearEasing()\n            ? `linear(${generateLinearEasingPoints(easing, duration)})`\n            : defaults.easing;\n    }\n    else {\n        return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n    }\n};\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,kBAAkB;AAChF,SAASC,QAAQ,QAAQ,2BAA2B;;AAEpD;AACA,IAAMC,UAAU,GAAG,KAAK;AACxB,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0B,CAAIC,MAAM,EAAEC,QAAQ,EAAK;EACrD,IAAIC,MAAM,GAAG,EAAE;EACf,IAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,QAAQ,GAAGH,UAAU,CAAC;EACnD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,EAAEG,CAAC,EAAE,EAAE;IAChCJ,MAAM,IAAIF,MAAM,CAACJ,QAAQ,CAAC,CAAC,EAAEO,SAAS,GAAG,CAAC,EAAEG,CAAC,CAAC,CAAC,GAAG,IAAI;EAC1D;EACA,OAAOJ,MAAM,CAACK,SAAS,CAAC,CAAC,EAAEL,MAAM,CAACM,MAAM,GAAG,CAAC,CAAC;AACjD,CAAC;AACD,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAIT,MAAM,EAAEC,QAAQ,EAAK;EACxC,IAAIR,UAAU,CAACO,MAAM,CAAC,EAAE;IACpB,OAAOH,QAAQ,CAACa,YAAY,EAAE,oBACdX,0BAA0B,CAACC,MAAM,EAAEC,QAAQ,CAAC,SACtDP,QAAQ,CAACM,MAAM;EACzB,CAAC,MACI;IACD,OAAOL,aAAa,CAACK,MAAM,CAAC,GAAGW,mBAAmB,CAACX,MAAM,CAAC,GAAGA,MAAM;EACvE;AACJ,CAAC;AACD,IAAMW,mBAAmB,GAAG,SAAtBA,mBAAmB;EAAA;IAAKC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;EAAA,8BAAsBH,CAAC,eAAKC,CAAC,eAAKC,CAAC,eAAKC,CAAC;AAAA,CAAG;AAEpF,SAASN,aAAa,EAAEE,mBAAmB,EAAEZ,0BAA0B"},"metadata":{},"sourceType":"module"}