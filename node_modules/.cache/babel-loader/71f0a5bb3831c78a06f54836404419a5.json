{"ast":null,"code":"import { noopReturn, addUniqueItem } from '@motionone/utils';\nimport { getAnimationData } from '../data.es.js';\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nvar axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nvar order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nvar transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nvar rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: function toDefaultUnit(v) {\n    return v + \"deg\";\n  }\n};\nvar baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: function toDefaultUnit(v) {\n      return v + \"px\";\n    }\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: noopReturn\n  },\n  skew: rotation\n};\nvar transformDefinitions = new Map();\nvar asTransformCssVar = function asTransformCssVar(name) {\n  return \"--motion-\".concat(name);\n};\n/**\n * Generate a list of every possible transform key\n */\nvar transforms = [\"x\", \"y\", \"z\"];\norder.forEach(function (name) {\n  axes.forEach(function (axis) {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nvar compareTransformOrder = function compareTransformOrder(a, b) {\n  return transforms.indexOf(a) - transforms.indexOf(b);\n};\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nvar transformLookup = new Set(transforms);\nvar isTransform = function isTransform(name) {\n  return transformLookup.has(name);\n};\nvar addTransformToElement = function addTransformToElement(element, name) {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n  var _getAnimationData = getAnimationData(element),\n    transforms = _getAnimationData.transforms;\n  addUniqueItem(transforms, name);\n  /**\n   * TODO: An optimisation here could be to cache the transform in element data\n   * and only update if this has changed.\n   */\n  element.style.transform = buildTransformTemplate(transforms);\n};\nvar buildTransformTemplate = function buildTransformTemplate(transforms) {\n  return transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n};\nvar transformListToString = function transformListToString(template, name) {\n  return \"\".concat(template, \" \").concat(name, \"(var(\").concat(asTransformCssVar(name), \"))\");\n};\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };","map":{"version":3,"names":["noopReturn","addUniqueItem","getAnimationData","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"],"sourcesContent":["import { noopReturn, addUniqueItem } from '@motionone/utils';\nimport { getAnimationData } from '../data.es.js';\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n};\nconst rotation = {\n    syntax: \"<angle>\",\n    initialValue: \"0deg\",\n    toDefaultUnit: (v) => v + \"deg\",\n};\nconst baseTransformProperties = {\n    translate: {\n        syntax: \"<length-percentage>\",\n        initialValue: \"0px\",\n        toDefaultUnit: (v) => v + \"px\",\n    },\n    rotate: rotation,\n    scale: {\n        syntax: \"<number>\",\n        initialValue: 1,\n        toDefaultUnit: noopReturn,\n    },\n    skew: rotation,\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = (name) => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach((name) => {\n    axes.forEach((axis) => {\n        transforms.push(name + axis);\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = (name) => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n    // Map x to translateX etc\n    if (transformAlias[name])\n        name = transformAlias[name];\n    const { transforms } = getAnimationData(element);\n    addUniqueItem(transforms, name);\n    /**\n     * TODO: An optimisation here could be to cache the transform in element data\n     * and only update if this has changed.\n     */\n    element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = (transforms) => transforms\n    .sort(compareTransformOrder)\n    .reduce(transformListToString, \"\")\n    .trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}