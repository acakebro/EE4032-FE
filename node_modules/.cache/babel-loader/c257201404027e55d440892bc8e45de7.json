{"ast":null,"code":"import _toConsumableArray from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nvar r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nvar VALID = new Set(read_member_array(r));\nvar IGNORED = new Set(read_member_array(r));\nvar MAPPED = read_mapped_map(r);\nvar EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nvar HYPHEN = 0x2D;\nvar UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n  return cps.filter(function (cp) {\n    return cp != 0xFE0F;\n  });\n}\nexport function ens_normalize_post_check(name) {\n  var _iterator = _createForOfIteratorHelper(name.split('.')),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var label = _step.value;\n      var cps = explode_cp(label);\n      try {\n        for (var i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n          if (cps[i] !== UNDERSCORE) {\n            throw new Error(\"underscore only allowed at start\");\n          }\n        }\n        if (cps.length >= 4 && cps.every(function (cp) {\n          return cp < 0x80;\n        }) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n          throw new Error(\"invalid label extension\");\n        }\n      } catch (err) {\n        throw new Error(\"Invalid label \\\"\".concat(label, \"\\\": \").concat(err.message));\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n  var input = explode_cp(name).reverse(); // flip for pop\n  var output = [];\n  while (input.length) {\n    var emoji = consume_emoji_reversed(input);\n    if (emoji) {\n      output.push.apply(output, _toConsumableArray(emoji_filter(emoji)));\n      continue;\n    }\n    var cp = input.pop();\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n    var cps = MAPPED[cp];\n    if (cps) {\n      output.push.apply(output, _toConsumableArray(cps));\n      continue;\n    }\n    throw new Error(\"Disallowed codepoint: 0x\".concat(cp.toString(16).toUpperCase()));\n  }\n  return ens_normalize_post_check(nfc(String.fromCodePoint.apply(String, output)));\n}\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n  var node = EMOJI_ROOT;\n  var emoji;\n  var saved;\n  var stack = [];\n  var pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n  var _loop = function _loop() {\n    var cp = cps[--pos];\n    node = (_a = node.branches.find(function (x) {\n      return x.set.has(cp);\n    })) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) return \"break\";\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) return \"break\";\n    }\n    stack.push(cp);\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n      if (eaten) eaten.push.apply(eaten, _toConsumableArray(cps.slice(pos).reverse())); // copy input (if needed)\n      cps.length = pos; // truncate\n    }\n  };\n  while (pos) {\n    var _ret = _loop();\n    if (_ret === \"break\") break;\n  }\n  return emoji;\n}","map":{"version":3,"mappings":"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","names":["toUtf8CodePoints","getData","r","read_member_array","read_mapped_map","read_emoji_trie","VALID","Set","IGNORED","MAPPED","EMOJI_ROOT","HYPHEN","UNDERSCORE","explode_cp","name","filter_fe0f","cps","filter","cp","ens_normalize_post_check","split","label","i","lastIndexOf","Error","length","every","err","message","ens_normalize","normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","push","pop","has","toString","toUpperCase","nfc","String","fromCodePoint","s","eaten","node","saved","stack","pos","branches","find","x","set","save","check","fe0f","valid","slice","splice"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/hash/src.ts/ens-normalize/lib.ts"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\n\nimport { getData } from './include.js';\nconst r = getData();\n\nimport {read_member_array, read_mapped_map, read_emoji_trie} from './decoder.js';\n\n// @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name: string): Array<number> {\n    return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps: Array<number>): Array<number> {\n    return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name: string): string {\n\tfor (let label of name.split('.')) {\n\t\tlet cps = explode_cp(label);\n\t\ttry {\n\t\t\tfor (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n\t\t\t\tif (cps[i] !== UNDERSCORE) {\n\t\t\t\t\tthrow new Error(`underscore only allowed at start`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n\t\t\t\tthrow new Error(`invalid label extension`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthrow new Error(`Invalid label \"${label}\": ${err.message}`);\n\t\t}\n\t}\n\treturn name;\n}\n\nexport function ens_normalize(name: string): string {\n\treturn ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name: string, emoji_filter: (a: Array<number>) => Array<number>): string {\n\tlet input = explode_cp(name).reverse(); // flip for pop\n\tlet output = [];\n\twhile (input.length) {\t\t\n\t\tlet emoji = consume_emoji_reversed(input);\n\t\tif (emoji) {\n\t\t\toutput.push(...emoji_filter(emoji));\n\t\t\tcontinue;\n\t\t}\n\t\tlet cp = input.pop();\n\t\tif (VALID.has(cp)) {\n\t\t\toutput.push(cp);\n\t\t\tcontinue;\n\t\t} \n\t\tif (IGNORED.has(cp)) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet cps = MAPPED[cp];\n\t\tif (cps) {\n\t\t\toutput.push(...cps);\n\t\t\tcontinue;\n\t\t}\n\t\tthrow new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n\t}\n\treturn ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s: string): string {\n    return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps: Array<number>, eaten?: Array<number>) {\n\tlet node = EMOJI_ROOT;\n\tlet emoji;\n\tlet saved;\n\tlet stack = [];\n\tlet pos = cps.length;\n\tif (eaten) eaten.length = 0; // clear input buffer (if needed)\n\twhile (pos) {\n\t\tlet cp = cps[--pos];\n\t\tnode = node.branches.find(x => x.set.has(cp))?.node;\n\t\tif (!node) break;\n\t\tif (node.save) { // remember\n\t\t\tsaved = cp;\n\t\t} else if (node.check) { // check exclusion\n\t\t\tif (cp === saved) break;\n\t\t}\n\t\tstack.push(cp);\n\t\tif (node.fe0f) {\n\t\t\tstack.push(0xFE0F);\n\t\t\tif (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n\t\t}\n\t\tif (node.valid) { // this is a valid emoji (so far)\n\t\t\temoji = stack.slice(); // copy stack\n\t\t\tif (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\t\t\tif (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\t\t\tcps.length = pos; // truncate\n\t\t}\n\t}\n\treturn emoji;\n}\n"]},"metadata":{},"sourceType":"module"}