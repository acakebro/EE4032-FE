{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var request, opts, response, body, headers;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (options == null) {\n              options = {};\n            }\n            request = {\n              method: options.method || \"GET\",\n              headers: options.headers || {},\n              body: options.body || undefined\n            };\n            if (options.skipFetchSetup !== true) {\n              request.mode = \"cors\"; // no-cors, cors, *same-origin\n              request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n              request.credentials = \"same-origin\"; // include, *same-origin, omit\n              request.redirect = \"follow\"; // manual, *follow, error\n              request.referrer = \"client\"; // no-referrer, *client\n            }\n\n            ;\n            if (options.fetchOptions != null) {\n              opts = options.fetchOptions;\n              if (opts.mode) {\n                request.mode = opts.mode;\n              }\n              if (opts.cache) {\n                request.cache = opts.cache;\n              }\n              if (opts.credentials) {\n                request.credentials = opts.credentials;\n              }\n              if (opts.redirect) {\n                request.redirect = opts.redirect;\n              }\n              if (opts.referrer) {\n                request.referrer = opts.referrer;\n              }\n            }\n            _context.next = 7;\n            return fetch(href, request);\n          case 7:\n            response = _context.sent;\n            _context.next = 10;\n            return response.arrayBuffer();\n          case 10:\n            body = _context.sent;\n            headers = {};\n            if (response.headers.forEach) {\n              response.headers.forEach(function (value, key) {\n                headers[key.toLowerCase()] = value;\n              });\n            } else {\n              response.headers.keys().forEach(function (key) {\n                headers[key.toLowerCase()] = response.headers.get(key);\n              });\n            }\n            return _context.abrupt(\"return\", {\n              headers: headers,\n              statusCode: response.status,\n              statusMessage: response.statusText,\n              body: arrayify(new Uint8Array(body))\n            });\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,SAASA,QAAQ,QAAQ,sBAAsB;AAM/C,OAAM,SAAgBC,MAAM,CAACC,IAAY,EAAEC,OAAiB;;;;;;;YACxD,IAAIA,OAAO,IAAI,IAAI,EAAE;cAAEA,OAAO,GAAG,EAAG;;YAE9BC,OAAO,GAAgB;cACzBC,MAAM,EAAGF,OAAO,CAACE,MAAM,IAAI,KAAM;cACjCC,OAAO,EAAGH,OAAO,CAACG,OAAO,IAAI,EAAI;cACjCC,IAAI,EAAGJ,OAAO,CAACI,IAAI,IAAIC;aAC1B;YAED,IAAIL,OAAO,CAACM,cAAc,KAAK,IAAI,EAAE;cACjCL,OAAO,CAACM,IAAI,GAAgB,MAAM,CAAC,CAAc;cACjDN,OAAO,CAACO,KAAK,GAAiB,UAAU,CAAC,CAAQ;cACjDP,OAAO,CAACQ,WAAW,GAAuB,aAAa,CAAC,CAAE;cAC1DR,OAAO,CAACS,QAAQ,GAAoB,QAAQ,CAAC,CAAI;cACjDT,OAAO,CAACU,QAAQ,GAAG,QAAQ,CAAC,CAAqB;;;YACpD;YAED,IAAIX,OAAO,CAACY,YAAY,IAAI,IAAI,EAAE;cACxBC,IAAI,GAAGb,OAAO,CAACY,YAAY;cACjC,IAAIC,IAAI,CAACN,IAAI,EAAE;gBAAEN,OAAO,CAACM,IAAI,GAAiBM,IAAI,CAACN,IAAK;;cACxD,IAAIM,IAAI,CAACL,KAAK,EAAE;gBAAEP,OAAO,CAACO,KAAK,GAAkBK,IAAI,CAACL,KAAM;;cAC5D,IAAIK,IAAI,CAACJ,WAAW,EAAE;gBAAER,OAAO,CAACQ,WAAW,GAAwBI,IAAI,CAACJ,WAAY;;cACpF,IAAII,IAAI,CAACH,QAAQ,EAAE;gBAAET,OAAO,CAACS,QAAQ,GAAqBG,IAAI,CAACH,QAAS;;cACxE,IAAIG,IAAI,CAACF,QAAQ,EAAE;gBAAEV,OAAO,CAACU,QAAQ,GAAGE,IAAI,CAACF,QAAQ;;;YACxD;YAEgB,OAAMG,KAAK,CAACf,IAAI,EAAEE,OAAO,CAAC;UAAA;YAArCc,QAAQ;YAAA;YACD,OAAMA,QAAQ,CAACC,WAAW,EAAE;UAAA;YAAnCZ,IAAI;YAEJD,OAAO,GAAiC,EAAG;YACjD,IAAIY,QAAQ,CAACZ,OAAO,CAACc,OAAO,EAAE;cAC1BF,QAAQ,CAACZ,OAAO,CAACc,OAAO,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;gBACpChB,OAAO,CAACgB,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGF,KAAK;cACtC,CAAC,CAAC;aACL,MAAM;cAC2BH,QAAQ,CAACZ,OAAO,CAAGkB,IAAI,EAAI,CAACJ,OAAO,CAAC,UAACE,GAAG,EAAI;gBACtEhB,OAAO,CAACgB,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGL,QAAQ,CAACZ,OAAO,CAACmB,GAAG,CAACH,GAAG,CAAC;cAC1D,CAAC,CAAC;;YACL,iCAEM;cACHhB,OAAO,EAAEA,OAAO;cAChBoB,UAAU,EAAER,QAAQ,CAACS,MAAM;cAC3BC,aAAa,EAAEV,QAAQ,CAACW,UAAU;cAClCtB,IAAI,EAAEP,QAAQ,CAAC,IAAI8B,UAAU,CAACvB,IAAI,CAAC;aACtC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACJ","names":["arrayify","getUrl","href","options","request","method","headers","body","undefined","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetchOptions","opts","fetch","response","arrayBuffer","forEach","value","key","toLowerCase","keys","get","statusCode","status","statusMessage","statusText","Uint8Array"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/web/src.ts/browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"]},"metadata":{},"sourceType":"module"}