{"ast":null,"code":"import _slicedToArray from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { px, number } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from 'hey-listen';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\nvar positionalKeys = new Set([\"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\", \"x\", \"y\"]);\nvar isPositionalKey = function isPositionalKey(key) {\n  return positionalKeys.has(key);\n};\nvar hasPositionalKey = function hasPositionalKey(target) {\n  return Object.keys(target).some(isPositionalKey);\n};\nvar setAndResetVelocity = function setAndResetVelocity(value, to) {\n  // Looks odd but setting it twice doesn't render, it'll just\n  // set both prev and current to the latest value\n  value.set(to, false);\n  value.set(to);\n};\nvar isNumOrPxType = function isNumOrPxType(v) {\n  return v === number || v === px;\n};\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n  BoundingBoxDimension[\"width\"] = \"width\";\n  BoundingBoxDimension[\"height\"] = \"height\";\n  BoundingBoxDimension[\"left\"] = \"left\";\n  BoundingBoxDimension[\"right\"] = \"right\";\n  BoundingBoxDimension[\"top\"] = \"top\";\n  BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nvar getPosFromMatrix = function getPosFromMatrix(matrix, pos) {\n  return parseFloat(matrix.split(\", \")[pos]);\n};\nvar getTranslateFromMatrix = function getTranslateFromMatrix(pos2, pos3) {\n  return function (_bbox, _ref) {\n    var transform = _ref.transform;\n    if (transform === \"none\" || !transform) return 0;\n    var matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n      return getPosFromMatrix(matrix3d[1], pos3);\n    } else {\n      var matrix = transform.match(/^matrix\\((.+)\\)$/);\n      if (matrix) {\n        return getPosFromMatrix(matrix[1], pos2);\n      } else {\n        return 0;\n      }\n    }\n  };\n};\nvar transformKeys = new Set([\"x\", \"y\", \"z\"]);\nvar nonTranslationalTransformKeys = transformPropOrder.filter(function (key) {\n  return !transformKeys.has(key);\n});\nfunction removeNonTranslationalTransform(visualElement) {\n  var removedTransforms = [];\n  nonTranslationalTransformKeys.forEach(function (key) {\n    var value = visualElement.getValue(key);\n    if (value !== undefined) {\n      removedTransforms.push([key, value.get()]);\n      value.set(key.startsWith(\"scale\") ? 1 : 0);\n    }\n  });\n  // Apply changes to element before measurement\n  if (removedTransforms.length) visualElement.syncRender();\n  return removedTransforms;\n}\nvar positionalValues = {\n  // Dimensions\n  width: function width(_ref2, _ref3) {\n    var x = _ref2.x;\n    var _ref3$paddingLeft = _ref3.paddingLeft,\n      paddingLeft = _ref3$paddingLeft === void 0 ? \"0\" : _ref3$paddingLeft,\n      _ref3$paddingRight = _ref3.paddingRight,\n      paddingRight = _ref3$paddingRight === void 0 ? \"0\" : _ref3$paddingRight;\n    return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);\n  },\n  height: function height(_ref4, _ref5) {\n    var y = _ref4.y;\n    var _ref5$paddingTop = _ref5.paddingTop,\n      paddingTop = _ref5$paddingTop === void 0 ? \"0\" : _ref5$paddingTop,\n      _ref5$paddingBottom = _ref5.paddingBottom,\n      paddingBottom = _ref5$paddingBottom === void 0 ? \"0\" : _ref5$paddingBottom;\n    return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);\n  },\n  top: function top(_bbox, _ref6) {\n    var _top = _ref6.top;\n    return parseFloat(_top);\n  },\n  left: function left(_bbox, _ref7) {\n    var _left = _ref7.left;\n    return parseFloat(_left);\n  },\n  bottom: function bottom(_ref8, _ref9) {\n    var y = _ref8.y;\n    var top = _ref9.top;\n    return parseFloat(top) + (y.max - y.min);\n  },\n  right: function right(_ref10, _ref11) {\n    var x = _ref10.x;\n    var left = _ref11.left;\n    return parseFloat(left) + (x.max - x.min);\n  },\n  // Transform\n  x: getTranslateFromMatrix(4, 13),\n  y: getTranslateFromMatrix(5, 14)\n};\nvar convertChangedValueTypes = function convertChangedValueTypes(target, visualElement, changedKeys) {\n  var originBbox = visualElement.measureViewportBox();\n  var element = visualElement.getInstance();\n  var elementComputedStyle = getComputedStyle(element);\n  var display = elementComputedStyle.display;\n  var origin = {};\n  // If the element is currently set to display: \"none\", make it visible before\n  // measuring the target bounding box\n  if (display === \"none\") {\n    visualElement.setStaticValue(\"display\", target.display || \"block\");\n  }\n  /**\n   * Record origins before we render and update styles\n   */\n  changedKeys.forEach(function (key) {\n    origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n  });\n  // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n  visualElement.syncRender();\n  var targetBbox = visualElement.measureViewportBox();\n  changedKeys.forEach(function (key) {\n    // Restore styles to their **calculated computed style**, not their actual\n    // originally set style. This allows us to animate between equivalent pixel units.\n    var value = visualElement.getValue(key);\n    setAndResetVelocity(value, origin[key]);\n    target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n  });\n  return target;\n};\nvar checkAndConvertChangedValueTypes = function checkAndConvertChangedValueTypes(visualElement, target) {\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var transitionEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  target = _objectSpread({}, target);\n  transitionEnd = _objectSpread({}, transitionEnd);\n  var targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n  // We want to remove any transform values that could affect the element's bounding box before\n  // it's measured. We'll reapply these later.\n  var removedTransformValues = [];\n  var hasAttemptedToRemoveTransformValues = false;\n  var changedValueTypeKeys = [];\n  targetPositionalKeys.forEach(function (key) {\n    var value = visualElement.getValue(key);\n    if (!visualElement.hasValue(key)) return;\n    var from = origin[key];\n    var fromType = findDimensionValueType(from);\n    var to = target[key];\n    var toType;\n    // TODO: The current implementation of this basically throws an error\n    // if you try and do value conversion via keyframes. There's probably\n    // a way of doing this but the performance implications would need greater scrutiny,\n    // as it'd be doing multiple resize-remeasure operations.\n    if (isKeyframesTarget(to)) {\n      var numKeyframes = to.length;\n      var fromIndex = to[0] === null ? 1 : 0;\n      from = to[fromIndex];\n      fromType = findDimensionValueType(from);\n      for (var i = fromIndex; i < numKeyframes; i++) {\n        if (!toType) {\n          toType = findDimensionValueType(to[i]);\n          invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), \"Keyframes must be of the same dimension as the current value\");\n        } else {\n          invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n        }\n      }\n    } else {\n      toType = findDimensionValueType(to);\n    }\n    if (fromType !== toType) {\n      // If they're both just number or px, convert them both to numbers rather than\n      // relying on resize/remeasure to convert (which is wasteful in this situation)\n      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n        var current = value.get();\n        if (typeof current === \"string\") {\n          value.set(parseFloat(current));\n        }\n        if (typeof to === \"string\") {\n          target[key] = parseFloat(to);\n        } else if (Array.isArray(to) && toType === px) {\n          target[key] = to.map(parseFloat);\n        }\n      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {\n        // If one or the other value is 0, it's safe to coerce it to the\n        // type of the other without measurement\n        if (from === 0) {\n          value.set(toType.transform(from));\n        } else {\n          target[key] = fromType.transform(to);\n        }\n      } else {\n        // If we're going to do value conversion via DOM measurements, we first\n        // need to remove non-positional transform values that could affect the bbox measurements.\n        if (!hasAttemptedToRemoveTransformValues) {\n          removedTransformValues = removeNonTranslationalTransform(visualElement);\n          hasAttemptedToRemoveTransformValues = true;\n        }\n        changedValueTypeKeys.push(key);\n        transitionEnd[key] = transitionEnd[key] !== undefined ? transitionEnd[key] : target[key];\n        setAndResetVelocity(value, to);\n      }\n    }\n  });\n  if (changedValueTypeKeys.length) {\n    var scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0 ? window.pageYOffset : null;\n    var convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n    // If we removed transform values, reapply them before the next render\n    if (removedTransformValues.length) {\n      removedTransformValues.forEach(function (_ref12) {\n        var _ref13 = _slicedToArray(_ref12, 2),\n          key = _ref13[0],\n          value = _ref13[1];\n        visualElement.getValue(key).set(value);\n      });\n    }\n    // Reapply original values\n    visualElement.syncRender();\n    // Restore scroll position\n    if (isBrowser && scrollY !== null) {\n      window.scrollTo({\n        top: scrollY\n      });\n    }\n    return {\n      target: convertedTarget,\n      transitionEnd: transitionEnd\n    };\n  } else {\n    return {\n      target: target,\n      transitionEnd: transitionEnd\n    };\n  }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n  return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : {\n    target: target,\n    transitionEnd: transitionEnd\n  };\n}\nexport { BoundingBoxDimension, positionalValues, unitConversion };","map":{"version":3,"names":["px","number","isKeyframesTarget","invariant","transformPropOrder","findDimensionValueType","isBrowser","positionalKeys","Set","isPositionalKey","key","has","hasPositionalKey","target","Object","keys","some","setAndResetVelocity","value","to","set","isNumOrPxType","v","BoundingBoxDimension","getPosFromMatrix","matrix","pos","parseFloat","split","getTranslateFromMatrix","pos2","pos3","_bbox","transform","matrix3d","match","transformKeys","nonTranslationalTransformKeys","filter","removeNonTranslationalTransform","visualElement","removedTransforms","forEach","getValue","undefined","push","get","startsWith","length","syncRender","positionalValues","width","x","paddingLeft","paddingRight","max","min","height","y","paddingTop","paddingBottom","top","left","bottom","right","convertChangedValueTypes","changedKeys","originBbox","measureViewportBox","element","getInstance","elementComputedStyle","getComputedStyle","display","origin","setStaticValue","targetBbox","checkAndConvertChangedValueTypes","transitionEnd","targetPositionalKeys","removedTransformValues","hasAttemptedToRemoveTransformValues","changedValueTypeKeys","hasValue","from","fromType","toType","numKeyframes","fromIndex","i","current","Array","isArray","map","scrollY","indexOf","window","pageYOffset","convertedTarget","scrollTo","unitConversion"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs"],"sourcesContent":["import { px, number } from 'style-value-types';\nimport { isKeyframesTarget } from '../../../animation/utils/is-keyframes-target.mjs';\nimport { invariant } from 'hey-listen';\nimport { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { findDimensionValueType } from '../value-types/dimensions.mjs';\nimport { isBrowser } from '../../../utils/is-browser.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n]);\nconst isPositionalKey = (key) => positionalKeys.has(key);\nconst hasPositionalKey = (target) => {\n    return Object.keys(target).some(isPositionalKey);\n};\nconst setAndResetVelocity = (value, to) => {\n    // Looks odd but setting it twice doesn't render, it'll just\n    // set both prev and current to the latest value\n    value.set(to, false);\n    value.set(to);\n};\nconst isNumOrPxType = (v) => v === number || v === px;\nvar BoundingBoxDimension;\n(function (BoundingBoxDimension) {\n    BoundingBoxDimension[\"width\"] = \"width\";\n    BoundingBoxDimension[\"height\"] = \"height\";\n    BoundingBoxDimension[\"left\"] = \"left\";\n    BoundingBoxDimension[\"right\"] = \"right\";\n    BoundingBoxDimension[\"top\"] = \"top\";\n    BoundingBoxDimension[\"bottom\"] = \"bottom\";\n})(BoundingBoxDimension || (BoundingBoxDimension = {}));\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    // Apply changes to element before measurement\n    if (removedTransforms.length)\n        visualElement.syncRender();\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\nconst convertChangedValueTypes = (target, visualElement, changedKeys) => {\n    const originBbox = visualElement.measureViewportBox();\n    const element = visualElement.getInstance();\n    const elementComputedStyle = getComputedStyle(element);\n    const { display } = elementComputedStyle;\n    const origin = {};\n    // If the element is currently set to display: \"none\", make it visible before\n    // measuring the target bounding box\n    if (display === \"none\") {\n        visualElement.setStaticValue(\"display\", target.display || \"block\");\n    }\n    /**\n     * Record origins before we render and update styles\n     */\n    changedKeys.forEach((key) => {\n        origin[key] = positionalValues[key](originBbox, elementComputedStyle);\n    });\n    // Apply the latest values (as set in checkAndConvertChangedValueTypes)\n    visualElement.syncRender();\n    const targetBbox = visualElement.measureViewportBox();\n    changedKeys.forEach((key) => {\n        // Restore styles to their **calculated computed style**, not their actual\n        // originally set style. This allows us to animate between equivalent pixel units.\n        const value = visualElement.getValue(key);\n        setAndResetVelocity(value, origin[key]);\n        target[key] = positionalValues[key](targetBbox, elementComputedStyle);\n    });\n    return target;\n};\nconst checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {\n    target = { ...target };\n    transitionEnd = { ...transitionEnd };\n    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);\n    // We want to remove any transform values that could affect the element's bounding box before\n    // it's measured. We'll reapply these later.\n    let removedTransformValues = [];\n    let hasAttemptedToRemoveTransformValues = false;\n    const changedValueTypeKeys = [];\n    targetPositionalKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (!visualElement.hasValue(key))\n            return;\n        let from = origin[key];\n        let fromType = findDimensionValueType(from);\n        const to = target[key];\n        let toType;\n        // TODO: The current implementation of this basically throws an error\n        // if you try and do value conversion via keyframes. There's probably\n        // a way of doing this but the performance implications would need greater scrutiny,\n        // as it'd be doing multiple resize-remeasure operations.\n        if (isKeyframesTarget(to)) {\n            const numKeyframes = to.length;\n            const fromIndex = to[0] === null ? 1 : 0;\n            from = to[fromIndex];\n            fromType = findDimensionValueType(from);\n            for (let i = fromIndex; i < numKeyframes; i++) {\n                if (!toType) {\n                    toType = findDimensionValueType(to[i]);\n                    invariant(toType === fromType ||\n                        (isNumOrPxType(fromType) && isNumOrPxType(toType)), \"Keyframes must be of the same dimension as the current value\");\n                }\n                else {\n                    invariant(findDimensionValueType(to[i]) === toType, \"All keyframes must be of the same type\");\n                }\n            }\n        }\n        else {\n            toType = findDimensionValueType(to);\n        }\n        if (fromType !== toType) {\n            // If they're both just number or px, convert them both to numbers rather than\n            // relying on resize/remeasure to convert (which is wasteful in this situation)\n            if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {\n                const current = value.get();\n                if (typeof current === \"string\") {\n                    value.set(parseFloat(current));\n                }\n                if (typeof to === \"string\") {\n                    target[key] = parseFloat(to);\n                }\n                else if (Array.isArray(to) && toType === px) {\n                    target[key] = to.map(parseFloat);\n                }\n            }\n            else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) &&\n                (toType === null || toType === void 0 ? void 0 : toType.transform) &&\n                (from === 0 || to === 0)) {\n                // If one or the other value is 0, it's safe to coerce it to the\n                // type of the other without measurement\n                if (from === 0) {\n                    value.set(toType.transform(from));\n                }\n                else {\n                    target[key] = fromType.transform(to);\n                }\n            }\n            else {\n                // If we're going to do value conversion via DOM measurements, we first\n                // need to remove non-positional transform values that could affect the bbox measurements.\n                if (!hasAttemptedToRemoveTransformValues) {\n                    removedTransformValues =\n                        removeNonTranslationalTransform(visualElement);\n                    hasAttemptedToRemoveTransformValues = true;\n                }\n                changedValueTypeKeys.push(key);\n                transitionEnd[key] =\n                    transitionEnd[key] !== undefined\n                        ? transitionEnd[key]\n                        : target[key];\n                setAndResetVelocity(value, to);\n            }\n        }\n    });\n    if (changedValueTypeKeys.length) {\n        const scrollY = changedValueTypeKeys.indexOf(\"height\") >= 0\n            ? window.pageYOffset\n            : null;\n        const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);\n        // If we removed transform values, reapply them before the next render\n        if (removedTransformValues.length) {\n            removedTransformValues.forEach(([key, value]) => {\n                visualElement.getValue(key).set(value);\n            });\n        }\n        // Reapply original values\n        visualElement.syncRender();\n        // Restore scroll position\n        if (isBrowser && scrollY !== null) {\n            window.scrollTo({ top: scrollY });\n        }\n        return { target: convertedTarget, transitionEnd };\n    }\n    else {\n        return { target, transitionEnd };\n    }\n};\n/**\n * Convert value types for x/y/width/height/top/left/bottom/right\n *\n * Allows animation between `'auto'` -> `'100%'` or `0` -> `'calc(50% - 10vw)'`\n *\n * @internal\n */\nfunction unitConversion(visualElement, target, origin, transitionEnd) {\n    return hasPositionalKey(target)\n        ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd)\n        : { target, transitionEnd };\n}\n\nexport { BoundingBoxDimension, positionalValues, unitConversion };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}