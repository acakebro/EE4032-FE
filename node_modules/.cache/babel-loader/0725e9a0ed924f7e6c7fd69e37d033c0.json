{"ast":null,"code":"import _toConsumableArray from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectWithoutProperties from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"willChange\"];\nimport sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nvar featureNames = Object.keys(featureDefinitions);\nvar numFeatures = featureNames.length;\nvar visualElement = function visualElement(_ref) {\n  var _ref$treeType = _ref.treeType,\n    treeType = _ref$treeType === void 0 ? \"\" : _ref$treeType,\n    build = _ref.build,\n    _getBaseTarget = _ref.getBaseTarget,\n    _makeTargetAnimatable = _ref.makeTargetAnimatable,\n    _measureViewportBox = _ref.measureViewportBox,\n    renderInstance = _ref.render,\n    readValueFromInstance = _ref.readValueFromInstance,\n    removeValueFromRenderState = _ref.removeValueFromRenderState,\n    _sortNodePosition = _ref.sortNodePosition,\n    scrapeMotionValuesFromProps = _ref.scrapeMotionValuesFromProps;\n  return function (_ref2) {\n    var parent = _ref2.parent,\n      props = _ref2.props,\n      presenceId = _ref2.presenceId,\n      blockInitialAnimation = _ref2.blockInitialAnimation,\n      visualState = _ref2.visualState,\n      reducedMotionConfig = _ref2.reducedMotionConfig;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var isMounted = false;\n    var latestValues = visualState.latestValues,\n      renderState = visualState.renderState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    var instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    var lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    var values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    var valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    var prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    var baseTarget = _objectSpread({}, latestValues);\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n    var initialValues = props.initial ? _objectSpread({}, latestValues) : {};\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    var removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n      var removeOnChange = value.onChange(function (latestValue) {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      var removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, function () {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    var _scrapeMotionValuesFr = scrapeMotionValuesFromProps(props),\n      willChange = _scrapeMotionValuesFr.willChange,\n      initialMotionValues = _objectWithoutProperties(_scrapeMotionValuesFr, _excluded);\n    for (var key in initialMotionValues) {\n      var value = initialMotionValues[key];\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Update external values with initial values\n     */\n    if (props.values) {\n      for (var _key in props.values) {\n        var _value = props.values[_key];\n        if (latestValues[_key] !== undefined && isMotionValue(_value)) {\n          _value.set(latestValues[_key]);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    var isControllingVariants$1 = isControllingVariants(props);\n    var isVariantNode$1 = isVariantNode(props);\n    var element = _objectSpread(_objectSpread({\n      treeType: treeType,\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent: parent,\n      children: new Set(),\n      /**\n       *\n       */\n      presenceId: presenceId,\n      shouldReduceMotion: null,\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode$1 ? new Set() : undefined,\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation: blockInitialAnimation,\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: function isMounted() {\n        return Boolean(instance);\n      },\n      mount: function mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n        if (isVariantNode$1 && parent && !isControllingVariants$1) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n        values.forEach(function (value, key) {\n          return bindToMotionValue(key, value);\n        });\n        if (!hasReducedMotionListener.current) {\n          initPrefersReducedMotion();\n        }\n        element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n      /**\n       *\n       */unmount: function unmount() {\n        var _a;\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(function (remove) {\n          return remove();\n        });\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n      loadFeatures: function loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        var features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n          invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n        for (var i = 0; i < numFeatures; i++) {\n          var name = featureNames[i];\n          var _featureDefinitions$n = featureDefinitions[name],\n            isEnabled = _featureDefinitions$n.isEnabled,\n            Component = _featureDefinitions$n.Component;\n          /**\n           * It might be possible in the future to use this moment to\n           * dynamically request functionality. In initial tests this\n           * was producing a lot of duplication amongst bundles.\n           */\n          if (isEnabled(renderedProps) && Component) {\n            features.push(createElement(Component, _objectSpread(_objectSpread({\n              key: name\n            }, renderedProps), {}, {\n              visualElement: element\n            })));\n          }\n        }\n        if (!element.projection && ProjectionNodeConstructor) {\n          element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n          var layoutId = renderedProps.layoutId,\n            layout = renderedProps.layout,\n            drag = renderedProps.drag,\n            dragConstraints = renderedProps.dragConstraints,\n            layoutScroll = renderedProps.layoutScroll;\n          element.projection.setOptions({\n            layoutId: layoutId,\n            layout: layout,\n            alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n            visualElement: element,\n            scheduleRender: function scheduleRender() {\n              return element.scheduleRender();\n            },\n            /**\n             * TODO: Update options in an effect. This could be tricky as it'll be too late\n             * to update by the time layout animations run.\n             * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n             * ensuring it gets called if there's no potential layout animations.\n             *\n             */\n            animationType: typeof layout === \"string\" ? layout : \"both\",\n            initialPromotionConfig: initialLayoutGroupConfig,\n            layoutScroll: layoutScroll\n          });\n        }\n        return features;\n      },\n      /**\n       * Add a child visual element to our set of children.\n       */addVariantChild: function addVariantChild(child) {\n        var _a;\n        var closestVariantNode = element.getClosestVariantNode();\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return function () {\n            return closestVariantNode.variantChildren.delete(child);\n          };\n        }\n      },\n      sortNodePosition: function sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!_sortNodePosition || treeType !== other.treeType) return 0;\n        return _sortNodePosition(element.getInstance(), other.getInstance());\n      },\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: function getClosestVariantNode() {\n        return isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode();\n      },\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: function getLayoutId() {\n        return props.layoutId;\n      },\n      /**\n       * Returns the current instance.\n       */\n      getInstance: function getInstance() {\n        return instance;\n      },\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: function getStaticValue(key) {\n        return latestValues[key];\n      },\n      setStaticValue: function setStaticValue(key, value) {\n        return latestValues[key] = value;\n      },\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: function getLatestValues() {\n        return latestValues;\n      },\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */setVisibility: function setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */makeTargetAnimatable: function makeTargetAnimatable(target) {\n        var canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return _makeTargetAnimatable(element, target, props, canMutate);\n      },\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */measureViewportBox: function measureViewportBox() {\n        return _measureViewportBox(instance, props);\n      },\n      // Motion values ========================\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue: function addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */removeValue: function removeValue(key) {\n        var _a;\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: function hasValue(key) {\n        return values.has(key);\n      },\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */getValue: function getValue(key, defaultValue) {\n        if (props.values && props.values[key]) {\n          return props.values[key];\n        }\n        var value = values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n        return value;\n      },\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: function forEachValue(callback) {\n        return values.forEach(callback);\n      },\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: function readValue(key) {\n        return latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options);\n      },\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */setBaseTarget: function setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */getBaseTarget: function getBaseTarget(key) {\n        var _a;\n        var _props = props,\n          initial = _props.initial;\n        var valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\" ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key] : undefined;\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n          return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        if (_getBaseTarget) {\n          var target = _getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return initialValues[key] !== undefined && valueFromInitial === undefined ? undefined : baseTarget[key];\n      }\n    }, lifecycles), {}, {\n      /**\n       * Build the renderer state based on the latest visual state.\n       */build: function build() {\n        triggerBuild();\n        return renderState;\n      },\n      /**\n       * Schedule a render on the next animation frame.\n       */scheduleRender: function scheduleRender() {\n        sync.render(render, false, true);\n      },\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */setProps: function setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n      getProps: function getProps() {\n        return props;\n      },\n      // Variants ==============================\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: function getVariant(name) {\n        var _a;\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: function getDefaultTransition() {\n        return props.transition;\n      },\n      getTransformPagePoint: function getTransformPagePoint() {\n        return props.transformPagePoint;\n      },\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */getVariantContext: function getVariantContext() {\n        var startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n        if (!isControllingVariants$1) {\n          var _context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n          if (props.initial !== undefined) {\n            _context.initial = props.initial;\n          }\n          return _context;\n        }\n        var context = {};\n        for (var i = 0; i < numVariantProps; i++) {\n          var name = variantProps[i];\n          var prop = props[name];\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n        return context;\n      }\n    });\n    return element;\n  };\n};\nvar variantProps = [\"initial\"].concat(_toConsumableArray(variantPriorityOrder));\nvar numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["sync","cancelSync","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isVariantLabel","createLifecycles","updateMotionValuesFromProps","isControllingVariants","isVariantNode","env","invariant","featureDefinitions","createElement","isRefObject","resolveVariantFromProps","featureNames","Object","keys","numFeatures","length","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","renderInstance","render","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","reducedMotionConfig","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","initialValues","initial","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","willChange","initialMotionValues","undefined","add","isControllingVariants$1","isVariantNode$1","current","depth","children","Set","shouldReduceMotion","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","_a","remove","delete","clearAllListeners","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","getLatestValues","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","getStaticValue","setStaticValue","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","valueFromInitial","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","numVariantProps","variantProps","prop"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, reducedMotionConfig, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n        ...latestValues,\n    };\n    /**\n     * Create an object of the values we initially animated from (if initial prop present).\n     */\n    const initialValues = props.initial ? { ...latestValues } : {};\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const { willChange, ...initialMotionValues } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Update external values with initial values\n     */\n    if (props.values) {\n        for (const key in props.values) {\n            const value = props.values[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key]);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n        treeType,\n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null,\n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0,\n        parent,\n        children: new Set(),\n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion: null,\n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode$1 ? new Set() : undefined,\n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined,\n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation,\n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance),\n        mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode$1 && parent && !isControllingVariants$1) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            if (!hasReducedMotionListener.current) {\n                initPrefersReducedMotion();\n            }\n            element.shouldReduceMotion =\n                reducedMotionConfig === \"never\"\n                    ? false\n                    : reducedMotionConfig === \"always\"\n                        ? true\n                        : prefersReducedMotion.current;\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n            const features = [];\n            /**\n             * If we're in development mode, check to make sure we're not rendering a motion component\n             * as a child of LazyMotion, as this will break the file-size benefits of using it.\n             */\n            if (env !== \"production\" && preloadedFeatures && isStrict) {\n                invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n            }\n            for (let i = 0; i < numFeatures; i++) {\n                const name = featureNames[i];\n                const { isEnabled, Component } = featureDefinitions[name];\n                /**\n                 * It might be possible in the future to use this moment to\n                 * dynamically request functionality. In initial tests this\n                 * was producing a lot of duplication amongst bundles.\n                 */\n                if (isEnabled(renderedProps) && Component) {\n                    features.push(createElement(Component, {\n                        key: name,\n                        ...renderedProps,\n                        visualElement: element,\n                    }));\n                }\n            }\n            if (!element.projection && ProjectionNodeConstructor) {\n                element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n                const { layoutId, layout, drag, dragConstraints, layoutScroll, } = renderedProps;\n                element.projection.setOptions({\n                    layoutId,\n                    layout,\n                    alwaysMeasureLayout: Boolean(drag) ||\n                        (dragConstraints && isRefObject(dragConstraints)),\n                    visualElement: element,\n                    scheduleRender: () => element.scheduleRender(),\n                    /**\n                     * TODO: Update options in an effect. This could be tricky as it'll be too late\n                     * to update by the time layout animations run.\n                     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                     * ensuring it gets called if there's no potential layout animations.\n                     *\n                     */\n                    animationType: typeof layout === \"string\" ? layout : \"both\",\n                    initialPromotionConfig: initialLayoutGroupConfig,\n                    layoutScroll,\n                });\n            }\n            return features;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        },\n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId,\n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance,\n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key],\n        setStaticValue: (key, value) => (latestValues[key] = value),\n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues,\n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        },\n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key),\n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            if (props.values && props.values[key]) {\n                return props.values[key];\n            }\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        },\n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback),\n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => latestValues[key] !== undefined\n            ? latestValues[key]\n            : readValueFromInstance(instance, key, options),\n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            var _a;\n            const { initial } = props;\n            const valueFromInitial = typeof initial === \"string\" || typeof initial === \"object\"\n                ? (_a = resolveVariantFromProps(props, initial)) === null || _a === void 0 ? void 0 : _a[key]\n                : undefined;\n            /**\n             * If this value still exists in the current initial variant, read that.\n             */\n            if (initial && valueFromInitial !== undefined) {\n                return valueFromInitial;\n            }\n            /**\n             * Alternatively, if this VisualElement config has defined a getBaseTarget\n             * so we can read the value from an alternative source, try that.\n             */\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            /**\n             * If the value was initially defined on initial, but it doesn't any more,\n             * return undefined. Otherwise return the value as initially read from the DOM.\n             */\n            return initialValues[key] !== undefined &&\n                valueFromInitial === undefined\n                ? undefined\n                : baseTarget[key];\n        },\n        // Lifecyles ========================\n        ...lifecycles,\n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        },\n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render,\n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        },\n        getProps: () => props,\n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; },\n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition,\n        getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        },\n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants$1) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        },\n    };\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}