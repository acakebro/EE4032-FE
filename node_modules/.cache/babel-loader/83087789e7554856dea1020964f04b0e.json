{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n// \"Bitcoin seed\"\nvar MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000;\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n}\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n  if (typeof wordlist === \"string\") {\n    var words = wordlists[wordlist];\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n    return words;\n  }\n  return wordlist;\n}\nvar _constructorGuard = {};\nexport var defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport var HDNode = /*#__PURE__*/function () {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    _classCallCheck(this, HDNode);\n    /* istanbul ignore if */\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n    if (privateKey) {\n      var signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n  _createClass(HDNode, [{\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current sentiment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      if (this.depth >= 256) {\n        throw new Error(\"Depth too large!\");\n      }\n      return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n    }\n  }, {\n    key: \"neuter\",\n    value: function neuter() {\n      return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n  }, {\n    key: \"_derive\",\n    value: function _derive(index) {\n      if (index > 0xffffffff) {\n        throw new Error(\"invalid index - \" + String(index));\n      }\n      // Base path\n      var path = this.path;\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n      }\n      var data = new Uint8Array(37);\n      if (index & HardenedBit) {\n        if (!this.privateKey) {\n          throw new Error(\"cannot derive child of neutered node\");\n        }\n        // Data = 0x00 || ser_256(k_par)\n        data.set(arrayify(this.privateKey), 1);\n        // Hardened path\n        if (path) {\n          path += \"'\";\n        }\n      } else {\n        // Data = ser_p(point(k_par))\n        data.set(arrayify(this.publicKey));\n      }\n      // Data += ser_32(i)\n      for (var i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n      }\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n      var IL = I.slice(0, 32);\n      var IR = I.slice(32);\n      // The private key\n      var ki = null;\n      // The public key\n      var Ki = null;\n      if (this.privateKey) {\n        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n      } else {\n        var ek = new SigningKey(hexlify(IL));\n        Ki = ek._addPoint(this.publicKey);\n      }\n      var mnemonicOrPath = path;\n      var srcMnemonic = this.mnemonic;\n      if (srcMnemonic) {\n        mnemonicOrPath = Object.freeze({\n          phrase: srcMnemonic.phrase,\n          path: path,\n          locale: srcMnemonic.locale || \"en\"\n        });\n      }\n      return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      var components = path.split(\"/\");\n      if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n        throw new Error(\"invalid path - \" + path);\n      }\n      if (components[0] === \"m\") {\n        components.shift();\n      }\n      var result = this;\n      for (var i = 0; i < components.length; i++) {\n        var component = components[i];\n        if (component.match(/^[0-9]+'$/)) {\n          var index = parseInt(component.substring(0, component.length - 1));\n          if (index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n          result = result._derive(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n          var _index = parseInt(component);\n          if (_index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n          result = result._derive(_index);\n        } else {\n          throw new Error(\"invalid path component - \" + component);\n        }\n      }\n      return result;\n    }\n  }], [{\n    key: \"_fromSeed\",\n    value: function _fromSeed(seed, mnemonic) {\n      var seedArray = arrayify(seed);\n      if (seedArray.length < 16 || seedArray.length > 64) {\n        throw new Error(\"invalid seed\");\n      }\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n      return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, password, wordlist) {\n      // If a locale name was passed in, find the associated wordlist\n      wordlist = getWordlist(wordlist);\n      // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n        phrase: mnemonic,\n        path: \"m\",\n        locale: wordlist.locale\n      });\n    }\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return HDNode._fromSeed(seed, null);\n    }\n  }, {\n    key: \"fromExtendedKey\",\n    value: function fromExtendedKey(extendedKey) {\n      var bytes = Base58.decode(extendedKey);\n      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n        logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n      }\n      var depth = bytes[4];\n      var parentFingerprint = hexlify(bytes.slice(5, 9));\n      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n      var chainCode = hexlify(bytes.slice(13, 45));\n      var key = bytes.slice(45, 78);\n      switch (hexlify(bytes.slice(0, 4))) {\n        // Public Key\n        case \"0x0488b21e\":\n        case \"0x043587cf\":\n          return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n        // Private Key\n        case \"0x0488ade4\":\n        case \"0x04358394 \":\n          if (key[0] !== 0) {\n            break;\n          }\n          return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n      }\n      return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n  }]);\n  return HDNode;\n}();\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n  var salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  var words = wordlist.split(mnemonic);\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n  var entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  var offset = 0;\n  for (var i = 0; i < words.length; i++) {\n    var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n    for (var bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n      offset++;\n    }\n  }\n  var entropyBits = 32 * words.length / 3;\n  var checksumBits = words.length / 3;\n  var checksumMask = getUpperMask(checksumBits);\n  var checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n  var indices = [0];\n  var remainingBits = 11;\n  for (var i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  }\n  // Compute the checksum bits\n  var checksumBits = entropy.length / 4;\n  var checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(function (index) {\n    return wordlist.getWord(index);\n  }));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}","map":{"version":3,"mappings":"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","names":["Base58","arrayify","concat","hexDataSlice","hexZeroPad","hexlify","BigNumber","toUtf8Bytes","UnicodeNormalizationForm","pbkdf2","defineReadOnly","SigningKey","computeHmac","ripemd160","sha256","SupportedAlgorithm","computeAddress","wordlists","Logger","version","logger","N","from","MasterSecret","HardenedBit","getUpperMask","bits","getLowerMask","bytes32","value","base58check","data","encode","getWordlist","wordlist","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","Error","signingKey","compressedPublicKey","path","String","Uint8Array","set","i","I","sha512","IL","slice","IR","ki","Ki","add","mod","ek","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","components","split","length","shift","result","component","match","parseInt","substring","_derive","seed","seedArray","password","entropyToMnemonic","mnemonicToEntropy","_fromSeed","mnemonicToSeed","extendedKey","bytes","decode","key","salt","NFKD","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","push","join","map","getWord","isValidMnemonic","error","getAccountPath"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/hdnode/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n\nconst HardenedBit = 0x80000000;\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return (1 << bits) - 1;\n}\n\nfunction bytes32(value: BigNumber | Uint8Array): string {\n    return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nfunction getWordlist(wordlist: string | Wordlist): Wordlist {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n\n    if (typeof(wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n\n    return wordlist;\n}\n\nconst _constructorGuard: any = {};\n\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n};\n\nexport class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n\n    readonly address: string;\n\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n\n    readonly chainCode: string;\n\n    readonly index: number;\n    readonly depth: number;\n\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string) {\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n        defineReadOnly(this, \"chainCode\", chainCode);\n\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n\n        } else if (typeof(mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n\n        } else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        if (this.depth >= 256) { throw new Error(\"Depth too large!\"); }\n\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\": \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([ \"0x00\", this.privateKey ]): this.publicKey),\n        ]));\n    }\n\n    neuter(): HDNode {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n\n    private _derive(index: number): HDNode {\n        if (index > 0xffffffff) { throw new Error(\"invalid index - \" + String(index)); }\n\n        // Base path\n        let path = this.path;\n        if (path) { path += \"/\" + (index & ~HardenedBit); }\n\n        const data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n\n            // Hardened path\n            if (path) { path += \"'\"; }\n\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n\n        // The private key\n        let ki: string = null\n\n        // The public key\n        let Ki: string = null;\n\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n\n        let mnemonicOrPath: Mnemonic | string = path;\n\n        const srcMnemonic =  this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n\n    derivePath(path: string): HDNode {\n        const components = path.split(\"/\");\n\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") { components.shift(); }\n\n        let result: HDNode = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n\n        return result;\n    }\n\n\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode {\n        const seedArray: Uint8Array = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) { throw new Error(\"invalid seed\"); }\n\n        const I: Uint8Array = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode {\n\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n\n    static fromSeed(seed: BytesLike): HDNode {\n        return HDNode._fromSeed(seed, null);\n    }\n\n    static fromExtendedKey(extendedKey: string): HDNode {\n        const bytes = Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\n\nexport function mnemonicToSeed(mnemonic: string, password?: string): string {\n    if (!password) { password = \"\"; }\n\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\n\nexport function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    logger.checkNormalize();\n\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) { throw new Error(\"invalid mnemonic\"); }\n\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) { throw new Error(\"invalid mnemonic\"); }\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexport function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    entropy = arrayify(entropy);\n\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nexport function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getAccountPath(index: number): string {\n    if (typeof(index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${ index }'/0/0`;\n}\n"]},"metadata":{},"sourceType":"module"}