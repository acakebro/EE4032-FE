{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var Formatter = /*#__PURE__*/function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n  _createClass(Formatter, [{\n    key: \"getDefaultFormats\",\n    value: function getDefaultFormats() {\n      var _this = this;\n      var formats = {};\n      var address = this.address.bind(this);\n      var bigNumber = this.bigNumber.bind(this);\n      var blockTag = this.blockTag.bind(this);\n      var data = this.data.bind(this);\n      var hash = this.hash.bind(this);\n      var hex = this.hex.bind(this);\n      var number = this.number.bind(this);\n      var type = this.type.bind(this);\n      var strictData = function strictData(v) {\n        return _this.data(v, true);\n      };\n      formats.transaction = {\n        hash: hash,\n        type: type,\n        accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        blockHash: Formatter.allowNull(hash, null),\n        blockNumber: Formatter.allowNull(number, null),\n        transactionIndex: Formatter.allowNull(number, null),\n        confirmations: Formatter.allowNull(number, null),\n        from: address,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n        // must be set\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        gasLimit: bigNumber,\n        to: Formatter.allowNull(address, null),\n        value: bigNumber,\n        nonce: number,\n        data: data,\n        r: Formatter.allowNull(this.uint256),\n        s: Formatter.allowNull(this.uint256),\n        v: Formatter.allowNull(number),\n        creates: Formatter.allowNull(address, null),\n        raw: Formatter.allowNull(data)\n      };\n      formats.transactionRequest = {\n        from: Formatter.allowNull(address),\n        nonce: Formatter.allowNull(number),\n        gasLimit: Formatter.allowNull(bigNumber),\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        to: Formatter.allowNull(address),\n        value: Formatter.allowNull(bigNumber),\n        data: Formatter.allowNull(strictData),\n        type: Formatter.allowNull(number),\n        accessList: Formatter.allowNull(this.accessList.bind(this), null)\n      };\n      formats.receiptLog = {\n        transactionIndex: number,\n        blockNumber: number,\n        transactionHash: hash,\n        address: address,\n        topics: Formatter.arrayOf(hash),\n        data: data,\n        logIndex: number,\n        blockHash: hash\n      };\n      formats.receipt = {\n        to: Formatter.allowNull(this.address, null),\n        from: Formatter.allowNull(this.address, null),\n        contractAddress: Formatter.allowNull(address, null),\n        transactionIndex: number,\n        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n        root: Formatter.allowNull(hex),\n        gasUsed: bigNumber,\n        logsBloom: Formatter.allowNull(data),\n        blockHash: hash,\n        transactionHash: hash,\n        logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n        blockNumber: number,\n        confirmations: Formatter.allowNull(number, null),\n        cumulativeGasUsed: bigNumber,\n        effectiveGasPrice: Formatter.allowNull(bigNumber),\n        status: Formatter.allowNull(number),\n        type: type\n      };\n      formats.block = {\n        hash: Formatter.allowNull(hash),\n        parentHash: hash,\n        number: number,\n        timestamp: number,\n        nonce: Formatter.allowNull(hex),\n        difficulty: this.difficulty.bind(this),\n        gasLimit: bigNumber,\n        gasUsed: bigNumber,\n        miner: Formatter.allowNull(address),\n        extraData: data,\n        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        baseFeePerGas: Formatter.allowNull(bigNumber)\n      };\n      formats.blockWithTransactions = shallowCopy(formats.block);\n      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n      formats.filter = {\n        fromBlock: Formatter.allowNull(blockTag, undefined),\n        toBlock: Formatter.allowNull(blockTag, undefined),\n        blockHash: Formatter.allowNull(hash, undefined),\n        address: Formatter.allowNull(address, undefined),\n        topics: Formatter.allowNull(this.topics.bind(this), undefined)\n      };\n      formats.filterLog = {\n        blockNumber: Formatter.allowNull(number),\n        blockHash: Formatter.allowNull(hash),\n        transactionIndex: number,\n        removed: Formatter.allowNull(this.boolean.bind(this)),\n        address: address,\n        data: Formatter.allowFalsish(data, \"0x\"),\n        topics: Formatter.arrayOf(hash),\n        transactionHash: hash,\n        logIndex: number\n      };\n      return formats;\n    }\n  }, {\n    key: \"accessList\",\n    value: function accessList(_accessList) {\n      return accessListify(_accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n  }, {\n    key: \"number\",\n    value: function number(_number) {\n      if (_number === \"0x\") {\n        return 0;\n      }\n      return BigNumber.from(_number).toNumber();\n    }\n  }, {\n    key: \"type\",\n    value: function type(number) {\n      if (number === \"0x\" || number == null) {\n        return 0;\n      }\n      return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"bigNumber\",\n    value: function bigNumber(value) {\n      return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n  }, {\n    key: \"boolean\",\n    value: function boolean(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        value = value.toLowerCase();\n        if (value === \"true\") {\n          return true;\n        }\n        if (value === \"false\") {\n          return false;\n        }\n      }\n      throw new Error(\"invalid boolean - \" + value);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex(value, strict) {\n      if (typeof value === \"string\") {\n        if (!strict && value.substring(0, 2) !== \"0x\") {\n          value = \"0x\" + value;\n        }\n        if (isHexString(value)) {\n          return value.toLowerCase();\n        }\n      }\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n  }, {\n    key: \"data\",\n    value: function data(value, strict) {\n      var result = this.hex(value, strict);\n      if (result.length % 2 !== 0) {\n        throw new Error(\"invalid data; odd-length - \" + value);\n      }\n      return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n  }, {\n    key: \"address\",\n    value: function address(value) {\n      return getAddress(value);\n    }\n  }, {\n    key: \"callAddress\",\n    value: function callAddress(value) {\n      if (!isHexString(value, 32)) {\n        return null;\n      }\n      var address = getAddress(hexDataSlice(value, 12));\n      return address === AddressZero ? null : address;\n    }\n  }, {\n    key: \"contractAddress\",\n    value: function contractAddress(value) {\n      return getContractAddress(value);\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"blockTag\",\n    value: function blockTag(_blockTag) {\n      if (_blockTag == null) {\n        return \"latest\";\n      }\n      if (_blockTag === \"earliest\") {\n        return \"0x0\";\n      }\n      switch (_blockTag) {\n        case \"earliest\":\n          return \"0x0\";\n        case \"latest\":\n        case \"pending\":\n        case \"safe\":\n        case \"finalized\":\n          return _blockTag;\n      }\n      if (typeof _blockTag === \"number\" || isHexString(_blockTag)) {\n        return hexValue(_blockTag);\n      }\n      throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n  }, {\n    key: \"hash\",\n    value: function hash(value, strict) {\n      var result = this.hex(value, strict);\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n      return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(value) {\n      if (value == null) {\n        return null;\n      }\n      var v = BigNumber.from(value);\n      try {\n        return v.toNumber();\n      } catch (error) {}\n      return null;\n    }\n  }, {\n    key: \"uint256\",\n    value: function uint256(value) {\n      if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n      }\n      return hexZeroPad(value, 32);\n    }\n  }, {\n    key: \"_block\",\n    value: function _block(value, format) {\n      if (value.author != null && value.miner == null) {\n        value.miner = value.author;\n      }\n      // The difficulty may need to come from _difficulty in recursed blocks\n      var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n      var result = Formatter.check(format, value);\n      result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n      return result;\n    }\n  }, {\n    key: \"block\",\n    value: function block(value) {\n      return this._block(value, this.formats.block);\n    }\n  }, {\n    key: \"blockWithTransactions\",\n    value: function blockWithTransactions(value) {\n      return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n  }, {\n    key: \"transactionRequest\",\n    value: function transactionRequest(value) {\n      return Formatter.check(this.formats.transactionRequest, value);\n    }\n  }, {\n    key: \"transactionResponse\",\n    value: function transactionResponse(transaction) {\n      // Rename gas to gasLimit\n      if (transaction.gas != null && transaction.gasLimit == null) {\n        transaction.gasLimit = transaction.gas;\n      }\n      // Some clients (TestRPC) do strange things like return 0x0 for the\n      // 0 address; correct this to be a real address\n      if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n        transaction.to = \"0x0000000000000000000000000000000000000000\";\n      }\n      // Rename input to data\n      if (transaction.input != null && transaction.data == null) {\n        transaction.data = transaction.input;\n      }\n      // If to and creates are empty, populate the creates from the transaction\n      if (transaction.to == null && transaction.creates == null) {\n        transaction.creates = this.contractAddress(transaction);\n      }\n      if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n        transaction.accessList = [];\n      }\n      var result = Formatter.check(this.formats.transaction, transaction);\n      if (transaction.chainId != null) {\n        var chainId = transaction.chainId;\n        if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n        }\n        result.chainId = chainId;\n      } else {\n        var _chainId = transaction.networkId;\n        // geth-etc returns chainId\n        if (_chainId == null && result.v == null) {\n          _chainId = transaction.chainId;\n        }\n        if (isHexString(_chainId)) {\n          _chainId = BigNumber.from(_chainId).toNumber();\n        }\n        if (typeof _chainId !== \"number\" && result.v != null) {\n          _chainId = (result.v - 35) / 2;\n          if (_chainId < 0) {\n            _chainId = 0;\n          }\n          _chainId = parseInt(_chainId);\n        }\n        if (typeof _chainId !== \"number\") {\n          _chainId = 0;\n        }\n        result.chainId = _chainId;\n      }\n      // 0x0000... should actually be null\n      if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n        result.blockHash = null;\n      }\n      return result;\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(value) {\n      return parseTransaction(value);\n    }\n  }, {\n    key: \"receiptLog\",\n    value: function receiptLog(value) {\n      return Formatter.check(this.formats.receiptLog, value);\n    }\n  }, {\n    key: \"receipt\",\n    value: function receipt(value) {\n      var result = Formatter.check(this.formats.receipt, value);\n      // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n      if (result.root != null) {\n        if (result.root.length <= 4) {\n          // Could be 0x00, 0x0, 0x01 or 0x1\n          var _value = BigNumber.from(result.root).toNumber();\n          if (_value === 0 || _value === 1) {\n            // Make sure if both are specified, they match\n            if (result.status != null && result.status !== _value) {\n              logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                root: result.root,\n                status: result.status\n              });\n            }\n            result.status = _value;\n            delete result.root;\n          } else {\n            logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n          }\n        } else if (result.root.length !== 66) {\n          // Must be a valid bytes32\n          logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n        }\n      }\n      if (result.status != null) {\n        result.byzantium = true;\n      }\n      return result;\n    }\n  }, {\n    key: \"topics\",\n    value: function topics(value) {\n      var _this2 = this;\n      if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return _this2.topics(v);\n        });\n      } else if (value != null) {\n        return this.hash(value, true);\n      }\n      return null;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      return Formatter.check(this.formats.filter, value);\n    }\n  }, {\n    key: \"filterLog\",\n    value: function filterLog(value) {\n      return Formatter.check(this.formats.filterLog, value);\n    }\n  }], [{\n    key: \"check\",\n    value: function check(format, object) {\n      var result = {};\n      for (var key in format) {\n        try {\n          var value = format[key](object[key]);\n          if (value !== undefined) {\n            result[key] = value;\n          }\n        } catch (error) {\n          error.checkKey = key;\n          error.checkValue = object[key];\n          throw error;\n        }\n      }\n      return result;\n    }\n    // if value is null-ish, nullValue is returned\n  }, {\n    key: \"allowNull\",\n    value: function allowNull(format, nullValue) {\n      return function (value) {\n        if (value == null) {\n          return nullValue;\n        }\n        return format(value);\n      };\n    }\n    // If value is false-ish, replaceValue is returned\n  }, {\n    key: \"allowFalsish\",\n    value: function allowFalsish(format, replaceValue) {\n      return function (value) {\n        if (!value) {\n          return replaceValue;\n        }\n        return format(value);\n      };\n    }\n    // Requires an Array satisfying check\n  }, {\n    key: \"arrayOf\",\n    value: function arrayOf(format) {\n      return function (array) {\n        if (!Array.isArray(array)) {\n          throw new Error(\"not an array\");\n        }\n        var result = [];\n        array.forEach(function (value) {\n          result.push(format(value));\n        });\n        return result;\n      };\n    }\n  }]);\n  return Formatter;\n}();\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n}\n// Show the throttle message only once\nvar throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"mappings":"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","names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","error","format","author","_difficulty","check","_block","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/formatter.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\": case \"pending\": case \"safe\": case \"finalized\":\n                return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n"]},"metadata":{},"sourceType":"module"}