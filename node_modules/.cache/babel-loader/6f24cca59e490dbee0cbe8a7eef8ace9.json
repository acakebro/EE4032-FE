{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n  var _super = _createSuper(LogDescription);\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n  var _super2 = _createSuper(TransactionDescription);\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(TransactionDescription);\n}(Description);\nexport var ErrorDescription = /*#__PURE__*/function (_Description3) {\n  _inherits(ErrorDescription, _Description3);\n  var _super3 = _createSuper(ErrorDescription);\n  function ErrorDescription() {\n    _classCallCheck(this, ErrorDescription);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(ErrorDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description4) {\n  _inherits(Indexed, _Description4);\n  var _super4 = _createSuper(Indexed);\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n  return Indexed;\n}(Description);\nvar BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n    _classCallCheck(this, Interface);\n    var abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n        case \"error\":\n          bucket = _this.errors;\n          break;\n        default:\n          return;\n      }\n      var signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      });\n      // We need to re-bundle the JSON fragments a bit\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n      return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n  }, {\n    key: \"getFunction\",\n    value:\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n        return this.functions[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name2;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n        return this.events[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n      return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getError\",\n    value: function getError(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        var getSighash = getStatic(this.constructor, \"getSighash\");\n        for (var name in this.errors) {\n          var error = this.errors[name];\n          if (nameOrSignatureOrSighash === getSighash(error)) {\n            return this.errors[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name3 = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.errors).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name3;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching error\", \"name\", _name3);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching errors\", \"name\", _name3);\n        }\n        return this.errors[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      if (typeof fragment === \"string\") {\n        try {\n          fragment = this.getFunction(fragment);\n        } catch (error) {\n          try {\n            fragment = this.getError(fragment);\n          } catch (_) {\n            throw error;\n          }\n        }\n      }\n      return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n  }, {\n    key: \"decodeErrorResult\",\n    value: function decodeErrorResult(fragment, data) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n        logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n  }, {\n    key: \"encodeErrorResult\",\n    value: function encodeErrorResult(fragment, values) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      var reason = null;\n      var message = \"\";\n      var errorArgs = null;\n      var errorName = null;\n      var errorSignature = null;\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n          break;\n        case 4:\n          {\n            var selector = hexlify(bytes.slice(0, 4));\n            var builtin = BuiltinErrors[selector];\n            if (builtin) {\n              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n              errorName = builtin.name;\n              errorSignature = builtin.signature;\n              if (builtin.reason) {\n                reason = errorArgs[0];\n              }\n              if (errorName === \"Error\") {\n                message = \"; VM Exception while processing transaction: reverted with reason string \".concat(JSON.stringify(errorArgs[0]));\n              } else if (errorName === \"Panic\") {\n                message = \"; VM Exception while processing transaction: reverted with panic code \".concat(errorArgs[0]);\n              }\n            } else {\n              try {\n                var error = this.getError(selector);\n                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                errorName = error.name;\n                errorSignature = error.format();\n              } catch (error) {}\n            }\n            break;\n          }\n      }\n      return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        data: hexlify(data),\n        errorArgs: errorArgs,\n        errorName: errorName,\n        errorSignature: errorSignature,\n        reason: reason\n      });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n      var topics = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        }\n        if (param.type === \"bool\" && typeof value === \"boolean\") {\n          value = value ? \"0x01\" : \"0x00\";\n        }\n        if (param.type.match(/^u?int/)) {\n          value = BigNumber.from(value).toHexString();\n        }\n        // Check addresses are valid\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n        return hexZeroPad(hexlify(value), 32);\n      };\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n          return;\n        }\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      });\n      // Trim off trailing nulls\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TODO\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    }\n    // Decode a filter for the event and the search criteria\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n        topics = topics.slice(1);\n      }\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n      var result = [];\n      var nonIndexedIndex = 0,\n        indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n        // Add the keyword argument if named and safe\n        if (param.name && result[param.name] == null) {\n          var value = result[index];\n          // Make error named values throw on access\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              enumerable: true,\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      });\n      // Make all error indexed values throw on access\n      var _loop = function _loop(i) {\n        var value = result[i];\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            enumerable: true,\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n      return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n      if (!fragment || fragment.anonymous) {\n        return null;\n      }\n      // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe just a fragment?\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(data) {\n      var hexData = hexlify(data);\n      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new ErrorDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n        errorFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n  return Interface;\n}();","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","ErrorDescription","Indexed","value","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","fragments","abi","JSON","parse","map","fragment","from","filter","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","nameOrSignatureOrSighash","getSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","constructor","getFunction","getError","_","eventFragment","getEvent","params","data","_abiCoder","decode","values","encode","_encodeParams","bytes","slice","_decodeParams","functionFragment","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","match","toHexString","index","indexed","baseType","Array","isArray","pop","dataTypes","dataValues","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","i","freeze","tx","substring","args","log","topic","decodeEventLog","hexData","errorFragment","address","_isInterface"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/abi/src.ts/interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = (<EventFragment>eventFragment).inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}