{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nvar _constructorGuard = {};\nvar Zero = BigNumber.from(0);\nvar NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value !== undefined) {\n    params.value = value;\n  }\n  return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nvar zeros = \"0\";\nwhile (zeros.length < 256) {\n  zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n  if (typeof decimals !== \"number\") {\n    try {\n      decimals = BigNumber.from(decimals).toNumber();\n    } catch (e) {}\n  }\n  if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n    return \"1\" + zeros.substring(0, decimals);\n  }\n  return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n  var multiplier = getMultiplier(decimals);\n  // Make sure wei is a big number (convert as necessary)\n  value = BigNumber.from(value);\n  var negative = value.lt(Zero);\n  if (negative) {\n    value = value.mul(NegativeOne);\n  }\n  var fraction = value.mod(multiplier).toString();\n  while (fraction.length < multiplier.length - 1) {\n    fraction = \"0\" + fraction;\n  }\n  // Strip training 0\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  var whole = value.div(multiplier).toString();\n  if (multiplier.length === 1) {\n    value = whole;\n  } else {\n    value = whole + \".\" + fraction;\n  }\n  if (negative) {\n    value = \"-\" + value;\n  }\n  return value;\n}\nexport function parseFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n  var multiplier = getMultiplier(decimals);\n  if (typeof value !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n    logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n  }\n  // Is it negative?\n  var negative = value.substring(0, 1) === \"-\";\n  if (negative) {\n    value = value.substring(1);\n  }\n  if (value === \".\") {\n    logger.throwArgumentError(\"missing value\", \"value\", value);\n  }\n  // Split it into a whole and fractional part\n  var comps = value.split(\".\");\n  if (comps.length > 2) {\n    logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n  }\n  var whole = comps[0],\n    fraction = comps[1];\n  if (!whole) {\n    whole = \"0\";\n  }\n  if (!fraction) {\n    fraction = \"0\";\n  }\n  // Trim trailing zeros\n  while (fraction[fraction.length - 1] === \"0\") {\n    fraction = fraction.substring(0, fraction.length - 1);\n  }\n  // Check the fraction doesn't exceed our decimals size\n  if (fraction.length > multiplier.length - 1) {\n    throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n  }\n  // If decimals is 0, we have an empty string for fraction\n  if (fraction === \"\") {\n    fraction = \"0\";\n  }\n  // Fully pad the string with zeros to get to wei\n  while (fraction.length < multiplier.length - 1) {\n    fraction += \"0\";\n  }\n  var wholeValue = BigNumber.from(whole);\n  var fractionValue = BigNumber.from(fraction);\n  var wei = wholeValue.mul(multiplier).add(fractionValue);\n  if (negative) {\n    wei = wei.mul(NegativeOne);\n  }\n  return wei;\n}\nexport var FixedFormat = /*#__PURE__*/function () {\n  function FixedFormat(constructorGuard, signed, width, decimals) {\n    _classCallCheck(this, FixedFormat);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n    this.signed = signed;\n    this.width = width;\n    this.decimals = decimals;\n    this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    this._multiplier = getMultiplier(decimals);\n    Object.freeze(this);\n  }\n  _createClass(FixedFormat, null, [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof FixedFormat) {\n        return value;\n      }\n      if (typeof value === \"number\") {\n        value = \"fixed128x\".concat(value);\n      }\n      var signed = true;\n      var width = 128;\n      var decimals = 18;\n      if (typeof value === \"string\") {\n        if (value === \"fixed\") {\n          // defaults...\n        } else if (value === \"ufixed\") {\n          signed = false;\n        } else {\n          var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n          if (!match) {\n            logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n          }\n          signed = match[1] !== \"u\";\n          width = parseInt(match[2]);\n          decimals = parseInt(match[3]);\n        }\n      } else if (value) {\n        var check = function check(key, type, defaultValue) {\n          if (value[key] == null) {\n            return defaultValue;\n          }\n          if (typeof value[key] !== type) {\n            logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n          }\n          return value[key];\n        };\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n      }\n      if (width % 8) {\n        logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n      }\n      if (decimals > 80) {\n        logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n      }\n      return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n  }]);\n  return FixedFormat;\n}();\nexport var FixedNumber = /*#__PURE__*/function () {\n  function FixedNumber(constructorGuard, hex, value, format) {\n    _classCallCheck(this, FixedNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n    this.format = format;\n    this._hex = hex;\n    this._value = value;\n    this._isFixedNumber = true;\n    Object.freeze(this);\n  }\n  _createClass(FixedNumber, [{\n    key: \"_checkFormat\",\n    value: function _checkFormat(other) {\n      if (this.format.name !== other.format.name) {\n        logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n      }\n    }\n  }, {\n    key: \"addUnsafe\",\n    value: function addUnsafe(other) {\n      this._checkFormat(other);\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"subUnsafe\",\n    value: function subUnsafe(other) {\n      this._checkFormat(other);\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"mulUnsafe\",\n    value: function mulUnsafe(other) {\n      this._checkFormat(other);\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"divUnsafe\",\n    value: function divUnsafe(other) {\n      this._checkFormat(other);\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      var comps = this.toString().split(\".\");\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n      var result = FixedNumber.from(comps[0], this.format);\n      var hasFraction = !comps[1].match(/^(0*)$/);\n      if (this.isNegative() && hasFraction) {\n        result = result.subUnsafe(ONE.toFormat(result.format));\n      }\n      return result;\n    }\n  }, {\n    key: \"ceiling\",\n    value: function ceiling() {\n      var comps = this.toString().split(\".\");\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n      var result = FixedNumber.from(comps[0], this.format);\n      var hasFraction = !comps[1].match(/^(0*)$/);\n      if (!this.isNegative() && hasFraction) {\n        result = result.addUnsafe(ONE.toFormat(result.format));\n      }\n      return result;\n    }\n    // @TODO: Support other rounding algorithms\n  }, {\n    key: \"round\",\n    value: function round(decimals) {\n      if (decimals == null) {\n        decimals = 0;\n      }\n      // If we are already in range, we're done\n      var comps = this.toString().split(\".\");\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n      if (decimals < 0 || decimals > 80 || decimals % 1) {\n        logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n      }\n      if (comps[1].length <= decimals) {\n        return this;\n      }\n      var factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n      var bump = BUMP.toFormat(this.format);\n      return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this._value === \"0.0\" || this._value === \"0\";\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._value[0] === \"-\";\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._value;\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString(width) {\n      if (width == null) {\n        return this._hex;\n      }\n      if (width % 8) {\n        logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n      }\n      var hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n      return hexZeroPad(hex, width / 8);\n    }\n  }, {\n    key: \"toUnsafeFloat\",\n    value: function toUnsafeFloat() {\n      return parseFloat(this.toString());\n    }\n  }, {\n    key: \"toFormat\",\n    value: function toFormat(format) {\n      return FixedNumber.fromString(this._value, format);\n    }\n  }], [{\n    key: \"fromValue\",\n    value: function fromValue(value, decimals, format) {\n      // If decimals looks more like a format, and there is no format, shift the parameters\n      if (format == null && decimals != null && !isBigNumberish(decimals)) {\n        format = decimals;\n        decimals = null;\n      }\n      if (decimals == null) {\n        decimals = 0;\n      }\n      if (format == null) {\n        format = \"fixed\";\n      }\n      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value, format) {\n      if (format == null) {\n        format = \"fixed\";\n      }\n      var fixedFormat = FixedFormat.from(format);\n      var numeric = parseFixed(value, fixedFormat.decimals);\n      if (!fixedFormat.signed && numeric.lt(Zero)) {\n        throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n      }\n      var hex = null;\n      if (fixedFormat.signed) {\n        hex = numeric.toTwos(fixedFormat.width).toHexString();\n      } else {\n        hex = numeric.toHexString();\n        hex = hexZeroPad(hex, fixedFormat.width / 8);\n      }\n      var decimal = formatFixed(numeric, fixedFormat.decimals);\n      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n  }, {\n    key: \"fromBytes\",\n    value: function fromBytes(value, format) {\n      if (format == null) {\n        format = \"fixed\";\n      }\n      var fixedFormat = FixedFormat.from(format);\n      if (arrayify(value).length > fixedFormat.width / 8) {\n        throw new Error(\"overflow\");\n      }\n      var numeric = BigNumber.from(value);\n      if (fixedFormat.signed) {\n        numeric = numeric.fromTwos(fixedFormat.width);\n      }\n      var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n      var decimal = formatFixed(numeric, fixedFormat.decimals);\n      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n  }, {\n    key: \"from\",\n    value: function from(value, format) {\n      if (typeof value === \"string\") {\n        return FixedNumber.fromString(value, format);\n      }\n      if (isBytes(value)) {\n        return FixedNumber.fromBytes(value, format);\n      }\n      try {\n        return FixedNumber.fromValue(value, 0, format);\n      } catch (error) {\n        // Allow NUMERIC_FAULT to bubble up\n        if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n          throw error;\n        }\n      }\n      return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isFixedNumber\",\n    value: function isFixedNumber(value) {\n      return !!(value && value._isFixedNumber);\n    }\n  }]);\n  return FixedNumber;\n}();\nvar ONE = FixedNumber.from(1);\nvar BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"mappings":"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","names":["arrayify","hexZeroPad","isBytes","Logger","version","logger","BigNumber","isBigNumberish","_constructorGuard","Zero","from","NegativeOne","throwFault","message","fault","operation","value","params","undefined","throwError","errors","NUMERIC_FAULT","zeros","length","getMultiplier","decimals","toNumber","e","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","wholeValue","fractionValue","wei","add","FixedFormat","constructorGuard","signed","width","UNSUPPORTED_OPERATION","name","String","_multiplier","Object","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","_hex","_value","_isFixedNumber","other","_checkFormat","a","b","fromValue","sub","push","result","hasFraction","isNegative","subUnsafe","ONE","toFormat","addUnsafe","factor","bump","BUMP","mulUnsafe","floor","divUnsafe","fromTwos","toTwos","toHexString","parseFloat","fromString","fixedFormat","numeric","decimal","Error","fromBytes","error","code","INVALID_ARGUMENT"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") { fraction = \"0\"; }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n"]},"metadata":{},"sourceType":"module"}