{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(InfuraWebSocketProvider, _WebSocketProvider);\n  var _super = _createSuper(InfuraWebSocketProvider);\n  function InfuraWebSocketProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, InfuraWebSocketProvider);\n    var provider = new InfuraProvider(network, apiKey);\n    var connection = provider.connection;\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n    var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    _this = _super.call(this, url, network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectId\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectSecret\", provider.projectSecret);\n    return _this;\n  }\n  _createClass(InfuraWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }]);\n  return InfuraWebSocketProvider;\n}(WebSocketProvider);\nexport var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(InfuraProvider, _UrlJsonRpcProvider);\n  var _super2 = _createSuper(InfuraProvider);\n  function InfuraProvider() {\n    _classCallCheck(this, InfuraProvider);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(InfuraProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new InfuraWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        apiKey: defaultProjectId,\n        projectId: defaultProjectId,\n        projectSecret: null\n      };\n      if (apiKey == null) {\n        return apiKeyObj;\n      }\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.projectId = apiKey;\n      } else if (apiKey.projectSecret != null) {\n        logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n        logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n        apiKeyObj.projectId = apiKey.projectId;\n        apiKeyObj.projectSecret = apiKey.projectSecret;\n      } else if (apiKey.projectId) {\n        apiKeyObj.projectId = apiKey.projectId;\n      }\n      apiKeyObj.apiKey = apiKeyObj.projectId;\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"mainnet.infura.io\";\n          break;\n        case \"ropsten\":\n          host = \"ropsten.infura.io\";\n          break;\n        case \"rinkeby\":\n          host = \"rinkeby.infura.io\";\n          break;\n        case \"kovan\":\n          host = \"kovan.infura.io\";\n          break;\n        case \"goerli\":\n          host = \"goerli.infura.io\";\n          break;\n        case \"sepolia\":\n          host = \"sepolia.infura.io\";\n          break;\n        case \"matic\":\n          host = \"polygon-mainnet.infura.io\";\n          break;\n        case \"maticmum\":\n          host = \"polygon-mumbai.infura.io\";\n          break;\n        case \"optimism\":\n          host = \"optimism-mainnet.infura.io\";\n          break;\n        case \"optimism-kovan\":\n          host = \"optimism-kovan.infura.io\";\n          break;\n        case \"arbitrum\":\n          host = \"arbitrum-mainnet.infura.io\";\n          break;\n        case \"arbitrum-rinkeby\":\n          host = \"arbitrum-rinkeby.infura.io\";\n          break;\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n      var connection = {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey.projectId === defaultProjectId) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n      if (apiKey.projectSecret != null) {\n        connection.user = \"\";\n        connection.password = apiKey.projectSecret;\n      }\n      return connection;\n    }\n  }]);\n  return InfuraProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"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","names":["defineReadOnly","WebSocketProvider","showThrottleMessage","Logger","version","logger","UrlJsonRpcProvider","defaultProjectId","InfuraWebSocketProvider","network","apiKey","provider","InfuraProvider","connection","password","throwError","errors","UNSUPPORTED_OPERATION","operation","url","replace","projectId","projectSecret","apiKeyObj","assertArgument","host","name","INVALID_ARGUMENT","argument","value","allowGzip","throttleCallback","attempt","Promise","resolve","user"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/infura-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"sepolia\":\n                host = \"sepolia.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}