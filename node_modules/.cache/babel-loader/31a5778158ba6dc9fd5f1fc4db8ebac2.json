{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _assertThisInitialized from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nvar NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport var WebSocketProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(WebSocketProvider, _JsonRpcProvider);\n  var _super = _createSuper(WebSocketProvider);\n  function WebSocketProvider(url, network) {\n    var _thisSuper, _this;\n    _classCallCheck(this, WebSocketProvider);\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n    if (typeof url === \"string\") {\n      _this = _super.call(this, url, network);\n    } else {\n      _this = _super.call(this, \"_websocket\", network);\n    }\n    _this._pollingInterval = -1;\n    _this._wsReady = false;\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_websocket\", new WebSocket(_this.connection.url));\n    } else {\n      defineReadOnly(_assertThisInitialized(_this), \"_websocket\", url);\n    }\n    defineReadOnly(_assertThisInitialized(_this), \"_requests\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subs\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subIds\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_detectNetwork\", _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WebSocketProvider.prototype)), \"detectNetwork\", _thisSuper).call(_thisSuper));\n    // Stall sending requests until the socket is open...\n    _this.websocket.onopen = function () {\n      _this._wsReady = true;\n      Object.keys(_this._requests).forEach(function (id) {\n        _this.websocket.send(_this._requests[id].payload);\n      });\n    };\n    _this.websocket.onmessage = function (messageEvent) {\n      var data = messageEvent.data;\n      var result = JSON.parse(data);\n      if (result.id != null) {\n        var id = String(result.id);\n        var request = _this._requests[id];\n        delete _this._requests[id];\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          _this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: _assertThisInitialized(_this)\n          });\n        } else {\n          var error = null;\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n          request.callback(error, undefined);\n          _this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: _assertThisInitialized(_this)\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        var sub = _this._subs[result.params.subscription];\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    };\n    // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n    var fauxPoll = setInterval(function () {\n      _this.emit(\"poll\");\n    }, 1000);\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n    return _possibleConstructorReturn(_this);\n  }\n  // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n  _createClass(WebSocketProvider, [{\n    key: \"websocket\",\n    get: function get() {\n      return this._websocket;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return this._detectNetwork;\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {\n      logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPollingInterval\"\n      });\n    }\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resetEventBlock\"\n      });\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", null);\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"polling\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPolling\"\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this2 = this;\n      var rid = NextId++;\n      return new Promise(function (resolve, reject) {\n        function callback(error, result) {\n          if (error) {\n            return reject(error);\n          }\n          return resolve(result);\n        }\n        var payload = JSON.stringify({\n          method: method,\n          params: params,\n          id: rid,\n          jsonrpc: \"2.0\"\n        });\n        _this2.emit(\"debug\", {\n          action: \"request\",\n          request: JSON.parse(payload),\n          provider: _this2\n        });\n        _this2._requests[String(rid)] = {\n          callback: callback,\n          payload: payload\n        };\n        if (_this2._wsReady) {\n          _this2.websocket.send(payload);\n        }\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(tag, param, processFunc) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this3 = this;\n        var subIdPromise, subId;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                subIdPromise = this._subIds[tag];\n                if (subIdPromise == null) {\n                  subIdPromise = Promise.all(param).then(function (param) {\n                    return _this3.send(\"eth_subscribe\", param);\n                  });\n                  this._subIds[tag] = subIdPromise;\n                }\n                _context2.next = 4;\n                return subIdPromise;\n              case 4:\n                subId = _context2.sent;\n                this._subs[subId] = {\n                  tag: tag,\n                  processFunc: processFunc\n                };\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      var _this4 = this;\n      switch (event.type) {\n        case \"block\":\n          this._subscribe(\"block\", [\"newHeads\"], function (result) {\n            var blockNumber = BigNumber.from(result.number).toNumber();\n            _this4._emitted.block = blockNumber;\n            _this4.emit(\"block\", blockNumber);\n          });\n          break;\n        case \"pending\":\n          this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n            _this4.emit(\"pending\", result);\n          });\n          break;\n        case \"filter\":\n          this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n            if (result.removed == null) {\n              result.removed = false;\n            }\n            _this4.emit(event.filter, _this4.formatter.filterLog(result));\n          });\n          break;\n        case \"tx\":\n          {\n            var emitReceipt = function emitReceipt(event) {\n              var hash = event.hash;\n              _this4.getTransactionReceipt(hash).then(function (receipt) {\n                if (!receipt) {\n                  return;\n                }\n                _this4.emit(hash, receipt);\n              });\n            };\n            // In case it is already mined\n            emitReceipt(event);\n            // To keep things simple, we start up a single newHeads subscription\n            // to keep an eye out for transactions we are watching for.\n            // Starting a subscription for an event (i.e. \"tx\") that is already\n            // running is (basically) a nop.\n            this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n              _this4._events.filter(function (e) {\n                return e.type === \"tx\";\n              }).forEach(emitReceipt);\n            });\n            break;\n          }\n        // Nothing is needed\n        case \"debug\":\n        case \"poll\":\n        case \"willPoll\":\n        case \"didPoll\":\n        case \"error\":\n          break;\n        default:\n          console.log(\"unhandled:\", event);\n          break;\n      }\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      var _this5 = this;\n      var tag = event.tag;\n      if (event.type === \"tx\") {\n        // There are remaining transaction event listeners\n        if (this._events.filter(function (e) {\n          return e.type === \"tx\";\n        }).length) {\n          return;\n        }\n        tag = \"tx\";\n      } else if (this.listenerCount(event.event)) {\n        // There are remaining event listeners\n        return;\n      }\n      var subId = this._subIds[tag];\n      if (!subId) {\n        return;\n      }\n      delete this._subIds[tag];\n      subId.then(function (subId) {\n        if (!_this5._subs[subId]) {\n          return;\n        }\n        delete _this5._subs[subId];\n        _this5.send(\"eth_unsubscribe\", [subId]);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this6 = this;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.websocket.readyState === WebSocket.CONNECTING)) {\n                  _context3.next = 3;\n                  break;\n                }\n                _context3.next = 3;\n                return new Promise(function (resolve) {\n                  _this6.websocket.onopen = function () {\n                    resolve(true);\n                  };\n                  _this6.websocket.onerror = function () {\n                    resolve(false);\n                  };\n                });\n              case 3:\n                // Hangup\n                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n                this.websocket.close(1000);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"ws:/\\/localhost:8546\";\n    }\n  }]);\n  return WebSocketProvider;\n}(JsonRpcProvider);","map":{"version":3,"mappings":"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","names":["BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","value","blockNumber","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","subId","event","type","_subscribe","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","length","listenerCount","readyState","CONNECTING","onerror","close"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/websocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: ((...args: Array<any>) => any) | null;\n    onmessage: ((...args: Array<any>) => any) | null;\n    onerror: ((...args: Array<any>) => any) | null;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}