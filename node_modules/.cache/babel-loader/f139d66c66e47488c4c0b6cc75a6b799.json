{"ast":null,"code":"import _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport var JsonRpcBatchProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(JsonRpcBatchProvider, _JsonRpcProvider);\n  var _super = _createSuper(JsonRpcBatchProvider);\n  function JsonRpcBatchProvider() {\n    _classCallCheck(this, JsonRpcBatchProvider);\n    return _super.apply(this, arguments);\n  }\n  _createClass(JsonRpcBatchProvider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      var _this = this;\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      if (this._pendingBatch == null) {\n        this._pendingBatch = [];\n      }\n      var inflightRequest = {\n        request: request,\n        resolve: null,\n        reject: null\n      };\n      var promise = new Promise(function (resolve, reject) {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n      this._pendingBatch.push(inflightRequest);\n      if (!this._pendingBatchAggregator) {\n        // Schedule batch for next event loop + short duration\n        this._pendingBatchAggregator = setTimeout(function () {\n          // Get teh current batch and clear it, so new requests\n          // go into the next batch\n          var batch = _this._pendingBatch;\n          _this._pendingBatch = null;\n          _this._pendingBatchAggregator = null;\n          // Get the request as an array of requests\n          var request = batch.map(function (inflight) {\n            return inflight.request;\n          });\n          _this.emit(\"debug\", {\n            action: \"requestBatch\",\n            request: deepCopy(request),\n            provider: _this\n          });\n          return fetchJson(_this.connection, JSON.stringify(request)).then(function (result) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              request: request,\n              response: result,\n              provider: _this\n            });\n            // For each result, feed it to the correct Promise, depending\n            // on whether it was a success or error\n            batch.forEach(function (inflightRequest, index) {\n              var payload = result[index];\n              if (payload.error) {\n                var error = new Error(payload.error.message);\n                error.code = payload.error.code;\n                error.data = payload.error.data;\n                inflightRequest.reject(error);\n              } else {\n                inflightRequest.resolve(payload.result);\n              }\n            });\n          }, function (error) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              error: error,\n              request: request,\n              provider: _this\n            });\n            batch.forEach(function (inflightRequest) {\n              inflightRequest.reject(error);\n            });\n          });\n        }, 10);\n      }\n      return promise;\n    }\n  }]);\n  return JsonRpcBatchProvider;\n}(JsonRpcProvider);","map":{"version":3,"mappings":"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","names":["deepCopy","fetchJson","JsonRpcProvider","JsonRpcBatchProvider","method","params","request","id","_nextId","jsonrpc","_pendingBatch","inflightRequest","resolve","reject","promise","Promise","push","_pendingBatchAggregator","setTimeout","batch","map","inflight","emit","action","provider","connection","JSON","stringify","then","result","response","forEach","index","payload","error","Error","message","code","data"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts"],"sourcesContent":["\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}