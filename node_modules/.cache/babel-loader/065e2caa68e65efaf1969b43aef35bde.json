{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nvar _globalLogger = null;\nfunction _checkNormalize() {\n  try {\n    var missing = [];\n    // Make sure all forms of normalization are supported\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n  return null;\n}\nvar _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n  // Not Implemented\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n  // Unsupported Operation\n  //   - operation\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n  // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n  // Some sort of bad response from the server\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n  // Timeout\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n  ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n  // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n  ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n  // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n  // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n  // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n  ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n  // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n  // Nonce has already been used\n  //   - transaction: the transaction attempted\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n  // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n  // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n  // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n  ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nvar HEX = \"0123456789abcdef\";\nexport var Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n      if (!params) {\n        params = {};\n      }\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        var value = params[key];\n        try {\n          if (value instanceof Uint8Array) {\n            var hex = \"\";\n            for (var i = 0; i < value.length; i++) {\n              hex += HEX[value[i] >> 4];\n              hex += HEX[value[i] & 0x0f];\n            }\n            messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n          } else {\n            messageDetails.push(key + \"=\" + JSON.stringify(value));\n          }\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n      var url = \"\";\n      switch (code) {\n        case ErrorCode.NUMERIC_FAULT:\n          {\n            url = \"NUMERIC_FAULT\";\n            var fault = message;\n            switch (fault) {\n              case \"overflow\":\n              case \"underflow\":\n              case \"division-by-zero\":\n                url += \"-\" + fault;\n                break;\n              case \"negative-power\":\n              case \"negative-width\":\n                url += \"-unsupported\";\n                break;\n              case \"unbound-bitwise-result\":\n                url += \"-unbound-result\";\n                break;\n            }\n            break;\n          }\n        case ErrorCode.CALL_EXCEPTION:\n        case ErrorCode.INSUFFICIENT_FUNDS:\n        case ErrorCode.MISSING_NEW:\n        case ErrorCode.NONCE_EXPIRED:\n        case ErrorCode.REPLACEMENT_UNDERPRICED:\n        case ErrorCode.TRANSACTION_REPLACED:\n        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n          url = code;\n          break;\n      }\n      if (url) {\n        message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n      }\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      }\n      // @TODO: Any??\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (message == null) {\n        message = \"platform missing String.prototype.normalize\";\n      }\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n      if (message == null) {\n        message = \"value not safe\";\n      }\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version);\n      }\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n  return Logger;\n}();\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"mappings":"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","names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","Object","defineProperty","enumerable","value","writable","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/logger/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}