{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { id } from \"./id\";\nvar padding = new Uint8Array(32);\npadding.fill(0);\nvar NegativeOne = BigNumber.from(-1);\nvar Zero = BigNumber.from(0);\nvar One = BigNumber.from(1);\nvar MaxUint256 = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction hexPadRight(value) {\n  var bytes = arrayify(value);\n  var padOffset = bytes.length % 32;\n  if (padOffset) {\n    return hexConcat([bytes, padding.slice(padOffset)]);\n  }\n  return hexlify(bytes);\n}\nvar hexTrue = hexZeroPad(One.toHexString(), 32);\nvar hexFalse = hexZeroPad(Zero.toHexString(), 32);\nvar domainFieldTypes = {\n  name: \"string\",\n  version: \"string\",\n  chainId: \"uint256\",\n  verifyingContract: \"address\",\n  salt: \"bytes32\"\n};\nvar domainFieldNames = [\"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"];\nfunction checkString(key) {\n  return function (value) {\n    if (typeof value !== \"string\") {\n      logger.throwArgumentError(\"invalid domain value for \".concat(JSON.stringify(key)), \"domain.\".concat(key), value);\n    }\n    return value;\n  };\n}\nvar domainChecks = {\n  name: checkString(\"name\"),\n  version: checkString(\"version\"),\n  chainId: function chainId(value) {\n    try {\n      return BigNumber.from(value).toString();\n    } catch (error) {}\n    return logger.throwArgumentError(\"invalid domain value for \\\"chainId\\\"\", \"domain.chainId\", value);\n  },\n  verifyingContract: function verifyingContract(value) {\n    try {\n      return getAddress(value).toLowerCase();\n    } catch (error) {}\n    return logger.throwArgumentError(\"invalid domain value \\\"verifyingContract\\\"\", \"domain.verifyingContract\", value);\n  },\n  salt: function salt(value) {\n    try {\n      var bytes = arrayify(value);\n      if (bytes.length !== 32) {\n        throw new Error(\"bad length\");\n      }\n      return hexlify(bytes);\n    } catch (error) {}\n    return logger.throwArgumentError(\"invalid domain value \\\"salt\\\"\", \"domain.salt\", value);\n  }\n};\nfunction getBaseEncoder(type) {\n  // intXX and uintXX\n  {\n    var match = type.match(/^(u?)int(\\d*)$/);\n    if (match) {\n      var signed = match[1] === \"\";\n      var width = parseInt(match[2] || \"256\");\n      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {\n        logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n      }\n      var boundsUpper = MaxUint256.mask(signed ? width - 1 : width);\n      var boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;\n      return function (value) {\n        var v = BigNumber.from(value);\n        if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n          logger.throwArgumentError(\"value out-of-bounds for \".concat(type), \"value\", value);\n        }\n        return hexZeroPad(v.toTwos(256).toHexString(), 32);\n      };\n    }\n  }\n  // bytesXX\n  {\n    var _match = type.match(/^bytes(\\d+)$/);\n    if (_match) {\n      var _width = parseInt(_match[1]);\n      if (_width === 0 || _width > 32 || _match[1] !== String(_width)) {\n        logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n      }\n      return function (value) {\n        var bytes = arrayify(value);\n        if (bytes.length !== _width) {\n          logger.throwArgumentError(\"invalid length for \".concat(type), \"value\", value);\n        }\n        return hexPadRight(value);\n      };\n    }\n  }\n  switch (type) {\n    case \"address\":\n      return function (value) {\n        return hexZeroPad(getAddress(value), 32);\n      };\n    case \"bool\":\n      return function (value) {\n        return !value ? hexFalse : hexTrue;\n      };\n    case \"bytes\":\n      return function (value) {\n        return keccak256(value);\n      };\n    case \"string\":\n      return function (value) {\n        return id(value);\n      };\n  }\n  return null;\n}\nfunction encodeType(name, fields) {\n  return \"\".concat(name, \"(\").concat(fields.map(function (_ref) {\n    var name = _ref.name,\n      type = _ref.type;\n    return type + \" \" + name;\n  }).join(\",\"), \")\");\n}\nexport var TypedDataEncoder = /*#__PURE__*/function () {\n  function TypedDataEncoder(types) {\n    _classCallCheck(this, TypedDataEncoder);\n    defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n    defineReadOnly(this, \"_encoderCache\", {});\n    defineReadOnly(this, \"_types\", {});\n    // Link struct types to their direct child structs\n    var links = {};\n    // Link structs to structs which contain them as a child\n    var parents = {};\n    // Link all subtypes within a given struct\n    var subtypes = {};\n    Object.keys(types).forEach(function (type) {\n      links[type] = {};\n      parents[type] = [];\n      subtypes[type] = {};\n    });\n    var _loop = function _loop(name) {\n      var uniqueNames = {};\n      types[name].forEach(function (field) {\n        // Check each field has a unique name\n        if (uniqueNames[field.name]) {\n          logger.throwArgumentError(\"duplicate variable name \".concat(JSON.stringify(field.name), \" in \").concat(JSON.stringify(name)), \"types\", types);\n        }\n        uniqueNames[field.name] = true;\n        // Get the base type (drop any array specifiers)\n        var baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n        if (baseType === name) {\n          logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(baseType)), \"types\", types);\n        }\n        // Is this a base encoding type?\n        var encoder = getBaseEncoder(baseType);\n        if (encoder) {\n          return;\n        }\n        if (!parents[baseType]) {\n          logger.throwArgumentError(\"unknown type \".concat(JSON.stringify(baseType)), \"types\", types);\n        }\n        // Add linkage\n        parents[baseType].push(name);\n        links[name][baseType] = true;\n      });\n    };\n    for (var name in types) {\n      _loop(name);\n    }\n    // Deduce the primary type\n    var primaryTypes = Object.keys(parents).filter(function (n) {\n      return parents[n].length === 0;\n    });\n    if (primaryTypes.length === 0) {\n      logger.throwArgumentError(\"missing primary type\", \"types\", types);\n    } else if (primaryTypes.length > 1) {\n      logger.throwArgumentError(\"ambiguous primary types or unused types: \".concat(primaryTypes.map(function (t) {\n        return JSON.stringify(t);\n      }).join(\", \")), \"types\", types);\n    }\n    defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n    // Check for circular type references\n    function checkCircular(type, found) {\n      if (found[type]) {\n        logger.throwArgumentError(\"circular type reference to \".concat(JSON.stringify(type)), \"types\", types);\n      }\n      found[type] = true;\n      Object.keys(links[type]).forEach(function (child) {\n        if (!parents[child]) {\n          return;\n        }\n        // Recursively check children\n        checkCircular(child, found);\n        // Mark all ancestors as having this decendant\n        Object.keys(found).forEach(function (subtype) {\n          subtypes[subtype][child] = true;\n        });\n      });\n      delete found[type];\n    }\n    checkCircular(this.primaryType, {});\n    // Compute each fully describe type\n    for (var _name in subtypes) {\n      var st = Object.keys(subtypes[_name]);\n      st.sort();\n      this._types[_name] = encodeType(_name, types[_name]) + st.map(function (t) {\n        return encodeType(t, types[t]);\n      }).join(\"\");\n    }\n  }\n  _createClass(TypedDataEncoder, [{\n    key: \"getEncoder\",\n    value: function getEncoder(type) {\n      var encoder = this._encoderCache[type];\n      if (!encoder) {\n        encoder = this._encoderCache[type] = this._getEncoder(type);\n      }\n      return encoder;\n    }\n  }, {\n    key: \"_getEncoder\",\n    value: function _getEncoder(type) {\n      var _this = this;\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n        if (encoder) {\n          return encoder;\n        }\n      }\n      // Array\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n      if (match) {\n        var subtype = match[1];\n        var subEncoder = this.getEncoder(subtype);\n        var length = parseInt(match[3]);\n        return function (value) {\n          if (length >= 0 && value.length !== length) {\n            logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n          }\n          var result = value.map(subEncoder);\n          if (_this._types[subtype]) {\n            result = result.map(keccak256);\n          }\n          return keccak256(hexConcat(result));\n        };\n      }\n      // Struct\n      var fields = this.types[type];\n      if (fields) {\n        var encodedType = id(this._types[type]);\n        return function (value) {\n          var values = fields.map(function (_ref2) {\n            var name = _ref2.name,\n              type = _ref2.type;\n            var result = _this.getEncoder(type)(value[name]);\n            if (_this._types[type]) {\n              return keccak256(result);\n            }\n            return result;\n          });\n          values.unshift(encodedType);\n          return hexConcat(values);\n        };\n      }\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"encodeType\",\n    value: function encodeType(name) {\n      var result = this._types[name];\n      if (!result) {\n        logger.throwArgumentError(\"unknown type: \".concat(JSON.stringify(name)), \"name\", name);\n      }\n      return result;\n    }\n  }, {\n    key: \"encodeData\",\n    value: function encodeData(type, value) {\n      return this.getEncoder(type)(value);\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, value) {\n      return keccak256(this.encodeData(name, value));\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      return this.encodeData(this.primaryType, value);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(value) {\n      return this.hashStruct(this.primaryType, value);\n    }\n  }, {\n    key: \"_visit\",\n    value: function _visit(type, value, callback) {\n      var _this2 = this;\n      // Basic encoder type (address, bool, uint256, etc)\n      {\n        var encoder = getBaseEncoder(type);\n        if (encoder) {\n          return callback(type, value);\n        }\n      }\n      // Array\n      var match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n      if (match) {\n        var subtype = match[1];\n        var length = parseInt(match[3]);\n        if (length >= 0 && value.length !== length) {\n          logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n        }\n        return value.map(function (v) {\n          return _this2._visit(subtype, v, callback);\n        });\n      }\n      // Struct\n      var fields = this.types[type];\n      if (fields) {\n        return fields.reduce(function (accum, _ref3) {\n          var name = _ref3.name,\n            type = _ref3.type;\n          accum[name] = _this2._visit(type, value[name], callback);\n          return accum;\n        }, {});\n      }\n      return logger.throwArgumentError(\"unknown type: \".concat(type), \"type\", type);\n    }\n  }, {\n    key: \"visit\",\n    value: function visit(value, callback) {\n      return this._visit(this.primaryType, value, callback);\n    }\n  }], [{\n    key: \"from\",\n    value: function from(types) {\n      return new TypedDataEncoder(types);\n    }\n  }, {\n    key: \"getPrimaryType\",\n    value: function getPrimaryType(types) {\n      return TypedDataEncoder.from(types).primaryType;\n    }\n  }, {\n    key: \"hashStruct\",\n    value: function hashStruct(name, types, value) {\n      return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n  }, {\n    key: \"hashDomain\",\n    value: function hashDomain(domain) {\n      var domainFields = [];\n      for (var name in domain) {\n        var type = domainFieldTypes[name];\n        if (!type) {\n          logger.throwArgumentError(\"invalid typed-data domain key: \".concat(JSON.stringify(name)), \"domain\", domain);\n        }\n        domainFields.push({\n          name: name,\n          type: type\n        });\n      }\n      domainFields.sort(function (a, b) {\n        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n      });\n      return TypedDataEncoder.hashStruct(\"EIP712Domain\", {\n        EIP712Domain: domainFields\n      }, domain);\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(domain, types, value) {\n      return hexConcat([\"0x1901\", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(domain, types, value) {\n      return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n  }, {\n    key: \"resolveNames\",\n    value: function resolveNames(domain, types, value, resolveName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var ensCache, encoder, name;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // Make a copy to isolate it from the object passed in\n                domain = shallowCopy(domain);\n                // Look up all ENS names\n                ensCache = {}; // Do we need to look up the domain's verifyingContract?\n                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n                  ensCache[domain.verifyingContract] = \"0x\";\n                }\n                // We are going to use the encoder to visit all the base values\n                encoder = TypedDataEncoder.from(types); // Get a list of all the addresses\n                encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && !isHexString(value, 20)) {\n                    ensCache[value] = \"0x\";\n                  }\n                  return value;\n                });\n                // Lookup each name\n                _context.t0 = _regeneratorRuntime().keys(ensCache);\n              case 6:\n                if ((_context.t1 = _context.t0()).done) {\n                  _context.next = 13;\n                  break;\n                }\n                name = _context.t1.value;\n                _context.next = 10;\n                return resolveName(name);\n              case 10:\n                ensCache[name] = _context.sent;\n                _context.next = 6;\n                break;\n              case 13:\n                // Replace the domain verifyingContract if needed\n                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n                  domain.verifyingContract = ensCache[domain.verifyingContract];\n                }\n                // Replace all ENS names with their address\n                value = encoder.visit(value, function (type, value) {\n                  if (type === \"address\" && ensCache[value]) {\n                    return ensCache[value];\n                  }\n                  return value;\n                });\n                return _context.abrupt(\"return\", {\n                  domain: domain,\n                  value: value\n                });\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"getPayload\",\n    value: function getPayload(domain, types, value) {\n      // Validate the domain fields\n      TypedDataEncoder.hashDomain(domain);\n      // Derive the EIP712Domain Struct reference type\n      var domainValues = {};\n      var domainTypes = [];\n      domainFieldNames.forEach(function (name) {\n        var value = domain[name];\n        if (value == null) {\n          return;\n        }\n        domainValues[name] = domainChecks[name](value);\n        domainTypes.push({\n          name: name,\n          type: domainFieldTypes[name]\n        });\n      });\n      var encoder = TypedDataEncoder.from(types);\n      var typesWithDomain = shallowCopy(types);\n      if (typesWithDomain.EIP712Domain) {\n        logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n      } else {\n        typesWithDomain.EIP712Domain = domainTypes;\n      }\n      // Validate the data structures and types\n      encoder.encode(value);\n      return {\n        types: typesWithDomain,\n        domain: domainValues,\n        primaryType: encoder.primaryType,\n        message: encoder.visit(value, function (type, value) {\n          // bytes\n          if (type.match(/^bytes(\\d*)/)) {\n            return hexlify(arrayify(value));\n          }\n          // uint or int\n          if (type.match(/^u?int/)) {\n            return BigNumber.from(value).toString();\n          }\n          switch (type) {\n            case \"address\":\n              return value.toLowerCase();\n            case \"bool\":\n              return !!value;\n            case \"string\":\n              if (typeof value !== \"string\") {\n                logger.throwArgumentError(\"invalid string\", \"value\", value);\n              }\n              return value;\n          }\n          return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n        })\n      };\n    }\n  }]);\n  return TypedDataEncoder;\n}();","map":{"version":3,"mappings":"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","names":["getAddress","BigNumber","arrayify","hexConcat","hexlify","hexZeroPad","isHexString","keccak256","deepCopy","defineReadOnly","shallowCopy","Logger","version","logger","id","padding","Uint8Array","fill","NegativeOne","from","Zero","One","MaxUint256","hexPadRight","value","bytes","padOffset","length","slice","hexTrue","toHexString","hexFalse","domainFieldTypes","name","chainId","verifyingContract","salt","domainFieldNames","checkString","key","throwArgumentError","JSON","stringify","domainChecks","toString","error","toLowerCase","Error","getBaseEncoder","type","match","signed","width","parseInt","String","boundsUpper","mask","boundsLower","add","mul","v","lt","gt","toTwos","encodeType","fields","map","join","TypedDataEncoder","types","Object","freeze","links","parents","subtypes","keys","forEach","uniqueNames","field","baseType","encoder","push","primaryTypes","filter","n","t","checkCircular","found","child","subtype","primaryType","st","sort","_types","_encoderCache","_getEncoder","subEncoder","getEncoder","result","encodedType","values","unshift","encodeData","hashStruct","callback","_visit","reduce","accum","domain","domainFields","a","b","indexOf","EIP712Domain","hashDomain","hash","encode","resolveName","ensCache","visit","domainValues","domainTypes","typesWithDomain","message"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/hash/src.ts/typed-data.ts"],"sourcesContent":["import { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { id } from \"./id\";\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst NegativeOne: BigNumber = BigNumber.from(-1);\nconst Zero: BigNumber = BigNumber.from(0);\nconst One: BigNumber = BigNumber.from(1);\nconst MaxUint256: BigNumber = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value: BytesLike) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return hexConcat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        if (typeof(value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        }\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        try {\n            return BigNumber.from(value).toString()\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) { throw new Error(\"bad length\"); }\n            return hexlify(bytes);\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n}\n\nfunction getBaseEncoder(type: string): (value: any) => string {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1): width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne): Zero;\n\n            return function(value: BigNumberish) {\n                const v = BigNumber.from(value);\n\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${ type }`, \"value\", value);\n                }\n\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n\n            return function(value: BytesLike) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${ type }`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType: string;\n    readonly types: Record<string, Array<TypedDataField>>;\n\n    readonly _encoderCache: Record<string, (value: any) => string>;\n    readonly _types: Record<string, string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n\n        defineReadOnly(this, \"_encoderCache\", { });\n        defineReadOnly(this, \"_types\", { });\n\n        // Link struct types to their direct child structs\n        const links: Record<string, Record<string, boolean>> = { };\n\n        // Link structs to structs which contain them as a child\n        const parents: Record<string, Array<string>> = { };\n\n        // Link all subtypes within a given struct\n        const subtypes: Record<string, Record<string, boolean>> = { };\n\n        Object.keys(types).forEach((type) => {\n            links[type] = { };\n            parents[type] = [ ];\n            subtypes[type] = { }\n        });\n\n        for (const name in types) {\n\n            const uniqueNames: Record<string, boolean> = { };\n\n            types[name].forEach((field) => {\n\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { return ;}\n\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n        }\n\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Record<string, boolean>) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n            }\n\n            found[type] = true;\n\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) { return; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n\n            delete found[type];\n        }\n        checkCircular(this.primaryType, { });\n\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n\n    _getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value: Array<any>) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(hexConcat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            }\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        }\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v: any) => this._visit(subtype, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = shallowCopy(domain);\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof(value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}