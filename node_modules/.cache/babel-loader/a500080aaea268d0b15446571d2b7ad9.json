{"ast":null,"code":"\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport var AbiCoder = /*#__PURE__*/function () {\n  function AbiCoder(coerceFunc) {\n    _classCallCheck(this, AbiCoder);\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n  _createClass(AbiCoder, [{\n    key: \"_getCoder\",\n    value: function _getCoder(param) {\n      var _this = this;\n      switch (param.baseType) {\n        case \"address\":\n          return new AddressCoder(param.name);\n        case \"bool\":\n          return new BooleanCoder(param.name);\n        case \"string\":\n          return new StringCoder(param.name);\n        case \"bytes\":\n          return new BytesCoder(param.name);\n        case \"array\":\n          return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n        case \"tuple\":\n          return new TupleCoder((param.components || []).map(function (component) {\n            return _this._getCoder(component);\n          }), param.name);\n        case \"\":\n          return new NullCoder(param.name);\n      }\n      // u?int[0-9]*\n      var match = param.type.match(paramTypeNumber);\n      if (match) {\n        var size = parseInt(match[2] || \"256\");\n        if (size === 0 || size > 256 || size % 8 !== 0) {\n          logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n        }\n        return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n      }\n      // bytes[0-9]+\n      match = param.type.match(paramTypeBytes);\n      if (match) {\n        var _size = parseInt(match[1]);\n        if (_size === 0 || _size > 32) {\n          logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n        }\n        return new FixedBytesCoder(_size, param.name);\n      }\n      return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n  }, {\n    key: \"_getWordSize\",\n    value: function _getWordSize() {\n      return 32;\n    }\n  }, {\n    key: \"_getReader\",\n    value: function _getReader(data, allowLoose) {\n      return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n  }, {\n    key: \"_getWriter\",\n    value: function _getWriter() {\n      return new Writer(this._getWordSize());\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue(types) {\n      var _this2 = this;\n      var coders = types.map(function (type) {\n        return _this2._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.defaultValue();\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(types, values) {\n      var _this3 = this;\n      if (types.length !== values.length) {\n        logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          count: {\n            types: types.length,\n            values: values.length\n          },\n          value: {\n            types: types,\n            values: values\n          }\n        });\n      }\n      var coders = types.map(function (type) {\n        return _this3._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      var writer = this._getWriter();\n      coder.encode(writer, values);\n      return writer.data;\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(types, data, loose) {\n      var _this4 = this;\n      var coders = types.map(function (type) {\n        return _this4._getCoder(ParamType.from(type));\n      });\n      var coder = new TupleCoder(coders, \"_\");\n      return coder.decode(this._getReader(arrayify(data), loose));\n    }\n  }]);\n  return AbiCoder;\n}();\nexport var defaultAbiCoder = new AbiCoder();","map":{"version":3,"mappings":"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","names":["arrayify","defineReadOnly","Logger","version","logger","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","coerceFunc","param","baseType","name","_getCoder","arrayChildren","arrayLength","components","map","component","match","type","size","parseInt","throwArgumentError","data","allowLoose","_getWordSize","types","coders","from","coder","defaultValue","values","length","throwError","errors","INVALID_ARGUMENT","count","value","writer","_getWriter","encode","loose","decode","_getReader","defaultAbiCoder"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/abi/src.ts/abi-coder.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n"]},"metadata":{},"sourceType":"module"}