{"ast":null,"code":"import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nfunction updateMotionValuesFromProps(element, next, prev) {\n  var willChange = next.willChange;\n  for (var key in next) {\n    var nextValue = next[key];\n    var prevValue = prev[key];\n    if (isMotionValue(nextValue)) {\n      /**\n       * If this is a motion value found in props or style, we want to add it\n       * to our visual element's motion value map.\n       */\n      element.addValue(key, nextValue);\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n      }\n      /**\n       * Check the version of the incoming motion value with this version\n       * and warn against mismatches.\n       */\n      if (process.env.NODE_ENV === \"development\") {\n        warnOnce(nextValue.version === \"7.5.3\", \"Attempting to mix Framer Motion versions \".concat(nextValue.version, \" with 7.5.3 may not work as expected.\"));\n      }\n    } else if (isMotionValue(prevValue)) {\n      /**\n       * If we're swapping from a motion value to a static value,\n       * create a new motion value from that\n       */\n      element.addValue(key, motionValue(nextValue));\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.remove(key);\n      }\n    } else if (prevValue !== nextValue) {\n      /**\n       * If this is a flat value that has changed, update the motion value\n       * or create one if it doesn't exist. We only want to do this if we're\n       * not handling the value with our animation state.\n       */\n      if (element.hasValue(key)) {\n        var existingValue = element.getValue(key);\n        // TODO: Only update values that aren't being animated or even looked at\n        !existingValue.hasAnimated && existingValue.set(nextValue);\n      } else {\n        var latestValue = element.getStaticValue(key);\n        element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue));\n      }\n    }\n  }\n  // Handle removed values\n  for (var _key in prev) {\n    if (next[_key] === undefined) element.removeValue(_key);\n  }\n  return next;\n}\nexport { updateMotionValuesFromProps };","map":{"version":3,"names":["isWillChangeMotionValue","warnOnce","motionValue","isMotionValue","updateMotionValuesFromProps","element","next","prev","willChange","key","nextValue","prevValue","addValue","add","process","env","NODE_ENV","version","remove","hasValue","existingValue","getValue","hasAnimated","set","latestValue","getStaticValue","undefined","removeValue"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs"],"sourcesContent":["import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"7.5.3\", `Attempting to mix Framer Motion versions ${nextValue.version} with 7.5.3 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,oCAAoC;AAC5E,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,aAAa,QAAQ,uCAAuC;AAErE,SAASC,2BAA2B,CAACC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACtD,IAAQC,UAAU,GAAKF,IAAI,CAAnBE,UAAU;EAClB,KAAK,IAAMC,GAAG,IAAIH,IAAI,EAAE;IACpB,IAAMI,SAAS,GAAGJ,IAAI,CAACG,GAAG,CAAC;IAC3B,IAAME,SAAS,GAAGJ,IAAI,CAACE,GAAG,CAAC;IAC3B,IAAIN,aAAa,CAACO,SAAS,CAAC,EAAE;MAC1B;AACZ;AACA;AACA;MACYL,OAAO,CAACO,QAAQ,CAACH,GAAG,EAAEC,SAAS,CAAC;MAChC,IAAIV,uBAAuB,CAACQ,UAAU,CAAC,EAAE;QACrCA,UAAU,CAACK,GAAG,CAACJ,GAAG,CAAC;MACvB;MACA;AACZ;AACA;AACA;MACY,IAAIK,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QACxCf,QAAQ,CAACS,SAAS,CAACO,OAAO,KAAK,OAAO,qDAA8CP,SAAS,CAACO,OAAO,2CAAwC;MACjJ;IACJ,CAAC,MACI,IAAId,aAAa,CAACQ,SAAS,CAAC,EAAE;MAC/B;AACZ;AACA;AACA;MACYN,OAAO,CAACO,QAAQ,CAACH,GAAG,EAAEP,WAAW,CAACQ,SAAS,CAAC,CAAC;MAC7C,IAAIV,uBAAuB,CAACQ,UAAU,CAAC,EAAE;QACrCA,UAAU,CAACU,MAAM,CAACT,GAAG,CAAC;MAC1B;IACJ,CAAC,MACI,IAAIE,SAAS,KAAKD,SAAS,EAAE;MAC9B;AACZ;AACA;AACA;AACA;MACY,IAAIL,OAAO,CAACc,QAAQ,CAACV,GAAG,CAAC,EAAE;QACvB,IAAMW,aAAa,GAAGf,OAAO,CAACgB,QAAQ,CAACZ,GAAG,CAAC;QAC3C;QACA,CAACW,aAAa,CAACE,WAAW,IAAIF,aAAa,CAACG,GAAG,CAACb,SAAS,CAAC;MAC9D,CAAC,MACI;QACD,IAAMc,WAAW,GAAGnB,OAAO,CAACoB,cAAc,CAAChB,GAAG,CAAC;QAC/CJ,OAAO,CAACO,QAAQ,CAACH,GAAG,EAAEP,WAAW,CAACsB,WAAW,KAAKE,SAAS,GAAGF,WAAW,GAAGd,SAAS,CAAC,CAAC;MAC3F;IACJ;EACJ;EACA;EACA,KAAK,IAAMD,IAAG,IAAIF,IAAI,EAAE;IACpB,IAAID,IAAI,CAACG,IAAG,CAAC,KAAKiB,SAAS,EACvBrB,OAAO,CAACsB,WAAW,CAAClB,IAAG,CAAC;EAChC;EACA,OAAOH,IAAI;AACf;AAEA,SAASF,2BAA2B"},"metadata":{},"sourceType":"module"}