{"ast":null,"code":"\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _classCallCheck from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _constructorGuard = {};\nvar MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\n// Only warn about passing 10 into radix once\nvar _warnedToStringRadix = false;\nexport var BigNumber = /*#__PURE__*/function () {\n  function BigNumber(constructorGuard, hex) {\n    _classCallCheck(this, BigNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  _createClass(BigNumber, [{\n    key: \"fromTwos\",\n    value: function fromTwos(value) {\n      return toBigNumber(toBN(this).fromTwos(value));\n    }\n  }, {\n    key: \"toTwos\",\n    value: function toTwos(value) {\n      return toBigNumber(toBN(this).toTwos(value));\n    }\n  }, {\n    key: \"abs\",\n    value: function abs() {\n      if (this._hex[0] === \"-\") {\n        return BigNumber.from(this._hex.substring(1));\n      }\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return toBigNumber(toBN(this).add(toBN(other)));\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(other) {\n      return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n  }, {\n    key: \"div\",\n    value: function div(other) {\n      var o = BigNumber.from(other);\n      if (o.isZero()) {\n        throwFault(\"division-by-zero\", \"div\");\n      }\n      return toBigNumber(toBN(this).div(toBN(other)));\n    }\n  }, {\n    key: \"mul\",\n    value: function mul(other) {\n      return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n  }, {\n    key: \"mod\",\n    value: function mod(other) {\n      var value = toBN(other);\n      if (value.isNeg()) {\n        throwFault(\"division-by-zero\", \"mod\");\n      }\n      return toBigNumber(toBN(this).umod(value));\n    }\n  }, {\n    key: \"pow\",\n    value: function pow(other) {\n      var value = toBN(other);\n      if (value.isNeg()) {\n        throwFault(\"negative-power\", \"pow\");\n      }\n      return toBigNumber(toBN(this).pow(value));\n    }\n  }, {\n    key: \"and\",\n    value: function and(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"and\");\n      }\n      return toBigNumber(toBN(this).and(value));\n    }\n  }, {\n    key: \"or\",\n    value: function or(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"or\");\n      }\n      return toBigNumber(toBN(this).or(value));\n    }\n  }, {\n    key: \"xor\",\n    value: function xor(other) {\n      var value = toBN(other);\n      if (this.isNegative() || value.isNeg()) {\n        throwFault(\"unbound-bitwise-result\", \"xor\");\n      }\n      return toBigNumber(toBN(this).xor(value));\n    }\n  }, {\n    key: \"mask\",\n    value: function mask(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"mask\");\n      }\n      return toBigNumber(toBN(this).maskn(value));\n    }\n  }, {\n    key: \"shl\",\n    value: function shl(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shl\");\n      }\n      return toBigNumber(toBN(this).shln(value));\n    }\n  }, {\n    key: \"shr\",\n    value: function shr(value) {\n      if (this.isNegative() || value < 0) {\n        throwFault(\"negative-width\", \"shr\");\n      }\n      return toBigNumber(toBN(this).shrn(value));\n    }\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      return toBN(this).eq(toBN(other));\n    }\n  }, {\n    key: \"lt\",\n    value: function lt(other) {\n      return toBN(this).lt(toBN(other));\n    }\n  }, {\n    key: \"lte\",\n    value: function lte(other) {\n      return toBN(this).lte(toBN(other));\n    }\n  }, {\n    key: \"gt\",\n    value: function gt(other) {\n      return toBN(this).gt(toBN(other));\n    }\n  }, {\n    key: \"gte\",\n    value: function gte(other) {\n      return toBN(this).gte(toBN(other));\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._hex[0] === \"-\";\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return toBN(this).isZero();\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      try {\n        return toBN(this).toNumber();\n      } catch (error) {\n        throwFault(\"overflow\", \"toNumber\", this.toString());\n      }\n      return null;\n    }\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      try {\n        return BigInt(this.toString());\n      } catch (e) {}\n      return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n        value: this.toString()\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // Lots of people expect this, which we do not support, so check (See: #889)\n      if (arguments.length > 0) {\n        if (arguments[0] === 10) {\n          if (!_warnedToStringRadix) {\n            _warnedToStringRadix = true;\n            logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n          }\n        } else if (arguments[0] === 16) {\n          logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        } else {\n          logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n      }\n      return toBN(this).toString(10);\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString() {\n      return this._hex;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(key) {\n      return {\n        type: \"BigNumber\",\n        hex: this.toHexString()\n      };\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof BigNumber) {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        if (value.match(/^-?0x[0-9a-f]+$/i)) {\n          return new BigNumber(_constructorGuard, toHex(value));\n        }\n        if (value.match(/^-?[0-9]+$/)) {\n          return new BigNumber(_constructorGuard, toHex(new BN(value)));\n        }\n        return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n      }\n      if (typeof value === \"number\") {\n        if (value % 1) {\n          throwFault(\"underflow\", \"BigNumber.from\", value);\n        }\n        if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n          throwFault(\"overflow\", \"BigNumber.from\", value);\n        }\n        return BigNumber.from(String(value));\n      }\n      var anyValue = value;\n      if (typeof anyValue === \"bigint\") {\n        return BigNumber.from(anyValue.toString());\n      }\n      if (isBytes(anyValue)) {\n        return BigNumber.from(hexlify(anyValue));\n      }\n      if (anyValue) {\n        // Hexable interface (takes priority)\n        if (anyValue.toHexString) {\n          var hex = anyValue.toHexString();\n          if (typeof hex === \"string\") {\n            return BigNumber.from(hex);\n          }\n        } else {\n          // For now, handle legacy JSON-ified values (goes away in v6)\n          var _hex = anyValue._hex;\n          // New-form JSON\n          if (_hex == null && anyValue.type === \"BigNumber\") {\n            _hex = anyValue.hex;\n          }\n          if (typeof _hex === \"string\") {\n            if (isHexString(_hex) || _hex[0] === \"-\" && isHexString(_hex.substring(1))) {\n              return BigNumber.from(_hex);\n            }\n          }\n        }\n      }\n      return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isBigNumber\",\n    value: function isBigNumber(value) {\n      return !!(value && value._isBigNumber);\n    }\n  }]);\n  return BigNumber;\n}();\n// Normalize the hex string\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  // If negative, prepend the negative sign to the normalized positive value\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1);\n    // Cannot have multiple negative signs (e.g. \"--0x04\")\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    // Call toHex on the positive component\n    value = toHex(value);\n    // Do not allow \"-0x00\"\n    if (value === \"0x00\") {\n      return value;\n    }\n    // Negate the value\n    return \"-\" + value;\n  }\n  // Add a \"0x\" prefix if missing\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  // Normalize zero\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  // Make the string even length\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  // Trim to smallest even-length string\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  var hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"mappings":"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","names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructorGuard","hex","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","o","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","key","type","toHexString","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts"],"sourcesContent":["\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n"]},"metadata":{},"sourceType":"module"}