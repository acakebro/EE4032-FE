{"ast":null,"code":"import _regeneratorRuntime from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\nvar gestures = {\n  inView: inView,\n  hover: hover,\n  press: press\n};\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nvar stateTypes = [\"initial\", \"animate\"].concat(_toConsumableArray(Object.keys(gestures)), [\"exit\"]);\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nvar mountedStates = new WeakMap();\nfunction createMotionState() {\n  var _marked = /*#__PURE__*/_regeneratorRuntime().mark(animateUpdates);\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n  /**\n   * The element represented by the motion state. This is an empty reference\n   * when we create the state to support SSR and allow for later mounting\n   * in view libraries.\n   *\n   * @ts-ignore\n   */\n  var element;\n  /**\n   * Calculate a depth that we can use to order motion states by tree depth.\n   */\n  var depth = parent ? parent.getDepth() + 1 : 0;\n  /**\n   * Track which states are currently active.\n   */\n  var activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\n   * A map of functions that, when called, will remove event listeners for\n   * a given gesture.\n   */\n  var gestureSubscriptions = {};\n  /**\n   * Initialise a context to share through motion states. This\n   * will be populated by variant names (if any).\n   */\n  var context = {};\n  var _iterator = _createForOfIteratorHelper(stateTypes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n      context[name] = typeof options[name] === \"string\" ? options[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n  /**\n   * Destructure an initial target out from the resolved initial variant.\n   */\n  var _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {},\n    target = __rest(_a, [\"transition\"]);\n  /**\n   * The base target is a cached map of values that we'll use to animate\n   * back to if a value is removed from all active state types. This\n   * is usually the initial value as read from the DOM, for instance if\n   * it hasn't been defined in initial.\n   */\n  var baseTarget = Object.assign({}, target);\n  /**\n   * A generator that will be processed by the global animation scheduler.\n   * This yeilds when it switches from reading the DOM to writing to it\n   * to prevent layout thrashing.\n   */\n  function animateUpdates() {\n    var _a, _b, prevTarget, animationOptions, _iterator2, _step2, name, variant, key, allTargetKeys, animationFactories, animations, animationTarget;\n    return _regeneratorRuntime().wrap(function animateUpdates$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            prevTarget = target;\n            target = {};\n            animationOptions = {};\n            _iterator2 = _createForOfIteratorHelper(stateTypes);\n            _context.prev = 4;\n            _iterator2.s();\n          case 6:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 24;\n              break;\n            }\n            name = _step2.value;\n            if (activeStates[name]) {\n              _context.next = 10;\n              break;\n            }\n            return _context.abrupt(\"continue\", 22);\n          case 10:\n            variant = resolveVariant(options[name]);\n            if (variant) {\n              _context.next = 13;\n              break;\n            }\n            return _context.abrupt(\"continue\", 22);\n          case 13:\n            _context.t0 = _regeneratorRuntime().keys(variant);\n          case 14:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 22;\n              break;\n            }\n            key = _context.t1.value;\n            if (!(key === \"transition\")) {\n              _context.next = 18;\n              break;\n            }\n            return _context.abrupt(\"continue\", 14);\n          case 18:\n            target[key] = variant[key];\n            animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            _context.next = 14;\n            break;\n          case 22:\n            _context.next = 6;\n            break;\n          case 24:\n            _context.next = 29;\n            break;\n          case 26:\n            _context.prev = 26;\n            _context.t2 = _context[\"catch\"](4);\n            _iterator2.e(_context.t2);\n          case 29:\n            _context.prev = 29;\n            _iterator2.f();\n            return _context.finish(29);\n          case 32:\n            allTargetKeys = new Set([].concat(_toConsumableArray(Object.keys(target)), _toConsumableArray(Object.keys(prevTarget))));\n            animationFactories = [];\n            allTargetKeys.forEach(function (key) {\n              var _a;\n              if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n              }\n              if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.get(element, key);\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n              }\n            });\n            // Wait for all animation states to read from the DOM\n            _context.next = 37;\n            return;\n          case 37:\n            animations = animationFactories.map(function (factory) {\n              return factory();\n            }).filter(Boolean);\n            if (animations.length) {\n              _context.next = 40;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 40:\n            animationTarget = target;\n            element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n            Promise.all(animations.map(function (animation) {\n              return animation.finished;\n            })).then(function () {\n              element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n            }).catch(noop);\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked, null, [[4, 26, 29, 32]]);\n  }\n  var setGesture = function setGesture(name, isActive) {\n    return function () {\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    };\n  };\n  var updateGestureSubscriptions = function updateGestureSubscriptions() {\n    for (var name in gestures) {\n      var isGestureActive = gestures[name].isActive(options);\n      var remove = gestureSubscriptions[name];\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n  var state = {\n    update: function update(newOptions) {\n      if (!element) return;\n      options = newOptions;\n      updateGestureSubscriptions();\n      scheduleAnimation(state);\n    },\n    setActive: function setActive(name, isActive) {\n      if (!element) return;\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    },\n    animateUpdates: animateUpdates,\n    getDepth: function getDepth() {\n      return depth;\n    },\n    getTarget: function getTarget() {\n      return target;\n    },\n    getOptions: function getOptions() {\n      return options;\n    },\n    getContext: function getContext() {\n      return context;\n    },\n    mount: function mount(newElement) {\n      invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return function () {\n        mountedStates.delete(element);\n        unscheduleAnimation(state);\n        for (var key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: function isMounted() {\n      return Boolean(element);\n    }\n  };\n  return state;\n}\nexport { createMotionState, mountedStates };","map":{"version":3,"names":["__rest","invariant","noop","animateStyle","style","getOptions","hasChanged","resolveVariant","scheduleAnimation","unscheduleAnimation","inView","hover","press","motionEvent","gestures","stateTypes","Object","keys","mountedStates","WeakMap","createMotionState","animateUpdates","options","parent","element","depth","getDepth","activeStates","initial","animate","gestureSubscriptions","context","name","getContext","initialVariantSource","_a","variants","target","baseTarget","assign","prevTarget","animationOptions","variant","key","_b","transition","allTargetKeys","Set","animationFactories","forEach","undefined","get","push","animations","map","factory","filter","Boolean","length","animationTarget","dispatchEvent","Promise","all","animation","finished","then","catch","setGesture","isActive","state","updateGestureSubscriptions","isGestureActive","remove","subscribe","enable","disable","update","newOptions","setActive","getTarget","mount","newElement","set","delete","isMounted"],"sources":["/Users/hamsterpapa/Documents/GitHub/Crowdfunding-Website/node_modules/@motionone/dom/dist/state/index.es.js"],"sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\n\nconst gestures = { inView, hover, press };\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState(options = {}, parent) {\n    /**\n     * The element represented by the motion state. This is an empty reference\n     * when we create the state to support SSR and allow for later mounting\n     * in view libraries.\n     *\n     * @ts-ignore\n     */\n    let element;\n    /**\n     * Calculate a depth that we can use to order motion states by tree depth.\n     */\n    let depth = parent ? parent.getDepth() + 1 : 0;\n    /**\n     * Track which states are currently active.\n     */\n    const activeStates = { initial: true, animate: true };\n    /**\n     * A map of functions that, when called, will remove event listeners for\n     * a given gesture.\n     */\n    const gestureSubscriptions = {};\n    /**\n     * Initialise a context to share through motion states. This\n     * will be populated by variant names (if any).\n     */\n    const context = {};\n    for (const name of stateTypes) {\n        context[name] =\n            typeof options[name] === \"string\"\n                ? options[name]\n                : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n    const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n    /**\n     * Destructure an initial target out from the resolved initial variant.\n     */\n    let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {}, target = __rest(_a, [\"transition\"]);\n    /**\n     * The base target is a cached map of values that we'll use to animate\n     * back to if a value is removed from all active state types. This\n     * is usually the initial value as read from the DOM, for instance if\n     * it hasn't been defined in initial.\n     */\n    const baseTarget = Object.assign({}, target);\n    /**\n     * A generator that will be processed by the global animation scheduler.\n     * This yeilds when it switches from reading the DOM to writing to it\n     * to prevent layout thrashing.\n     */\n    function* animateUpdates() {\n        var _a, _b;\n        const prevTarget = target;\n        target = {};\n        const animationOptions = {};\n        for (const name of stateTypes) {\n            if (!activeStates[name])\n                continue;\n            const variant = resolveVariant(options[name]);\n            if (!variant)\n                continue;\n            for (const key in variant) {\n                if (key === \"transition\")\n                    continue;\n                target[key] = variant[key];\n                animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            }\n        }\n        const allTargetKeys = new Set([\n            ...Object.keys(target),\n            ...Object.keys(prevTarget),\n        ]);\n        const animationFactories = [];\n        allTargetKeys.forEach((key) => {\n            var _a;\n            if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n            }\n            if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : (baseTarget[key] = style.get(element, key));\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n            }\n        });\n        // Wait for all animation states to read from the DOM\n        yield;\n        const animations = animationFactories\n            .map((factory) => factory())\n            .filter(Boolean);\n        if (!animations.length)\n            return;\n        const animationTarget = target;\n        element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n        Promise.all(animations.map((animation) => animation.finished))\n            .then(() => {\n            element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n        })\n            .catch(noop);\n    }\n    const setGesture = (name, isActive) => () => {\n        activeStates[name] = isActive;\n        scheduleAnimation(state);\n    };\n    const updateGestureSubscriptions = () => {\n        for (const name in gestures) {\n            const isGestureActive = gestures[name].isActive(options);\n            const remove = gestureSubscriptions[name];\n            if (isGestureActive && !remove) {\n                gestureSubscriptions[name] = gestures[name].subscribe(element, {\n                    enable: setGesture(name, true),\n                    disable: setGesture(name, false),\n                }, options);\n            }\n            else if (!isGestureActive && remove) {\n                remove();\n                delete gestureSubscriptions[name];\n            }\n        }\n    };\n    const state = {\n        update: (newOptions) => {\n            if (!element)\n                return;\n            options = newOptions;\n            updateGestureSubscriptions();\n            scheduleAnimation(state);\n        },\n        setActive: (name, isActive) => {\n            if (!element)\n                return;\n            activeStates[name] = isActive;\n            scheduleAnimation(state);\n        },\n        animateUpdates,\n        getDepth: () => depth,\n        getTarget: () => target,\n        getOptions: () => options,\n        getContext: () => context,\n        mount: (newElement) => {\n            invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n            element = newElement;\n            mountedStates.set(element, state);\n            updateGestureSubscriptions();\n            return () => {\n                mountedStates.delete(element);\n                unscheduleAnimation(state);\n                for (const key in gestureSubscriptions) {\n                    gestureSubscriptions[key]();\n                }\n            };\n        },\n        isMounted: () => Boolean(element),\n    };\n    return state;\n}\n\nexport { createMotionState, mountedStates };\n"],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,YAAY,QAAQ,gCAAgC;AAC7D,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,UAAU,QAAQ,gCAAgC;AAC3D,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,cAAc,QAAQ,+BAA+B;AAC9D,SAASC,iBAAiB,EAAEC,mBAAmB,QAAQ,wBAAwB;AAC/E,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,KAAK,QAAQ,wBAAwB;AAC9C,SAASC,WAAW,QAAQ,sBAAsB;AAElD,IAAMC,QAAQ,GAAG;EAAEJ,MAAM,EAANA,MAAM;EAAEC,KAAK,EAALA,KAAK;EAAEC,KAAK,EAALA;AAAM,CAAC;AACzC;AACA;AACA;AACA;AACA,IAAMG,UAAU,IAAI,SAAS,EAAE,SAAS,4BAAKC,MAAM,CAACC,IAAI,CAACH,QAAQ,CAAC,IAAE,MAAM,EAAC;AAC3E;AACA;AACA;AACA;AACA,IAAMI,aAAa,GAAG,IAAIC,OAAO,EAAE;AACnC,SAASC,iBAAiB,GAAuB;EAAA,sDAsDnCC,cAAc;EAAA,IAtDDC,OAAO,uEAAG,CAAC,CAAC;EAAA,IAAEC,MAAM;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAIC,OAAO;EACX;AACJ;AACA;EACI,IAAIC,KAAK,GAAGF,MAAM,GAAGA,MAAM,CAACG,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC;EAC9C;AACJ;AACA;EACI,IAAMC,YAAY,GAAG;IAAEC,OAAO,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAC;EACrD;AACJ;AACA;AACA;EACI,IAAMC,oBAAoB,GAAG,CAAC,CAAC;EAC/B;AACJ;AACA;AACA;EACI,IAAMC,OAAO,GAAG,CAAC,CAAC;EAAC,2CACAhB,UAAU;IAAA;EAAA;IAA7B,oDAA+B;MAAA,IAApBiB,IAAI;MACXD,OAAO,CAACC,IAAI,CAAC,GACT,OAAOV,OAAO,CAACU,IAAI,CAAC,KAAK,QAAQ,GAC3BV,OAAO,CAACU,IAAI,CAAC,GACbT,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,MAAM,CAACU,UAAU,EAAE,CAACD,IAAI,CAAC;IACvF;IACA;AACJ;AACA;AACA;EAHI;IAAA;EAAA;IAAA;EAAA;EAIA,IAAME,oBAAoB,GAAGZ,OAAO,CAACM,OAAO,KAAK,KAAK,GAAG,SAAS,GAAG,SAAS;EAC9E;AACJ;AACA;EACI,IAAIO,EAAE,GAAG5B,cAAc,CAACe,OAAO,CAACY,oBAAoB,CAAC,IAAIH,OAAO,CAACG,oBAAoB,CAAC,EAAEZ,OAAO,CAACc,QAAQ,CAAC,IAAI,CAAC,CAAC;IAAEC,MAAM,GAAGrC,MAAM,CAACmC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;EACpJ;AACJ;AACA;AACA;AACA;AACA;EACI,IAAMG,UAAU,GAAGtB,MAAM,CAACuB,MAAM,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EAC5C;AACJ;AACA;AACA;AACA;EACI,SAAUhB,cAAc;IAAA;IAAA;MAAA;QAAA;UAAA;YAEdmB,UAAU,GAAGH,MAAM;YACzBA,MAAM,GAAG,CAAC,CAAC;YACLI,gBAAgB,GAAG,CAAC,CAAC;YAAA,wCACR1B,UAAU;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAlBiB,IAAI;YAAA,IACNL,YAAY,CAACK,IAAI,CAAC;cAAA;cAAA;YAAA;YAAA;UAAA;YAEjBU,OAAO,GAAGnC,cAAc,CAACe,OAAO,CAACU,IAAI,CAAC,CAAC;YAAA,IACxCU,OAAO;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA,yCAEMA,OAAO;UAAA;YAAA;cAAA;cAAA;YAAA;YAAdC,GAAG;YAAA,MACNA,GAAG,KAAK,YAAY;cAAA;cAAA;YAAA;YAAA;UAAA;YAExBN,MAAM,CAACM,GAAG,CAAC,GAAGD,OAAO,CAACC,GAAG,CAAC;YAC1BF,gBAAgB,CAACE,GAAG,CAAC,GAAGtC,UAAU,CAAC,CAACuC,EAAE,GAAG,CAACT,EAAE,GAAGO,OAAO,CAACG,UAAU,MAAM,IAAI,IAAIV,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGb,OAAO,CAACuB,UAAU,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC,EAAED,GAAG,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAGpKG,aAAa,GAAG,IAAIC,GAAG,8BACtB/B,MAAM,CAACC,IAAI,CAACoB,MAAM,CAAC,sBACnBrB,MAAM,CAACC,IAAI,CAACuB,UAAU,CAAC,GAC5B;YACIQ,kBAAkB,GAAG,EAAE;YAC7BF,aAAa,CAACG,OAAO,CAAC,UAACN,GAAG,EAAK;cAC3B,IAAIR,EAAE;cACN,IAAIE,MAAM,CAACM,GAAG,CAAC,KAAKO,SAAS,EAAE;gBAC3Bb,MAAM,CAACM,GAAG,CAAC,GAAGL,UAAU,CAACK,GAAG,CAAC;cACjC;cACA,IAAIrC,UAAU,CAACkC,UAAU,CAACG,GAAG,CAAC,EAAEN,MAAM,CAACM,GAAG,CAAC,CAAC,EAAE;gBAC1C,CAACR,EAAE,GAAGG,UAAU,CAACK,GAAG,CAAC,MAAM,IAAI,IAAIR,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAIG,UAAU,CAACK,GAAG,CAAC,GAAGvC,KAAK,CAAC+C,GAAG,CAAC3B,OAAO,EAAEmB,GAAG,CAAE;gBACnGK,kBAAkB,CAACI,IAAI,CAACjD,YAAY,CAACqB,OAAO,EAAEmB,GAAG,EAAEN,MAAM,CAACM,GAAG,CAAC,EAAEF,gBAAgB,CAACE,GAAG,CAAC,CAAC,CAAC;cAC3F;YACJ,CAAC,CAAC;YACF;YAAA;YACA;UAAK;YACCU,UAAU,GAAGL,kBAAkB,CAChCM,GAAG,CAAC,UAACC,OAAO;cAAA,OAAKA,OAAO,EAAE;YAAA,EAAC,CAC3BC,MAAM,CAACC,OAAO,CAAC;YAAA,IACfJ,UAAU,CAACK,MAAM;cAAA;cAAA;YAAA;YAAA;UAAA;YAEhBC,eAAe,GAAGtB,MAAM;YAC9Bb,OAAO,CAACoC,aAAa,CAAC/C,WAAW,CAAC,aAAa,EAAE8C,eAAe,CAAC,CAAC;YAClEE,OAAO,CAACC,GAAG,CAACT,UAAU,CAACC,GAAG,CAAC,UAACS,SAAS;cAAA,OAAKA,SAAS,CAACC,QAAQ;YAAA,EAAC,CAAC,CACzDC,IAAI,CAAC,YAAM;cACZzC,OAAO,CAACoC,aAAa,CAAC/C,WAAW,CAAC,gBAAgB,EAAE8C,eAAe,CAAC,CAAC;YACzE,CAAC,CAAC,CACGO,KAAK,CAAChE,IAAI,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;EAErB,IAAMiE,UAAU,GAAG,SAAbA,UAAU,CAAInC,IAAI,EAAEoC,QAAQ;IAAA,OAAK,YAAM;MACzCzC,YAAY,CAACK,IAAI,CAAC,GAAGoC,QAAQ;MAC7B5D,iBAAiB,CAAC6D,KAAK,CAAC;IAC5B,CAAC;EAAA;EACD,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA0B,GAAS;IACrC,KAAK,IAAMtC,IAAI,IAAIlB,QAAQ,EAAE;MACzB,IAAMyD,eAAe,GAAGzD,QAAQ,CAACkB,IAAI,CAAC,CAACoC,QAAQ,CAAC9C,OAAO,CAAC;MACxD,IAAMkD,MAAM,GAAG1C,oBAAoB,CAACE,IAAI,CAAC;MACzC,IAAIuC,eAAe,IAAI,CAACC,MAAM,EAAE;QAC5B1C,oBAAoB,CAACE,IAAI,CAAC,GAAGlB,QAAQ,CAACkB,IAAI,CAAC,CAACyC,SAAS,CAACjD,OAAO,EAAE;UAC3DkD,MAAM,EAAEP,UAAU,CAACnC,IAAI,EAAE,IAAI,CAAC;UAC9B2C,OAAO,EAAER,UAAU,CAACnC,IAAI,EAAE,KAAK;QACnC,CAAC,EAAEV,OAAO,CAAC;MACf,CAAC,MACI,IAAI,CAACiD,eAAe,IAAIC,MAAM,EAAE;QACjCA,MAAM,EAAE;QACR,OAAO1C,oBAAoB,CAACE,IAAI,CAAC;MACrC;IACJ;EACJ,CAAC;EACD,IAAMqC,KAAK,GAAG;IACVO,MAAM,EAAE,gBAACC,UAAU,EAAK;MACpB,IAAI,CAACrD,OAAO,EACR;MACJF,OAAO,GAAGuD,UAAU;MACpBP,0BAA0B,EAAE;MAC5B9D,iBAAiB,CAAC6D,KAAK,CAAC;IAC5B,CAAC;IACDS,SAAS,EAAE,mBAAC9C,IAAI,EAAEoC,QAAQ,EAAK;MAC3B,IAAI,CAAC5C,OAAO,EACR;MACJG,YAAY,CAACK,IAAI,CAAC,GAAGoC,QAAQ;MAC7B5D,iBAAiB,CAAC6D,KAAK,CAAC;IAC5B,CAAC;IACDhD,cAAc,EAAdA,cAAc;IACdK,QAAQ,EAAE;MAAA,OAAMD,KAAK;IAAA;IACrBsD,SAAS,EAAE;MAAA,OAAM1C,MAAM;IAAA;IACvBhC,UAAU,EAAE;MAAA,OAAMiB,OAAO;IAAA;IACzBW,UAAU,EAAE;MAAA,OAAMF,OAAO;IAAA;IACzBiD,KAAK,EAAE,eAACC,UAAU,EAAK;MACnBhF,SAAS,CAACwD,OAAO,CAACwB,UAAU,CAAC,EAAE,oDAAoD,CAAC;MACpFzD,OAAO,GAAGyD,UAAU;MACpB/D,aAAa,CAACgE,GAAG,CAAC1D,OAAO,EAAE6C,KAAK,CAAC;MACjCC,0BAA0B,EAAE;MAC5B,OAAO,YAAM;QACTpD,aAAa,CAACiE,MAAM,CAAC3D,OAAO,CAAC;QAC7Bf,mBAAmB,CAAC4D,KAAK,CAAC;QAC1B,KAAK,IAAM1B,GAAG,IAAIb,oBAAoB,EAAE;UACpCA,oBAAoB,CAACa,GAAG,CAAC,EAAE;QAC/B;MACJ,CAAC;IACL,CAAC;IACDyC,SAAS,EAAE;MAAA,OAAM3B,OAAO,CAACjC,OAAO,CAAC;IAAA;EACrC,CAAC;EACD,OAAO6C,KAAK;AAChB;AAEA,SAASjD,iBAAiB,EAAEF,aAAa"},"metadata":{},"sourceType":"module"}